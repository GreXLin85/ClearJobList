!function(){var e=function(e){var t;return function(r){return t||e(t={exports:{},parent:r},t.exports),t.exports}},t=e(function(e,t){(function(t,o){"use strict";var i;e.exports=h,h.ReadableState=f,de.EventEmitter;var s=function(e,t){return e.listeners(t).length},a=Le.Buffer,c=o.Uint8Array||function(){},u=Object.create(Be);u.inherits=Ce;var l,p=void 0;p=le&&le.debuglog?le.debuglog("stream"):function(){},u.inherits(h,Oe);var d=["error","close","destroy","pause","resume"];function f(e,t){e=e||{};var o=t instanceof(i=i||n({}));this.objectMode=!!e.objectMode,o&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var s=e.highWaterMark,a=e.readableHighWaterMark,c=this.objectMode?16:16384;this.highWaterMark=s||0===s?s:o&&(a||0===a)?a:c,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new Ie,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(l||(l=r({}).StringDecoder),this.decoder=new l(e.encoding),this.encoding=e.encoding)}function h(e){if(i=i||n({}),!(this instanceof h))return new h(e);this._readableState=new f(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),Oe.call(this)}function m(e,t,r,n,o){var i,s=e._readableState;return null===t?(s.reading=!1,function(e,t){if(!t.ended){if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,v(e)}}(e,s)):(o||(i=function(e,t){var r,n;return n=t,a.isBuffer(n)||n instanceof c||"string"==typeof t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk")),r}(s,t)),i?e.emit("error",i):s.objectMode||t&&t.length>0?("string"==typeof t||s.objectMode||Object.getPrototypeOf(t)===a.prototype||(t=function(e){return a.from(e)}(t)),n?s.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):g(e,s,t,!0):s.ended?e.emit("error",new Error("stream.push() after EOF")):(s.reading=!1,s.decoder&&!r?(t=s.decoder.write(t),s.objectMode||0!==t.length?g(e,s,t,!1):_(e,s)):g(e,s,t,!1))):n||(s.reading=!1)),function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(s)}function g(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&v(e)),_(e,t)}Object.defineProperty(h.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),h.prototype.destroy=Ne.destroy,h.prototype._undestroy=Ne.undestroy,h.prototype._destroy=function(e,t){this.push(null),t(e)},h.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=a.from(e,t),t=""),r=!0),m(this,e,t,!1,r)},h.prototype.unshift=function(e){return m(this,e,null,!0,!1)},h.prototype.isPaused=function(){return!1===this._readableState.flowing},h.prototype.setEncoding=function(e){return l||(l=r({}).StringDecoder),this._readableState.decoder=new l(e),this._readableState.encoding=e,this};var b=8388608;function w(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=b?e=b:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function v(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(p("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?Pe.nextTick(y,e):y(e))}function y(e){p("emit readable"),e.emit("readable"),x(e)}function _(e,t){t.readingMore||(t.readingMore=!0,Pe.nextTick(T,e,t))}function T(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(p("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function E(e){p("readable nexttick read 0"),e.read(0)}function k(e,t){t.reading||(p("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),x(e),t.flowing&&!t.reading&&e.read(0)}function x(e){var t=e._readableState;for(p("flow",t.flowing);t.flowing&&null!==e.read(););}function S(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):r=function(e,t,r){var n;return e<t.head.data.length?(n=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):n=e===t.head.data.length?t.shift():r?function(e,t){var r=t.head,n=1,o=r.data;for(e-=o.length;r=r.next;){var i=r.data,s=e>i.length?i.length:e;if(s===i.length?o+=i:o+=i.slice(0,e),0==(e-=s)){s===i.length?(++n,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=i.slice(s));break}++n}return t.length-=n,o}(e,t):function(e,t){var r=a.allocUnsafe(e),n=t.head,o=1;for(n.data.copy(r),e-=n.data.length;n=n.next;){var i=n.data,s=e>i.length?i.length:e;if(i.copy(r,r.length-e,0,s),0==(e-=s)){s===i.length?(++o,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=i.slice(s));break}++o}return t.length-=o,r}(e,t),n}(e,t.buffer,t.decoder),r);var r}function C(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,Pe.nextTick(P,t,e))}function P(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function j(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}h.prototype.read=function(e){p("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return p("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?C(this):v(this),null;if(0===(e=w(e,t))&&t.ended)return 0===t.length&&C(this),null;var n,o=t.needReadable;return p("need readable",o),(0===t.length||t.length-e<t.highWaterMark)&&p("length less than watermark",o=!0),t.ended||t.reading?p("reading or ended",o=!1):o&&(p("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=w(r,t))),null===(n=e>0?S(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&C(this)),null!==n&&this.emit("data",n),n},h.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},h.prototype.pipe=function(e,r){var n=this,o=this._readableState;switch(o.pipesCount){case 0:o.pipes=e;break;case 1:o.pipes=[o.pipes,e];break;default:o.pipes.push(e)}o.pipesCount+=1,p("pipe count=%d opts=%j",o.pipesCount,r);var i=r&&!1===r.end||e===t.stdout||e===t.stderr?g:a;function a(){p("onend"),e.end()}o.endEmitted?Pe.nextTick(i):n.once("end",i),e.on("unpipe",function t(r,i){p("onunpipe"),r===n&&i&&!1===i.hasUnpiped&&(i.hasUnpiped=!0,p("cleanup"),e.removeListener("close",h),e.removeListener("finish",m),e.removeListener("drain",c),e.removeListener("error",f),e.removeListener("unpipe",t),n.removeListener("end",a),n.removeListener("end",g),n.removeListener("data",d),u=!0,!o.awaitDrain||e._writableState&&!e._writableState.needDrain||c())});var c=function(e){return function(){var t=e._readableState;p("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&s(e,"data")&&(t.flowing=!0,x(e))}}(n);e.on("drain",c);var u=!1,l=!1;function d(t){p("ondata"),l=!1,!1!==e.write(t)||l||((1===o.pipesCount&&o.pipes===e||o.pipesCount>1&&-1!==j(o.pipes,e))&&!u&&(p("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,l=!0),n.pause())}function f(t){p("onerror",t),g(),e.removeListener("error",f),0===s(e,"error")&&e.emit("error",t)}function h(){e.removeListener("finish",m),g()}function m(){p("onfinish"),e.removeListener("close",h),g()}function g(){p("unpipe"),n.unpipe(e)}return n.on("data",d),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener("error",r);e._events&&e._events.error?Ae(e._events.error)?e._events.error.unshift(r):e._events.error=[r,e._events.error]:e.on("error",r)}(e,0,f),e.once("close",h),e.once("finish",m),e.emit("pipe",n),o.flowing||(p("pipe resume"),n.resume()),e},h.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r),this);if(!e){var n=t.pipes,o=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var i=0;i<o;i++)n[i].emit("unpipe",this,r);return this}var s=j(t.pipes,e);return-1===s?this:(t.pipes.splice(s,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r),this)},h.prototype.on=function(e,t){var r=Oe.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&v(this):Pe.nextTick(E,this))}return r},h.prototype.addListener=h.prototype.on,h.prototype.resume=function(){var e=this._readableState;return e.flowing||(p("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,Pe.nextTick(k,e,t))}(this,e)),this},h.prototype.pause=function(){return p("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(p("pause"),this._readableState.flowing=!1,this.emit("pause")),this},h.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var o in e.on("end",function(){if(p("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)}),e.on("data",function(o){p("wrapped data"),r.decoder&&(o=r.decoder.write(o)),r.objectMode&&null==o||(r.objectMode||o&&o.length)&&(t.push(o)||(n=!0,e.pause()))}),e)void 0===this[o]&&"function"==typeof e[o]&&(this[o]=function(t){return function(){return e[t].apply(e,arguments)}}(o));for(var i=0;i<d.length;i++)e.on(d[i],this.emit.bind(this,d[i]));return this._read=function(t){p("wrapped _read",t),n&&(n=!1,e.resume())},this},Object.defineProperty(h.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),h._fromList=S}).call(this,f,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}),r=e(function(e,t){"use strict";var r=Le.Buffer,n=r.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(r.isEncoding===n||!n(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=a,this.end=c,t=4;break;case"utf8":this.fillLast=s,t=4;break;case"base64":this.text=u,this.end=l,t=3;break;default:return this.write=p,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(t)}function i(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"\ufffd";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"\ufffd";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"\ufffd"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function a(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function c(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function u(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function l(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function p(e){return e.toString(this.encoding)}function d(e){return e&&e.length?this.write(e):""}t.StringDecoder=o,o.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},o.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"\ufffd":t},o.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var o=i(t[n]);return o>=0?(o>0&&(e.lastNeed=o-1),o):--n<r||-2===o?0:(o=i(t[n]))>=0?(o>0&&(e.lastNeed=o-2),o):--n<r||-2===o?0:(o=i(t[n]))>=0?(o>0&&(2===o?o=0:e.lastNeed=o-3),o):0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},o.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}}),n=e(function(e,r){"use strict";var n=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=p;var i=Object.create(Be);i.inherits=Ce;var s=t({}),a=o({});i.inherits(p,s);for(var c=n(a.prototype),u=0;u<c.length;u++){var l=c[u];p.prototype[l]||(p.prototype[l]=a.prototype[l])}function p(e){if(!(this instanceof p))return new p(e);s.call(this,e),a.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",d)}function d(){this.allowHalfOpen||this._writableState.ended||Pe.nextTick(f,this)}function f(e){e.end()}Object.defineProperty(p.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(p.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),p.prototype._destroy=function(e,t){this.push(null),this.end(),Pe.nextTick(t,e)}}),o=e(function(e,t){(function(t,r,o){"use strict";function i(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;for(e.entry=null;n;){var o=n.callback;t.pendingcb--,o(void 0),n=n.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=m;var s,a=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?o:Pe.nextTick;m.WritableState=h;var c=Object.create(Be);c.inherits=Ce;var u,l={deprecate:He},p=Le.Buffer,d=r.Uint8Array||function(){};function f(){}function h(e,t){s=s||n({}),e=e||{};var r=t instanceof s;this.objectMode=!!e.objectMode,r&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var o=e.highWaterMark,c=e.writableHighWaterMark,u=this.objectMode?16:16384;this.highWaterMark=o||0===o?o:r&&(c||0===c)?c:u,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var l=!1===e.decodeStrings;this.decodeStrings=!l,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,o=r.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,o){--t.pendingcb,r?(Pe.nextTick(o,n),Pe.nextTick(_,e,t),e._writableState.errorEmitted=!0,e.emit("error",n)):(o(n),e._writableState.errorEmitted=!0,e.emit("error",n),_(e,t))}(e,r,n,t,o);else{var i=v(r);i||r.corked||r.bufferProcessing||!r.bufferedRequest||w(e,r),n?a(b,e,r,i,o):b(e,r,i,o)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new i(this)}function m(e){if(s=s||n({}),!(u.call(m,this)||this instanceof s))return new m(e);this._writableState=new h(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),Oe.call(this)}function g(e,t,r,n,o,i,s){t.writelen=n,t.writecb=s,t.writing=!0,t.sync=!0,r?e._writev(o,t.onwrite):e._write(o,i,t.onwrite),t.sync=!1}function b(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),_(e,t)}function w(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,o=new Array(n),s=t.corkedRequestsFree;s.entry=r;for(var a=0,c=!0;r;)o[a]=r,r.isBuf||(c=!1),r=r.next,a+=1;o.allBuffers=c,g(e,t,!0,t.length,o,"",s.finish),t.pendingcb++,t.lastBufferedRequest=null,s.next?(t.corkedRequestsFree=s.next,s.next=null):t.corkedRequestsFree=new i(t),t.bufferedRequestCount=0}else{for(;r;){var u=r.chunk,l=r.encoding,p=r.callback;if(g(e,t,!1,t.objectMode?1:u.length,u,l,p),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function v(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function y(e,t){e._final(function(r){t.pendingcb--,r&&e.emit("error",r),t.prefinished=!0,e.emit("prefinish"),_(e,t)})}function _(e,t){var r=v(t);return r&&(function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,Pe.nextTick(y,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),r}c.inherits(m,Oe),h.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(h.prototype,"buffer",{get:l.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(u=Function.prototype[Symbol.hasInstance],Object.defineProperty(m,Symbol.hasInstance,{value:function(e){return!!u.call(this,e)||this===m&&e&&e._writableState instanceof h}})):u=function(e){return e instanceof this},m.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},m.prototype.write=function(e,t,r){var n,o=this._writableState,i=!1,s=!o.objectMode&&(n=e,p.isBuffer(n)||n instanceof d);return s&&!p.isBuffer(e)&&(e=function(e){return p.from(e)}(e)),"function"==typeof t&&(r=t,t=null),s?t="buffer":t||(t=o.defaultEncoding),"function"!=typeof r&&(r=f),o.ended?function(e,t){var r=new Error("write after end");e.emit("error",r),Pe.nextTick(t,r)}(this,r):(s||function(e,t,r,n){var o=!0,i=!1;return null===r?i=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||t.objectMode||(i=new TypeError("Invalid non-string/buffer chunk")),i&&(e.emit("error",i),Pe.nextTick(n,i),o=!1),o}(this,o,e,r))&&(o.pendingcb++,i=function(e,t,r,n,o,i){if(!r){var s=function(e,t,r){return e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=p.from(t,r)),t}(t,n,o);n!==s&&(r=!0,o="buffer",n=s)}var a=t.objectMode?1:n.length;t.length+=a;var c=t.length<t.highWaterMark;if(c||(t.needDrain=!0),t.writing||t.corked){var u=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:o,isBuf:r,callback:i,next:null},u?u.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else g(e,t,!1,a,n,o,i);return c}(this,o,s,e,t,r)),i},m.prototype.cork=function(){this._writableState.corked++},m.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||w(this,e))},m.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(m.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),m.prototype._write=function(e,t,r){r(new Error("_write() is not implemented"))},m.prototype._writev=null,m.prototype.end=function(e,t,r){var n=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(e,t,r){t.ending=!0,_(e,t),r&&(t.finished?Pe.nextTick(r):e.once("finish",r)),t.ended=!0,e.writable=!1}(this,n,r)},Object.defineProperty(m.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),m.prototype.destroy=Ne.destroy,m.prototype._undestroy=Ne.undestroy,m.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,f,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},i({}).setImmediate)}),i=e(function(e,t){(function(e,r){var n=f.nextTick,o=(Function.prototype.apply,Array.prototype.slice),i={},s=0;function a(e,t){this._id=e,this._clearFn=t}a.prototype.unref=a.prototype.ref=function(){},a.prototype.close=function(){this._clearFn.call(window,this._id)},t.setImmediate="function"==typeof e?e:function(e){var r=s++,a=!(arguments.length<2)&&o.call(arguments,1);return i[r]=!0,n(function(){i[r]&&(a?e.apply(null,a):e.call(null),t.clearImmediate(r))}),r},t.clearImmediate="function"==typeof r?r:function(e){delete i[e]}}).call(this,i({}).setImmediate,i({}).clearImmediate)}),s=e(function(e,t){(function(e){"use strict";t.Buffer=e,t.SlowBuffer=function(t){return+t!=t&&(t=0),e.alloc(+t)},t.INSPECT_MAX_BYTES=50;var r=2147483647;function n(t){if(t>r)throw new RangeError('The value "'+t+'" is invalid for option "size"');var n=new Uint8Array(t);return n.__proto__=e.prototype,n}function e(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return s(e)}return o(e,t,r)}function o(t,r,o){if("string"==typeof t)return function(t,r){if("string"==typeof r&&""!==r||(r="utf8"),!e.isEncoding(r))throw new TypeError("Unknown encoding: "+r);var o=0|u(t,r),i=n(o),s=i.write(t,r);return s!==o&&(i=i.slice(0,s)),i}(t,r);if(ArrayBuffer.isView(t))return a(t);if(null==t)throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(D(t,ArrayBuffer)||t&&D(t.buffer,ArrayBuffer))return function(t,r,n){if(r<0||t.byteLength<r)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<r+(n||0))throw new RangeError('"length" is outside of buffer bounds');var o;return(o=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n)).__proto__=e.prototype,o}(t,r,o);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');var i=t.valueOf&&t.valueOf();if(null!=i&&i!==t)return e.from(i,r,o);var s=function(t){if(e.isBuffer(t)){var r=0|c(t.length),o=n(r);return 0===o.length?o:(t.copy(o,0,0,r),o)}return void 0!==t.length?"number"!=typeof t.length||M(t.length)?n(0):a(t):"Buffer"===t.type&&Array.isArray(t.data)?a(t.data):void 0}(t);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return e.from(t[Symbol.toPrimitive]("string"),r,o);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function i(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function s(e){return i(e),n(e<0?0:0|c(e))}function a(e){for(var t=e.length<0?0:0|c(e.length),r=n(t),o=0;o<t;o+=1)r[o]=255&e[o];return r}function c(e){if(e>=r)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+r.toString(16)+" bytes");return 0|e}function u(t,r){if(e.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||D(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);var n=t.length,o=arguments.length>2&&!0===arguments[2];if(!o&&0===n)return 0;for(var i=!1;;)switch(r){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return L(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return R(t).length;default:if(i)return o?-1:L(t).length;r=(""+r).toLowerCase(),i=!0}}function l(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function p(t,r,n,o,i){if(0===t.length)return-1;if("string"==typeof n?(o=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),M(n=+n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof r&&(r=e.from(r,o)),e.isBuffer(r))return 0===r.length?-1:d(t,r,n,o,i);if("number"==typeof r)return r&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,r,n):Uint8Array.prototype.lastIndexOf.call(t,r,n):d(t,[r],n,o,i);throw new TypeError("val must be string, number or Buffer")}function d(e,t,r,n,o){var i,s=1,a=e.length,c=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;s=2,a/=2,c/=2,r/=2}function u(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(o){var l=-1;for(i=r;i<a;i++)if(u(e,i)===u(t,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===c)return l*s}else-1!==l&&(i-=i-l),l=-1}else for(r+c>a&&(r=a-c),i=r;i>=0;i--){for(var p=!0,d=0;d<c;d++)if(u(e,i+d)!==u(t,d)){p=!1;break}if(p)return i}return-1}function f(e,t,r,n){r=Number(r)||0;var o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=t.length;n>i/2&&(n=i/2);for(var s=0;s<n;++s){var a=parseInt(t.substr(2*s,2),16);if(M(a))return s;e[r+s]=a}return s}function h(e,t,r,n){return G(L(t,e.length-r),e,r,n)}function m(e,t,r,n){return G(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function g(e,t,r,n){return m(e,t,r,n)}function b(e,t,r,n){return G(R(t),e,r,n)}function w(e,t,r,n){return G(function(e,t){for(var r,n,o,i=[],s=0;s<e.length&&!((t-=2)<0);++s)n=(r=e.charCodeAt(s))>>8,o=r%256,i.push(o),i.push(n);return i}(t,e.length-r),e,r,n)}function v(e,t,r){return 0===t&&r===e.length?I.fromByteArray(e):I.fromByteArray(e.slice(t,r))}function y(e,t,r){r=Math.min(e.length,r);for(var n=[],o=t;o<r;){var i,s,a,c,u=e[o],l=null,p=u>239?4:u>223?3:u>191?2:1;if(o+p<=r)switch(p){case 1:u<128&&(l=u);break;case 2:128==(192&(i=e[o+1]))&&(c=(31&u)<<6|63&i)>127&&(l=c);break;case 3:i=e[o+1],s=e[o+2],128==(192&i)&&128==(192&s)&&(c=(15&u)<<12|(63&i)<<6|63&s)>2047&&(c<55296||c>57343)&&(l=c);break;case 4:i=e[o+1],s=e[o+2],a=e[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(c=(15&u)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&c<1114112&&(l=c)}null===l?(l=65533,p=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),o+=p}return function(e){var t=e.length;if(t<=_)return String.fromCharCode.apply(String,e);for(var r="",n=0;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=_));return r}(n)}t.kMaxLength=r,e.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()}catch(t){return!1}}(),e.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(e.prototype,"parent",{enumerable:!0,get:function(){if(e.isBuffer(this))return this.buffer}}),Object.defineProperty(e.prototype,"offset",{enumerable:!0,get:function(){if(e.isBuffer(this))return this.byteOffset}}),"undefined"!=typeof Symbol&&null!=Symbol.species&&e[Symbol.species]===e&&Object.defineProperty(e,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1}),e.poolSize=8192,e.from=function(e,t,r){return o(e,t,r)},e.prototype.__proto__=Uint8Array.prototype,e.__proto__=Uint8Array,e.alloc=function(e,t,r){return function(e,t,r){return i(e),e<=0?n(e):void 0!==t?"string"==typeof r?n(e).fill(t,r):n(e).fill(t):n(e)}(e,t,r)},e.allocUnsafe=function(e){return s(e)},e.allocUnsafeSlow=function(e){return s(e)},e.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==e.prototype},e.compare=function(t,r){if(D(t,Uint8Array)&&(t=e.from(t,t.offset,t.byteLength)),D(r,Uint8Array)&&(r=e.from(r,r.offset,r.byteLength)),!e.isBuffer(t)||!e.isBuffer(r))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===r)return 0;for(var n=t.length,o=r.length,i=0,s=Math.min(n,o);i<s;++i)if(t[i]!==r[i]){n=t[i],o=r[i];break}return n<o?-1:o<n?1:0},e.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},e.concat=function(t,r){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return e.alloc(0);var n;if(void 0===r)for(r=0,n=0;n<t.length;++n)r+=t[n].length;var o=e.allocUnsafe(r),i=0;for(n=0;n<t.length;++n){var s=t[n];if(D(s,Uint8Array)&&(s=e.from(s)),!e.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(o,i),i+=s.length}return o},e.byteLength=u,e.prototype._isBuffer=!0,e.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)l(this,t,t+1);return this},e.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)l(this,t,t+3),l(this,t+1,t+2);return this},e.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)l(this,t,t+7),l(this,t+1,t+6),l(this,t+2,t+5),l(this,t+3,t+4);return this},e.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?y(this,0,e):function(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return k(this,t,r);case"utf8":case"utf-8":return y(this,t,r);case"ascii":return T(this,t,r);case"latin1":case"binary":return E(this,t,r);case"base64":return v(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return x(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}.apply(this,arguments)},e.prototype.toLocaleString=e.prototype.toString,e.prototype.equals=function(t){if(!e.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===e.compare(this,t)},e.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(e+=" ... "),"<Buffer "+e+">"},e.prototype.compare=function(t,r,n,o,i){if(D(t,Uint8Array)&&(t=e.from(t,t.offset,t.byteLength)),!e.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===r&&(r=0),void 0===n&&(n=t?t.length:0),void 0===o&&(o=0),void 0===i&&(i=this.length),r<0||n>t.length||o<0||i>this.length)throw new RangeError("out of range index");if(o>=i&&r>=n)return 0;if(o>=i)return-1;if(r>=n)return 1;if(this===t)return 0;for(var s=(i>>>=0)-(o>>>=0),a=(n>>>=0)-(r>>>=0),c=Math.min(s,a),u=this.slice(o,i),l=t.slice(r,n),p=0;p<c;++p)if(u[p]!==l[p]){s=u[p],a=l[p];break}return s<a?-1:a<s?1:0},e.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},e.prototype.indexOf=function(e,t,r){return p(this,e,t,r,!0)},e.prototype.lastIndexOf=function(e,t,r){return p(this,e,t,r,!1)},e.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return f(this,e,t,r);case"utf8":case"utf-8":return h(this,e,t,r);case"ascii":return m(this,e,t,r);case"latin1":case"binary":return g(this,e,t,r);case"base64":return b(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return w(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},e.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var _=4096;function T(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function E(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function k(e,t,r){var n,o=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>o)&&(r=o);for(var i="",s=t;s<r;++s)i+=(n=e[s])<16?"0"+n.toString(16):n.toString(16);return i}function x(e,t,r){for(var n=e.slice(t,r),o="",i=0;i<n.length;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function S(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function C(t,r,n,o,i,s){if(!e.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(r>i||r<s)throw new RangeError('"value" argument is out of bounds');if(n+o>t.length)throw new RangeError("Index out of range")}function P(e,t,r,n,o,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function j(e,t,r,n,o){return t=+t,r>>>=0,o||P(e,0,r,4),X.write(e,t,r,n,23,4),r+4}function A(e,t,r,n,o){return t=+t,r>>>=0,o||P(e,0,r,8),X.write(e,t,r,n,52,8),r+8}e.prototype.slice=function(t,r){var n=this.length;(t=~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),(r=void 0===r?n:~~r)<0?(r+=n)<0&&(r=0):r>n&&(r=n),r<t&&(r=t);var o=this.subarray(t,r);return o.__proto__=e.prototype,o},e.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||S(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n},e.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||S(e,t,this.length);for(var n=this[e+--t],o=1;t>0&&(o*=256);)n+=this[e+--t]*o;return n},e.prototype.readUInt8=function(e,t){return e>>>=0,t||S(e,1,this.length),this[e]},e.prototype.readUInt16LE=function(e,t){return e>>>=0,t||S(e,2,this.length),this[e]|this[e+1]<<8},e.prototype.readUInt16BE=function(e,t){return e>>>=0,t||S(e,2,this.length),this[e]<<8|this[e+1]},e.prototype.readUInt32LE=function(e,t){return e>>>=0,t||S(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},e.prototype.readUInt32BE=function(e,t){return e>>>=0,t||S(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},e.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||S(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*t)),n},e.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||S(e,t,this.length);for(var n=t,o=1,i=this[e+--n];n>0&&(o*=256);)i+=this[e+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},e.prototype.readInt8=function(e,t){return e>>>=0,t||S(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},e.prototype.readInt16LE=function(e,t){e>>>=0,t||S(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},e.prototype.readInt16BE=function(e,t){e>>>=0,t||S(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},e.prototype.readInt32LE=function(e,t){return e>>>=0,t||S(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},e.prototype.readInt32BE=function(e,t){return e>>>=0,t||S(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},e.prototype.readFloatLE=function(e,t){return e>>>=0,t||S(e,4,this.length),X.read(this,e,!0,23,4)},e.prototype.readFloatBE=function(e,t){return e>>>=0,t||S(e,4,this.length),X.read(this,e,!1,23,4)},e.prototype.readDoubleLE=function(e,t){return e>>>=0,t||S(e,8,this.length),X.read(this,e,!0,52,8)},e.prototype.readDoubleBE=function(e,t){return e>>>=0,t||S(e,8,this.length),X.read(this,e,!1,52,8)},e.prototype.writeUIntLE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||C(this,e,t,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[t]=255&e;++i<r&&(o*=256);)this[t+i]=e/o&255;return t+r},e.prototype.writeUIntBE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||C(this,e,t,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+r},e.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,1,255,0),this[t]=255&e,t+1},e.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},e.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},e.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},e.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},e.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var o=Math.pow(2,8*r-1);C(this,e,t,r,o-1,-o)}var i=0,s=1,a=0;for(this[t]=255&e;++i<r&&(s*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+r},e.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var o=Math.pow(2,8*r-1);C(this,e,t,r,o-1,-o)}var i=r-1,s=1,a=0;for(this[t+i]=255&e;--i>=0&&(s*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+r},e.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},e.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},e.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},e.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},e.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||C(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},e.prototype.writeFloatLE=function(e,t,r){return j(this,e,t,!0,r)},e.prototype.writeFloatBE=function(e,t,r){return j(this,e,t,!1,r)},e.prototype.writeDoubleLE=function(e,t,r){return A(this,e,t,!0,r)},e.prototype.writeDoubleBE=function(e,t,r){return A(this,e,t,!1,r)},e.prototype.copy=function(t,r,n,o){if(!e.isBuffer(t))throw new TypeError("argument should be a Buffer");if(n||(n=0),o||0===o||(o=this.length),r>=t.length&&(r=t.length),r||(r=0),o>0&&o<n&&(o=n),o===n)return 0;if(0===t.length||0===this.length)return 0;if(r<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(o<0)throw new RangeError("sourceEnd out of bounds");o>this.length&&(o=this.length),t.length-r<o-n&&(o=t.length-r+n);var i=o-n;if(this===t&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(r,n,o);else if(this===t&&n<r&&r<o)for(var s=i-1;s>=0;--s)t[s+r]=this[s+n];else Uint8Array.prototype.set.call(t,this.subarray(n,o),r);return i},e.prototype.fill=function(t,r,n,o){if("string"==typeof t){if("string"==typeof r?(o=r,r=0,n=this.length):"string"==typeof n&&(o=n,n=this.length),void 0!==o&&"string"!=typeof o)throw new TypeError("encoding must be a string");if("string"==typeof o&&!e.isEncoding(o))throw new TypeError("Unknown encoding: "+o);if(1===t.length){var i=t.charCodeAt(0);("utf8"===o&&i<128||"latin1"===o)&&(t=i)}}else"number"==typeof t&&(t&=255);if(r<0||this.length<r||this.length<n)throw new RangeError("Out of range index");if(n<=r)return this;var s;if(r>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(s=r;s<n;++s)this[s]=t;else{var a=e.isBuffer(t)?t:e.from(t,o),c=a.length;if(0===c)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(s=0;s<n-r;++s)this[s+r]=a[s%c]}return this};var O=/[^+/0-9A-Za-z-_]/g;function L(e,t){var r;t=t||1/0;for(var n=e.length,o=null,i=[],s=0;s<n;++s){if((r=e.charCodeAt(s))>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function R(e){return I.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(O,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function G(e,t,r,n){for(var o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}function D(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function M(e){return e!=e}}).call(this,s({}).Buffer)}),a={release:function(){return"undefined"!=typeof navigator?navigator.appVersion:""},platform:function(){return"browser"}},c={};const u=new Map([[19,"Catalina"],[18,"Mojave"],[17,"High Sierra"],[16,"Sierra"],[15,"El Capitan"],[14,"Yosemite"],[13,"Mavericks"],[12,"Mountain Lion"],[11,"Lion"],[10,"Snow Leopard"],[9,"Leopard"],[8,"Tiger"],[7,"Panther"],[6,"Jaguar"],[5,"Puma"]]),l=e=>(e=Number((e||a.release()).split(".")[0]),{name:u.get(e),version:"10."+(e-4)});(c=l).default=l;var p,d,f={},h=f={};function m(){throw new Error("setTimeout has not been defined")}function g(){throw new Error("clearTimeout has not been defined")}function b(e){if(p===setTimeout)return setTimeout(e,0);if((p===m||!p)&&setTimeout)return p=setTimeout,setTimeout(e,0);try{return p(e,0)}catch(t){try{return p.call(null,e,0)}catch(t){return p.call(this,e,0)}}}!function(){try{p="function"==typeof setTimeout?setTimeout:m}catch(e){p=m}try{d="function"==typeof clearTimeout?clearTimeout:g}catch(e){d=g}}();var w,v=[],y=!1,_=-1;function T(){y&&w&&(y=!1,w.length?v=w.concat(v):_=-1,v.length&&E())}function E(){if(!y){var e=b(T);y=!0;for(var t=v.length;t;){for(w=v,v=[];++_<t;)w&&w[_].run();_=-1,t=v.length}w=null,y=!1,function(e){if(d===clearTimeout)return clearTimeout(e);if((d===g||!d)&&clearTimeout)return d=clearTimeout,clearTimeout(e);try{d(e)}catch(t){try{return d.call(null,e)}catch(t){return d.call(this,e)}}}(e)}}function k(e,t){this.fun=e,this.array=t}function x(){}h.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];v.push(new k(e,t)),1!==v.length||y||b(E)},k.prototype.run=function(){this.fun.apply(null,this.array)},h.title="browser",h.browser=!0,h.env={},h.argv=[],h.version="",h.versions={},h.on=x,h.addListener=x,h.once=x,h.off=x,h.removeListener=x,h.removeAllListeners=x,h.emit=x,h.prependListener=x,h.prependOnceListener=x,h.listeners=function(e){return[]},h.binding=function(e){throw new Error("process.binding is not supported")},h.cwd=function(){return"/"},h.chdir=function(e){throw new Error("process.chdir is not supported")},h.umask=function(){return 0};var S={};(function(e){function t(e,t){for(var r=0,n=e.length-1;n>=0;n--){var o=e[n];"."===o?e.splice(n,1):".."===o?(e.splice(n,1),r++):r&&(e.splice(n,1),r--)}if(t)for(;r--;r)e.unshift("..");return e}function r(e,t){if(e.filter)return e.filter(t);for(var r=[],n=0;n<e.length;n++)t(e[n],n,e)&&r.push(e[n]);return r}S.resolve=function(){for(var n="",o=!1,i=arguments.length-1;i>=-1&&!o;i--){var s=i>=0?arguments[i]:e.cwd();if("string"!=typeof s)throw new TypeError("Arguments to path.resolve must be strings");s&&(n=s+"/"+n,o="/"===s.charAt(0))}return(o?"/":"")+(n=t(r(n.split("/"),function(e){return!!e}),!o).join("/"))||"."},S.normalize=function(e){var o=S.isAbsolute(e),i="/"===n(e,-1);return(e=t(r(e.split("/"),function(e){return!!e}),!o).join("/"))||o||(e="."),e&&i&&(e+="/"),(o?"/":"")+e},S.isAbsolute=function(e){return"/"===e.charAt(0)},S.join=function(){var e=Array.prototype.slice.call(arguments,0);return S.normalize(r(e,function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},S.delimiter=":",S.dirname=function(e){if("string"!=typeof e&&(e+=""),0===e.length)return".";for(var t=e.charCodeAt(0),r=47===t,n=-1,o=!0,i=e.length-1;i>=1;--i)if(47===(t=e.charCodeAt(i))){if(!o){n=i;break}}else o=!1;return-1===n?r?"/":".":r&&1===n?"/":e.slice(0,n)},S.basename=function(e,t){var r=function(e){"string"!=typeof e&&(e+="");var t,r=0,n=-1,o=!0;for(t=e.length-1;t>=0;--t)if(47===e.charCodeAt(t)){if(!o){r=t+1;break}}else-1===n&&(o=!1,n=t+1);return-1===n?"":e.slice(r,n)}(e);return t&&r.substr(-1*t.length)===t&&(r=r.substr(0,r.length-t.length)),r};var n="b"==="ab".substr(-1)?function(e,t,r){return e.substr(t,r)}:function(e,t,r){return t<0&&(t=e.length+t),e.substr(t,r)}}).call(this,f);var C,P={};function j(e,t,r){return!(!e.isSymbolicLink()&&!e.isFile())&&function(e,t){var r=void 0!==t.pathExt?t.pathExt:".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JSE;.WSF;.WSH;.MSC;.RB;.RBW";if(!r)return!0;if(-1!==(r=r.split(";")).indexOf(""))return!0;for(var n=0;n<r.length;n++){var o=r[n].toLowerCase();if(o&&e.substr(-o.length).toLowerCase()===o)return!0}return!1}(t,r)}function A(e,t,r){P.stat(e,function(n,o){r(n,!n&&j(o,e,t))})}C=A,A.sync=function(e,t){return j(P.statSync(e),e,t)};var O={};(function(e){function t(e,t,n){P.stat(e,function(e,o){n(e,!e&&r(o,t))})}function r(t,r){return t.isFile()&&function(t,r){var n=t.mode,o=t.uid,i=t.gid,s=void 0!==r.uid?r.uid:e.getuid&&e.getuid(),a=void 0!==r.gid?r.gid:e.getgid&&e.getgid(),c=parseInt("100",8),u=parseInt("010",8);return n&parseInt("001",8)||n&u&&i===a||n&c&&o===s||n&(c|u)&&0===s}(t,r)}O=t,t.sync=function(e,t){return r(P.statSync(e),t)}}).call(this,f);var L={};(function(e,t){var r;function n(e,t,o){if("function"==typeof t&&(o=t,t={}),!o){if("function"!=typeof Promise)throw new TypeError("callback not provided");return new Promise(function(r,o){n(e,t||{},function(e,t){e?o(e):r(t)})})}r(e,t||{},function(e,r){e&&("EACCES"===e.code||t&&t.ignoreErrors)&&(e=null,r=!1),o(e,r)})}r="win32"===e.platform||t.TESTING_WINDOWS?C:O,L=n,n.sync=function(e,t){try{return r.sync(e,t||{})}catch(n){if(t&&t.ignoreErrors||"EACCES"===n.code)return!1;throw n}}}).call(this,f,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});var R={};(function(e){R=i,i.sync=function(e,t){for(var r=o(e,t=t||{}),i=r.env,s=r.ext,a=r.extExe,c=[],u=0,l=i.length;u<l;u++){var p=i[u];'"'===p.charAt(0)&&'"'===p.slice(-1)&&(p=p.slice(1,-1));var d=S.join(p,e);!p&&/^\.[\\\/]/.test(e)&&(d=e.slice(0,2)+d);for(var f=0,h=s.length;f<h;f++){var m=d+s[f];try{if(L.sync(m,{pathExt:a})){if(!t.all)return m;c.push(m)}}catch(Dt){}}}if(t.all&&c.length)return c;if(t.nothrow)return null;throw n(e)};var t="win32"===e.platform||"cygwin"===e.env.OSTYPE||"msys"===e.env.OSTYPE,r=t?";":":";function n(e){var t=new Error("not found: "+e);return t.code="ENOENT",t}function o(n,o){var i=o.colon||r,s=o.path||"C:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\npm-lifecycle\\node-gyp-bin;C:\\Users\\GreXLin85\\Desktop\\Projelerim\\NyanArchives\\node_modules\\.bin;C:\\Program Files\\Git\\mingw64\\bin;C:\\Program Files\\Git\\usr\\bin;C:\\Users\\GreXLin85\\bin;C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0;C:\\Windows\\System32\\OpenSSH;C:\\Program Files\\Git\\cmd;C:\\Program Files\\nodejs;C:\\Program Files (x86)\\Yarn\\bin;C:\\Ruby27-x64\\bin;C:\\Users\\GreXLin85\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\GreXLin85\\AppData\\Local\\Programs\\Microsoft VS Code\\bin;C:\\Users\\GreXLin85\\AppData\\Roaming\\npm;C:\\MinGW\\bin;C:\\Program Files\\Mozilla Firefox;C:\\bin;C:\\Users\\GreXLin85\\AppData\\Local\\Yarn\\bin;C:\\Program Files\\heroku\\bin;C:\\nmap;C:\\metasploit-framework\\bin",a=[""];s=s.split(i);var c="";return t&&(s.unshift(e.cwd()),a=(c=o.pathExt||".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JSE;.WSF;.WSH;.MSC;.RB;.RBW").split(i),-1!==n.indexOf(".")&&""!==a[0]&&a.unshift("")),(n.match(/\//)||t&&n.match(/\\/))&&(s=[""]),{env:s,ext:a,extExe:c}}function i(e,t,r){"function"==typeof t&&(r=t,t={});var i=o(e,t),s=i.env,a=i.ext,c=i.extExe,u=[];!function o(i,l){if(i===l)return t.all&&u.length?r(null,u):r(n(e));var p=s[i];'"'===p.charAt(0)&&'"'===p.slice(-1)&&(p=p.slice(1,-1));var d=S.join(p,e);!p&&/^\.[\\\/]/.test(e)&&(d=e.slice(0,2)+d),function e(n,s){if(n===s)return o(i+1,l);var p=a[n];L(d+p,{pathExt:c},function(o,i){if(!o&&i){if(!t.all)return r(null,d+p);u.push(d+p)}return e(n+1,s)})}(0,a.length)}(0,s.length)}}).call(this,f);var G={};(function(e){"use strict";G=(t=>{const r=(t=t||{}).env||e.env;return"win32"!==(t.platform||e.platform)?"PATH":Object.keys(r).find(e=>"PATH"===e.toUpperCase())||"Path"})}).call(this,f);var D={};(function(e){"use strict";const t=G();function r(r,n){const o=e.cwd(),i=null!=r.options.cwd;if(i)try{e.chdir(r.options.cwd)}catch(a){}let s;try{s=R.sync(r.command,{path:(r.options.env||e.env)[t],pathExt:n?S.delimiter:void 0})}catch(c){}finally{e.chdir(o)}return s&&(s=S.resolve(i?r.options.cwd:"",s)),s}D=function(e){return r(e)||r(e,!0)}}).call(this,f);var M={};const q=/([()\][%!^"`<>&|;, *?])/g;M.command=function(e){return e.replace(q,"^$1")},M.argument=function(e,t){return e=(e=`"${e=(e=(e=`${e}`).replace(/(\\*)"/g,'$1$1\\"')).replace(/(\\*)$/,"$1$1")}"`).replace(q,"^$1"),t&&(e=e.replace(q,"^$1")),e};for(var B=/^#!.*/,I={toByteArray:function(e){var t,r,n=W(e),o=n[0],i=n[1],s=new N(function(e,t,r){return 3*(t+r)/4-r}(0,o,i)),a=0,c=i>0?o-4:o;for(r=0;r<c;r+=4)t=U[e.charCodeAt(r)]<<18|U[e.charCodeAt(r+1)]<<12|U[e.charCodeAt(r+2)]<<6|U[e.charCodeAt(r+3)],s[a++]=t>>16&255,s[a++]=t>>8&255,s[a++]=255&t;return 2===i&&(t=U[e.charCodeAt(r)]<<2|U[e.charCodeAt(r+1)]>>4,s[a++]=255&t),1===i&&(t=U[e.charCodeAt(r)]<<10|U[e.charCodeAt(r+1)]<<4|U[e.charCodeAt(r+2)]>>2,s[a++]=t>>8&255,s[a++]=255&t),s},fromByteArray:function(e){for(var t,r=e.length,n=r%3,o=[],i=0,s=r-n;i<s;i+=16383)o.push(V(e,i,i+16383>s?s:i+16383));return 1===n?(t=e[r-1],o.push(F[t>>2]+F[t<<4&63]+"==")):2===n&&(t=(e[r-2]<<8)+e[r-1],o.push(F[t>>10]+F[t>>4&63]+F[t<<2&63]+"=")),o.join("")}},F=[],U=[],N="undefined"!=typeof Uint8Array?Uint8Array:Array,H="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",z=0,$=H.length;z<$;++z)F[z]=H[z],U[H.charCodeAt(z)]=z;function W(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function V(e,t,r){for(var n,o,i=[],s=t;s<r;s+=3)n=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),i.push(F[(o=n)>>18&63]+F[o>>12&63]+F[o>>6&63]+F[63&o]);return i.join("")}U["-".charCodeAt(0)]=62,U["_".charCodeAt(0)]=63;var X={read:function(e,t,r,n,o){var i,s,a=8*o-n-1,c=(1<<a)-1,u=c>>1,l=-7,p=r?o-1:0,d=r?-1:1,f=e[t+p];for(p+=d,i=f&(1<<-l)-1,f>>=-l,l+=a;l>0;i=256*i+e[t+p],p+=d,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=n;l>0;s=256*s+e[t+p],p+=d,l-=8);if(0===i)i=1-u;else{if(i===c)return s?NaN:1/0*(f?-1:1);s+=Math.pow(2,n),i-=u}return(f?-1:1)*s*Math.pow(2,i-n)},write:function(e,t,r,n,o,i){var s,a,c,u=8*i-o-1,l=(1<<u)-1,p=l>>1,d=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:i-1,h=n?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-s))<1&&(s--,c*=2),(t+=s+p>=1?d/c:d*Math.pow(2,1-p))*c>=2&&(s++,c/=2),s+p>=l?(a=0,s=l):s+p>=1?(a=(t*c-1)*Math.pow(2,o),s+=p):(a=t*Math.pow(2,p-1)*Math.pow(2,o),s=0));o>=8;e[r+f]=255&a,f+=h,a/=256,o-=8);for(s=s<<o|a,u+=o;u>0;e[r+f]=255&s,f+=h,s/=256,u-=8);e[r+f-h]|=128*m}},K={};(function(e){"use strict";K=function(t){let r,n;e.alloc?r=e.alloc(150):(r=new e(150)).fill(0);try{n=P.openSync(t,"r"),P.readSync(n,r,0,150,0),P.closeSync(n)}catch(o){}return function(e){var t=e.match(B);if(!t)return null;var r=t[0].replace(/#! ?/,"").split(" "),n=r[0].split("/").pop(),o=r[1];return"env"===n?o:n+(o?" "+o:"")}(r.toString())}}).call(this,s({}).Buffer);var J={};(function(e){var t;J=J=W,t="object"==typeof e&&e.env&&e.env.NODE_DEBUG&&/\bsemver\b/i.test(e.env.NODE_DEBUG)?function(){var e=Array.prototype.slice.call(arguments,0);e.unshift("SEMVER"),console.log.apply(console,e)}:function(){},J.SEMVER_SPEC_VERSION="2.0.0";var r=256,n=Number.MAX_SAFE_INTEGER||9007199254740991,o=J.re=[],i=J.src=[],s=0,a=s++;i[a]="0|[1-9]\\d*";var c=s++;i[c]="[0-9]+";var u=s++;i[u]="\\d*[a-zA-Z-][a-zA-Z0-9-]*";var l=s++;i[l]="("+i[a]+")\\.("+i[a]+")\\.("+i[a]+")";var p=s++;i[p]="("+i[c]+")\\.("+i[c]+")\\.("+i[c]+")";var d=s++;i[d]="(?:"+i[a]+"|"+i[u]+")";var f=s++;i[f]="(?:"+i[c]+"|"+i[u]+")";var h=s++;i[h]="(?:-("+i[d]+"(?:\\."+i[d]+")*))";var m=s++;i[m]="(?:-?("+i[f]+"(?:\\."+i[f]+")*))";var g=s++;i[g]="[0-9A-Za-z-]+";var b=s++;i[b]="(?:\\+("+i[g]+"(?:\\."+i[g]+")*))";var w=s++,v="v?"+i[l]+i[h]+"?"+i[b]+"?";i[w]="^"+v+"$";var y="[v=\\s]*"+i[p]+i[m]+"?"+i[b]+"?",_=s++;i[_]="^"+y+"$";var T=s++;i[T]="((?:<|>)?=?)";var E=s++;i[E]=i[c]+"|x|X|\\*";var k=s++;i[k]=i[a]+"|x|X|\\*";var x=s++;i[x]="[v=\\s]*("+i[k]+")(?:\\.("+i[k]+")(?:\\.("+i[k]+")(?:"+i[h]+")?"+i[b]+"?)?)?";var S=s++;i[S]="[v=\\s]*("+i[E]+")(?:\\.("+i[E]+")(?:\\.("+i[E]+")(?:"+i[m]+")?"+i[b]+"?)?)?";var C=s++;i[C]="^"+i[T]+"\\s*"+i[x]+"$";var P=s++;i[P]="^"+i[T]+"\\s*"+i[S]+"$";var j=s++;i[j]="(?:^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])";var A=s++;i[A]="(?:~>?)";var O=s++;i[O]="(\\s*)"+i[A]+"\\s+",o[O]=new RegExp(i[O],"g");var L=s++;i[L]="^"+i[A]+i[x]+"$";var R=s++;i[R]="^"+i[A]+i[S]+"$";var G=s++;i[G]="(?:\\^)";var D=s++;i[D]="(\\s*)"+i[G]+"\\s+",o[D]=new RegExp(i[D],"g");var M=s++;i[M]="^"+i[G]+i[x]+"$";var q=s++;i[q]="^"+i[G]+i[S]+"$";var B=s++;i[B]="^"+i[T]+"\\s*("+y+")$|^$";var I=s++;i[I]="^"+i[T]+"\\s*("+v+")$|^$";var F=s++;i[F]="(\\s*)"+i[T]+"\\s*("+y+"|"+i[x]+")",o[F]=new RegExp(i[F],"g");var U=s++;i[U]="^\\s*("+i[x]+")\\s+-\\s+("+i[x]+")\\s*$";var N=s++;i[N]="^\\s*("+i[S]+")\\s+-\\s+("+i[S]+")\\s*$";var H=s++;i[H]="(<|>)?=?\\s*\\*";for(var z=0;z<35;z++)t(z,i[z]),o[z]||(o[z]=new RegExp(i[z]));function $(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof W)return e;if("string"!=typeof e)return null;if(e.length>r)return null;if(!(t.loose?o[_]:o[w]).test(e))return null;try{return new W(e,t)}catch(n){return null}}function W(e,i){if(i&&"object"==typeof i||(i={loose:!!i,includePrerelease:!1}),e instanceof W){if(e.loose===i.loose)return e;e=e.version}else if("string"!=typeof e)throw new TypeError("Invalid Version: "+e);if(e.length>r)throw new TypeError("version is longer than "+r+" characters");if(!(this instanceof W))return new W(e,i);t("SemVer",e,i),this.options=i,this.loose=!!i.loose;var s=e.trim().match(i.loose?o[_]:o[w]);if(!s)throw new TypeError("Invalid Version: "+e);if(this.raw=e,this.major=+s[1],this.minor=+s[2],this.patch=+s[3],this.major>n||this.major<0)throw new TypeError("Invalid major version");if(this.minor>n||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>n||this.patch<0)throw new TypeError("Invalid patch version");s[4]?this.prerelease=s[4].split(".").map(function(e){if(/^[0-9]+$/.test(e)){var t=+e;if(t>=0&&t<n)return t}return e}):this.prerelease=[],this.build=s[5]?s[5].split("."):[],this.format()}J.parse=$,J.valid=function(e,t){var r=$(e,t);return r?r.version:null},J.clean=function(e,t){var r=$(e.trim().replace(/^[=v]+/,""),t);return r?r.version:null},J.SemVer=W,W.prototype.format=function(){return this.version=this.major+"."+this.minor+"."+this.patch,this.prerelease.length&&(this.version+="-"+this.prerelease.join(".")),this.version},W.prototype.toString=function(){return this.version},W.prototype.compare=function(e){return t("SemVer.compare",this.version,this.options,e),e instanceof W||(e=new W(e,this.options)),this.compareMain(e)||this.comparePre(e)},W.prototype.compareMain=function(e){return e instanceof W||(e=new W(e,this.options)),X(this.major,e.major)||X(this.minor,e.minor)||X(this.patch,e.patch)},W.prototype.comparePre=function(e){if(e instanceof W||(e=new W(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;var r=0;do{var n=this.prerelease[r],o=e.prerelease[r];if(t("prerelease compare",r,n,o),void 0===n&&void 0===o)return 0;if(void 0===o)return 1;if(void 0===n)return-1;if(n!==o)return X(n,o)}while(++r)},W.prototype.inc=function(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t),this.inc("pre",t);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{for(var r=this.prerelease.length;--r>=0;)"number"==typeof this.prerelease[r]&&(this.prerelease[r]++,r=-2);-1===r&&this.prerelease.push(0)}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error("invalid increment argument: "+e)}return this.format(),this.raw=this.version,this},J.inc=function(e,t,r,n){"string"==typeof r&&(n=r,r=void 0);try{return new W(e,r).inc(t,n).version}catch(o){return null}},J.diff=function(e,t){if(Q(e,t))return null;var r=$(e),n=$(t),o="";if(r.prerelease.length||n.prerelease.length){o="pre";var i="prerelease"}for(var s in r)if(("major"===s||"minor"===s||"patch"===s)&&r[s]!==n[s])return o+s;return i},J.compareIdentifiers=X;var V=/^[0-9]+$/;function X(e,t){var r=V.test(e),n=V.test(t);return r&&n&&(e=+e,t=+t),e===t?0:r&&!n?-1:n&&!r?1:e<t?-1:1}function K(e,t,r){return new W(e,r).compare(new W(t,r))}function Y(e,t,r){return K(e,t,r)>0}function Z(e,t,r){return K(e,t,r)<0}function Q(e,t,r){return 0===K(e,t,r)}function ee(e,t,r){return 0!==K(e,t,r)}function te(e,t,r){return K(e,t,r)>=0}function re(e,t,r){return K(e,t,r)<=0}function ne(e,t,r,n){switch(t){case"===":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e===r;case"!==":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e!==r;case"":case"=":case"==":return Q(e,r,n);case"!=":return ee(e,r,n);case">":return Y(e,r,n);case">=":return te(e,r,n);case"<":return Z(e,r,n);case"<=":return re(e,r,n);default:throw new TypeError("Invalid operator: "+t)}}function oe(e,r){if(r&&"object"==typeof r||(r={loose:!!r,includePrerelease:!1}),e instanceof oe){if(e.loose===!!r.loose)return e;e=e.value}if(!(this instanceof oe))return new oe(e,r);t("comparator",e,r),this.options=r,this.loose=!!r.loose,this.parse(e),this.semver===ie?this.value="":this.value=this.operator+this.semver.version,t("comp",this)}J.rcompareIdentifiers=function(e,t){return X(t,e)},J.major=function(e,t){return new W(e,t).major},J.minor=function(e,t){return new W(e,t).minor},J.patch=function(e,t){return new W(e,t).patch},J.compare=K,J.compareLoose=function(e,t){return K(e,t,!0)},J.rcompare=function(e,t,r){return K(t,e,r)},J.sort=function(e,t){return e.sort(function(e,r){return J.compare(e,r,t)})},J.rsort=function(e,t){return e.sort(function(e,r){return J.rcompare(e,r,t)})},J.gt=Y,J.lt=Z,J.eq=Q,J.neq=ee,J.gte=te,J.lte=re,J.cmp=ne,J.Comparator=oe;var ie={};function se(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof se)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new se(e.raw,t);if(e instanceof oe)return new se(e.value,t);if(!(this instanceof se))return new se(e,t);if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split(/\s*\|\|\s*/).map(function(e){return this.parseRange(e.trim())},this).filter(function(e){return e.length}),!this.set.length)throw new TypeError("Invalid SemVer Range: "+e);this.format()}function ae(e){return!e||"x"===e.toLowerCase()||"*"===e}function ce(e,t,r,n,o,i,s,a,c,u,l,p,d){return((t=ae(r)?"":ae(n)?">="+r+".0.0":ae(o)?">="+r+"."+n+".0":">="+t)+" "+(a=ae(c)?"":ae(u)?"<"+(+c+1)+".0.0":ae(l)?"<"+c+"."+(+u+1)+".0":p?"<="+c+"."+u+"."+l+"-"+p:"<="+a)).trim()}function ue(e,r,n){for(var o=0;o<e.length;o++)if(!e[o].test(r))return!1;if(r.prerelease.length&&!n.includePrerelease){for(o=0;o<e.length;o++)if(t(e[o].semver),e[o].semver!==ie&&e[o].semver.prerelease.length>0){var i=e[o].semver;if(i.major===r.major&&i.minor===r.minor&&i.patch===r.patch)return!0}return!1}return!0}function le(e,t,r){try{t=new se(t,r)}catch(n){return!1}return t.test(e)}function pe(e,t,r,n){var o,i,s,a,c;switch(e=new W(e,n),t=new se(t,n),r){case">":o=Y,i=re,s=Z,a=">",c=">=";break;case"<":o=Z,i=te,s=Y,a="<",c="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(le(e,t,n))return!1;for(var u=0;u<t.set.length;++u){var l=t.set[u],p=null,d=null;if(l.forEach(function(e){e.semver===ie&&(e=new oe(">=0.0.0")),p=p||e,d=d||e,o(e.semver,p.semver,n)?p=e:s(e.semver,d.semver,n)&&(d=e)}),p.operator===a||p.operator===c)return!1;if((!d.operator||d.operator===a)&&i(e,d.semver))return!1;if(d.operator===c&&s(e,d.semver))return!1}return!0}oe.prototype.parse=function(e){var t=this.options.loose?o[B]:o[I],r=e.match(t);if(!r)throw new TypeError("Invalid comparator: "+e);this.operator=r[1],"="===this.operator&&(this.operator=""),r[2]?this.semver=new W(r[2],this.options.loose):this.semver=ie},oe.prototype.toString=function(){return this.value},oe.prototype.test=function(e){return t("Comparator.test",e,this.options.loose),this.semver===ie||("string"==typeof e&&(e=new W(e,this.options)),ne(e,this.operator,this.semver,this.options))},oe.prototype.intersects=function(e,t){if(!(e instanceof oe))throw new TypeError("a Comparator is required");var r;if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),""===this.operator)return r=new se(e.value,t),le(this.value,r,t);if(""===e.operator)return r=new se(this.value,t),le(e.semver,r,t);var n=!(">="!==this.operator&&">"!==this.operator||">="!==e.operator&&">"!==e.operator),o=!("<="!==this.operator&&"<"!==this.operator||"<="!==e.operator&&"<"!==e.operator),i=this.semver.version===e.semver.version,s=!(">="!==this.operator&&"<="!==this.operator||">="!==e.operator&&"<="!==e.operator),a=ne(this.semver,"<",e.semver,t)&&(">="===this.operator||">"===this.operator)&&("<="===e.operator||"<"===e.operator),c=ne(this.semver,">",e.semver,t)&&("<="===this.operator||"<"===this.operator)&&(">="===e.operator||">"===e.operator);return n||o||i&&s||a||c},J.Range=se,se.prototype.format=function(){return this.range=this.set.map(function(e){return e.join(" ").trim()}).join("||").trim(),this.range},se.prototype.toString=function(){return this.range},se.prototype.parseRange=function(e){var r=this.options.loose;e=e.trim();var n=r?o[N]:o[U];e=e.replace(n,ce),t("hyphen replace",e),e=e.replace(o[F],"$1$2$3"),t("comparator trim",e,o[F]),e=(e=(e=e.replace(o[O],"$1~")).replace(o[D],"$1^")).split(/\s+/).join(" ");var i=r?o[B]:o[I],s=e.split(" ").map(function(e){return function(e,r){return t("comp",e,r),e=function(e,r){return e.trim().split(/\s+/).map(function(e){return function(e,r){t("caret",e,r);var n=r.loose?o[q]:o[M];return e.replace(n,function(r,n,o,i,s){var a;return t("caret",e,r,n,o,i,s),ae(n)?a="":ae(o)?a=">="+n+".0.0 <"+(+n+1)+".0.0":ae(i)?a="0"===n?">="+n+"."+o+".0 <"+n+"."+(+o+1)+".0":">="+n+"."+o+".0 <"+(+n+1)+".0.0":s?(t("replaceCaret pr",s),a="0"===n?"0"===o?">="+n+"."+o+"."+i+"-"+s+" <"+n+"."+o+"."+(+i+1):">="+n+"."+o+"."+i+"-"+s+" <"+n+"."+(+o+1)+".0":">="+n+"."+o+"."+i+"-"+s+" <"+(+n+1)+".0.0"):(t("no pr"),a="0"===n?"0"===o?">="+n+"."+o+"."+i+" <"+n+"."+o+"."+(+i+1):">="+n+"."+o+"."+i+" <"+n+"."+(+o+1)+".0":">="+n+"."+o+"."+i+" <"+(+n+1)+".0.0"),t("caret return",a),a})}(e,r)}).join(" ")}(e,r),t("caret",e),e=function(e,r){return e.trim().split(/\s+/).map(function(e){return function(e,r){var n=r.loose?o[R]:o[L];return e.replace(n,function(r,n,o,i,s){var a;return t("tilde",e,r,n,o,i,s),ae(n)?a="":ae(o)?a=">="+n+".0.0 <"+(+n+1)+".0.0":ae(i)?a=">="+n+"."+o+".0 <"+n+"."+(+o+1)+".0":s?(t("replaceTilde pr",s),a=">="+n+"."+o+"."+i+"-"+s+" <"+n+"."+(+o+1)+".0"):a=">="+n+"."+o+"."+i+" <"+n+"."+(+o+1)+".0",t("tilde return",a),a})}(e,r)}).join(" ")}(e,r),t("tildes",e),e=function(e,r){return t("replaceXRanges",e,r),e.split(/\s+/).map(function(e){return function(e,r){e=e.trim();var n=r.loose?o[P]:o[C];return e.replace(n,function(r,n,o,i,s,a){t("xRange",e,r,n,o,i,s,a);var c=ae(o),u=c||ae(i),l=u||ae(s);return"="===n&&l&&(n=""),c?r=">"===n||"<"===n?"<0.0.0":"*":n&&l?(u&&(i=0),s=0,">"===n?(n=">=",u?(o=+o+1,i=0,s=0):(i=+i+1,s=0)):"<="===n&&(n="<",u?o=+o+1:i=+i+1),r=n+o+"."+i+"."+s):u?r=">="+o+".0.0 <"+(+o+1)+".0.0":l&&(r=">="+o+"."+i+".0 <"+o+"."+(+i+1)+".0"),t("xRange return",r),r})}(e,r)}).join(" ")}(e,r),t("xrange",e),e=function(e,r){return t("replaceStars",e,r),e.trim().replace(o[H],"")}(e,r),t("stars",e),e}(e,this.options)},this).join(" ").split(/\s+/);return this.options.loose&&(s=s.filter(function(e){return!!e.match(i)})),s.map(function(e){return new oe(e,this.options)},this)},se.prototype.intersects=function(e,t){if(!(e instanceof se))throw new TypeError("a Range is required");return this.set.some(function(r){return r.every(function(r){return e.set.some(function(e){return e.every(function(e){return r.intersects(e,t)})})})})},J.toComparators=function(e,t){return new se(e,t).set.map(function(e){return e.map(function(e){return e.value}).join(" ").trim().split(" ")})},se.prototype.test=function(e){if(!e)return!1;"string"==typeof e&&(e=new W(e,this.options));for(var t=0;t<this.set.length;t++)if(ue(this.set[t],e,this.options))return!0;return!1},J.satisfies=le,J.maxSatisfying=function(e,t,r){var n=null,o=null;try{var i=new se(t,r)}catch(s){return null}return e.forEach(function(e){i.test(e)&&(n&&-1!==o.compare(e)||(o=new W(n=e,r)))}),n},J.minSatisfying=function(e,t,r){var n=null,o=null;try{var i=new se(t,r)}catch(s){return null}return e.forEach(function(e){i.test(e)&&(n&&1!==o.compare(e)||(o=new W(n=e,r)))}),n},J.minVersion=function(e,t){e=new se(e,t);var r=new W("0.0.0");if(e.test(r))return r;if(r=new W("0.0.0-0"),e.test(r))return r;r=null;for(var n=0;n<e.set.length;++n){e.set[n].forEach(function(e){var t=new W(e.semver.version);switch(e.operator){case">":0===t.prerelease.length?t.patch++:t.prerelease.push(0),t.raw=t.format();case"":case">=":r&&!Y(r,t)||(r=t);break;case"<":case"<=":break;default:throw new Error("Unexpected operation: "+e.operator)}})}return r&&e.test(r)?r:null},J.validRange=function(e,t){try{return new se(e,t).range||"*"}catch(r){return null}},J.ltr=function(e,t,r){return pe(e,t,"<",r)},J.gtr=function(e,t,r){return pe(e,t,">",r)},J.outside=pe,J.prerelease=function(e,t){var r=$(e,t);return r&&r.prerelease.length?r.prerelease:null},J.intersects=function(e,t,r){return e=new se(e,r),t=new se(t,r),e.intersects(t)},J.coerce=function(e){if(e instanceof W)return e;if("string"!=typeof e)return null;var t=e.match(o[j]);return null==t?null:$(t[1]+"."+(t[2]||"0")+"."+(t[3]||"0"))}}).call(this,f);var Y={};(function(e){"use strict";const t="win32"===e.platform,r=/\.(?:com|exe)$/i,n=/node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i,o=function(e){try{return e()}catch(t){}}(()=>J.satisfies(e.version,"^4.8.0 || ^5.7.0 || >= 6.0.0",!0))||!1;Y=function(i,s,a){s&&!Array.isArray(s)&&(a=s,s=null);const c={command:i,args:s=s?s.slice(0):[],options:a=Object.assign({},a),file:void 0,original:{command:i,args:s}};return a.shell?function(r){if(o)return r;const n=[r.command].concat(r.args).join(" ");return t?(r.command="string"==typeof r.options.shell?r.options.shell:e.env.comspec||"cmd.exe",r.args=["/d","/s","/c",`"${n}"`],r.options.windowsVerbatimArguments=!0):("string"==typeof r.options.shell?r.command=r.options.shell:"android"===e.platform?r.command="/system/bin/sh":r.command="/bin/sh",r.args=["-c",n]),r}(c):function(o){if(!t)return o;const i=function(e){e.file=D(e);const t=e.file&&K(e.file);return t?(e.args.unshift(e.file),e.command=t,D(e)):e.file}(o),s=!r.test(i);if(o.options.forceShell||s){const t=n.test(i);o.command=S.normalize(o.command),o.command=M.command(o.command),o.args=o.args.map(e=>M.argument(e,t));const r=[o.command].concat(o.args).join(" ");o.args=["/d","/s","/c",`"${r}"`],o.command=e.env.comspec||"cmd.exe",o.options.windowsVerbatimArguments=!0}return o}(c)}}).call(this,f);var Z={};(function(e){"use strict";const t="win32"===e.platform;function r(e,t){return Object.assign(new Error(`${t} ${e.command} ENOENT`),{code:"ENOENT",errno:"ENOENT",syscall:`${t} ${e.command}`,path:e.command,spawnargs:e.args})}function n(e,n){return t&&1===e&&!n.file?r(n.original,"spawn"):null}Z={hookChildProcess:function(e,r){if(!t)return;const o=e.emit;e.emit=function(t,i){if("exit"===t){const t=n(i,r);if(t)return o.call(e,"error",t)}return o.apply(e,arguments)}},verifyENOENT:n,verifyENOENTSync:function(e,n){return t&&1===e&&!n.file?r(n.original,"spawnSync"):null},notFoundError:r}}).call(this,f);var Q={};function ee(e,t,r){const n=Y(e,t,r),o=P.spawn(n.command,n.args,n.options);return Z.hookChildProcess(o,n),o}(Q=ee).spawn=ee,Q.sync=function(e,t,r){const n=Y(e,t,r),o=P.spawnSync(n.command,n.args,n.options);return o.error=o.error||Z.verifyENOENTSync(o.status,n),o},Q._parse=Y,Q._enoent=Z;var te=function(e){var t="string"==typeof e?"\n":"\n".charCodeAt(),r="string"==typeof e?"\r":"\r".charCodeAt();return e[e.length-1]===t&&(e=e.slice(0,e.length-1)),e[e.length-1]===r&&(e=e.slice(0,e.length-1)),e},re={};(function(e){"use strict";(re=(t=>{let r;t=Object.assign({cwd:e.cwd(),path:e.env[G()]},t);let n=S.resolve(t.cwd);const o=[];for(;r!==n;)o.push(S.join(n,"node_modules/.bin")),r=n,n=S.resolve(n,"..");return o.push(S.dirname(e.execPath)),o.concat(t.path).join(S.delimiter)})).env=(t=>{t=Object.assign({env:e.env},t);const r=Object.assign({},t.env),n=G({env:r});return t.path=r[n],r[n]=re(t),r})}).call(this,f);var ne,oe=ne=function(e){return null!==e&&"object"==typeof e&&"function"==typeof e.pipe};oe.writable=function(e){return oe(e)&&!1!==e.writable&&"function"==typeof e._write&&"object"==typeof e._writableState},oe.readable=function(e){return oe(e)&&!1!==e.readable&&"function"==typeof e._read&&"object"==typeof e._readableState},oe.duplex=function(e){return oe.writable(e)&&oe.readable(e)},oe.transform=function(e){return oe.duplex(e)&&"function"==typeof e._transform&&"object"==typeof e._transformState};var ie=function e(t,r){if(t&&r)return e(t)(r);if("function"!=typeof t)throw new TypeError("need wrapper function");return Object.keys(t).forEach(function(e){n[e]=t[e]}),n;function n(){for(var e=new Array(arguments.length),r=0;r<e.length;r++)e[r]=arguments[r];var n=t.apply(this,e),o=e[e.length-1];return"function"==typeof n&&n!==o&&Object.keys(o).forEach(function(e){n[e]=o[e]}),n}},se={};function ae(e){var t=function(){return t.called?t.value:(t.called=!0,t.value=e.apply(this,arguments))};return t.called=!1,t}function ce(e){var t=function(){if(t.called)throw new Error(t.onceError);return t.called=!0,t.value=e.apply(this,arguments)},r=e.name||"Function wrapped with `once`";return t.onceError=r+" shouldn't be called more than once",t.called=!1,t}(se=ie(ae)).strict=ie(ce),ae.proto=ae(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return ae(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return ce(this)},configurable:!0})});var ue={};(function(e){var t=function(){},r=function(n,o,i){if("function"==typeof o)return r(n,null,o);o||(o={}),i=se(i||t);var s=n._writableState,a=n._readableState,c=o.readable||!1!==o.readable&&n.readable,u=o.writable||!1!==o.writable&&n.writable,l=!1,p=function(){n.writable||d()},d=function(){u=!1,c||i.call(n)},f=function(){c=!1,u||i.call(n)},h=function(e){i.call(n,e?new Error("exited with error code: "+e):null)},m=function(e){i.call(n,e)},g=function(){e.nextTick(b)},b=function(){if(!l)return(!c||a&&a.ended&&!a.destroyed)&&(!u||s&&s.ended&&!s.destroyed)?void 0:i.call(n,new Error("premature close"))},w=function(){n.req.on("finish",d)};return function(e){return e.setHeader&&"function"==typeof e.abort}(n)?(n.on("complete",d),n.on("abort",g),n.req?w():n.on("request",w)):u&&!s&&(n.on("end",p),n.on("close",p)),function(e){return e.stdio&&Array.isArray(e.stdio)&&3===e.stdio.length}(n)&&n.on("exit",h),n.on("end",f),n.on("finish",d),!1!==o.error&&n.on("error",m),n.on("close",g),function(){l=!0,n.removeListener("complete",d),n.removeListener("abort",g),n.removeListener("request",w),n.req&&n.req.removeListener("finish",d),n.removeListener("end",p),n.removeListener("close",p),n.removeListener("finish",d),n.removeListener("exit",h),n.removeListener("end",f),n.removeListener("error",m),n.removeListener("close",g)}};ue=r}).call(this,f);var le={},pe={};(function(e){var t=function(){},r=/^v?\.0/.test(e.version),n=function(e){return"function"==typeof e},o=function(e){e()},i=function(e,t){return e.pipe(t)};pe=function(){var e,s=Array.prototype.slice.call(arguments),a=n(s[s.length-1]||t)&&s.pop()||t;if(Array.isArray(s[0])&&(s=s[0]),s.length<2)throw new Error("pump requires two streams per minimum");var c=s.map(function(i,u){var l=u<s.length-1;return function(e,o,i,s){s=se(s);var a=!1;e.on("close",function(){a=!0}),ue(e,{readable:o,writable:i},function(e){if(e)return s(e);a=!0,s()});var c=!1;return function(o){if(!a&&!c)return c=!0,function(e){return!!r&&!!le&&(e instanceof(le.ReadStream||t)||e instanceof(le.WriteStream||t))&&n(e.close)}(e)?e.close(t):function(e){return e.setHeader&&n(e.abort)}(e)?e.abort():n(e.destroy)?e.destroy():void s(o||new Error("stream was destroyed"))}}(i,l,u>0,function(t){e||(e=t),t&&c.forEach(o),l||(c.forEach(o),a(e))})});return s.reduce(i)}}).call(this,f);var de={},fe=Object.create||function(e){var t=function(){};return t.prototype=e,new t},he=Object.keys||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.push(r);return r},me=Function.prototype.bind||function(e){var t=this;return function(){return t.apply(e,arguments)}};function ge(){this._events&&Object.prototype.hasOwnProperty.call(this,"_events")||(this._events=fe(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0}de=ge,ge.EventEmitter=ge,ge.prototype._events=void 0,ge.prototype._maxListeners=void 0;var be,we=10;try{var ve={};Object.defineProperty&&Object.defineProperty(ve,"x",{value:0}),be=0===ve.x}catch(Ir){be=!1}function ye(e){return void 0===e._maxListeners?ge.defaultMaxListeners:e._maxListeners}function _e(e,t,r,n){var o,i,s;if("function"!=typeof r)throw new TypeError('"listener" argument must be a function');if((i=e._events)?(i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),s=i[t]):(i=e._events=fe(null),e._eventsCount=0),s){if("function"==typeof s?s=i[t]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),!s.warned&&(o=ye(e))&&o>0&&s.length>o){s.warned=!0;var a=new Error("Possible EventEmitter memory leak detected. "+s.length+' "'+String(t)+'" listeners added. Use emitter.setMaxListeners() to increase limit.');a.name="MaxListenersExceededWarning",a.emitter=e,a.type=t,a.count=s.length,"object"==typeof console&&console.warn&&console.warn("%s: %s",a.name,a.message)}}else s=i[t]=r,++e._eventsCount;return e}function Te(){if(!this.fired)switch(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length){case 0:return this.listener.call(this.target);case 1:return this.listener.call(this.target,arguments[0]);case 2:return this.listener.call(this.target,arguments[0],arguments[1]);case 3:return this.listener.call(this.target,arguments[0],arguments[1],arguments[2]);default:for(var e=new Array(arguments.length),t=0;t<e.length;++t)e[t]=arguments[t];this.listener.apply(this.target,e)}}function Ee(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},o=me.call(Te,n);return o.listener=r,n.wrapFn=o,o}function ke(e,t,r){var n=e._events;if(!n)return[];var o=n[t];return o?"function"==typeof o?r?[o.listener||o]:[o]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(o):Se(o,o.length):[]}function xe(e){var t=this._events;if(t){var r=t[e];if("function"==typeof r)return 1;if(r)return r.length}return 0}function Se(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}be?Object.defineProperty(ge,"defaultMaxListeners",{enumerable:!0,get:function(){return we},set:function(e){if("number"!=typeof e||e<0||e!=e)throw new TypeError('"defaultMaxListeners" must be a positive number');we=e}}):ge.defaultMaxListeners=we,ge.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},ge.prototype.getMaxListeners=function(){return ye(this)},ge.prototype.emit=function(e){var t,r,n,o,i,s,a="error"===e;if(s=this._events)a=a&&null==s.error;else if(!a)return!1;if(a){if(arguments.length>1&&(t=arguments[1]),t instanceof Error)throw t;var c=new Error('Unhandled "error" event. ('+t+")");throw c.context=t,c}if(!(r=s[e]))return!1;var u="function"==typeof r;switch(n=arguments.length){case 1:!function(e,t,r){if(t)e.call(r);else for(var n=e.length,o=Se(e,n),i=0;i<n;++i)o[i].call(r)}(r,u,this);break;case 2:!function(e,t,r,n){if(t)e.call(r,n);else for(var o=e.length,i=Se(e,o),s=0;s<o;++s)i[s].call(r,n)}(r,u,this,arguments[1]);break;case 3:!function(e,t,r,n,o){if(t)e.call(r,n,o);else for(var i=e.length,s=Se(e,i),a=0;a<i;++a)s[a].call(r,n,o)}(r,u,this,arguments[1],arguments[2]);break;case 4:!function(e,t,r,n,o,i){if(t)e.call(r,n,o,i);else for(var s=e.length,a=Se(e,s),c=0;c<s;++c)a[c].call(r,n,o,i)}(r,u,this,arguments[1],arguments[2],arguments[3]);break;default:for(o=new Array(n-1),i=1;i<n;i++)o[i-1]=arguments[i];!function(e,t,r,n){if(t)e.apply(r,n);else for(var o=e.length,i=Se(e,o),s=0;s<o;++s)i[s].apply(r,n)}(r,u,this,o)}return!0},ge.prototype.addListener=function(e,t){return _e(this,e,t,!1)},ge.prototype.on=ge.prototype.addListener,ge.prototype.prependListener=function(e,t){return _e(this,e,t,!0)},ge.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,Ee(this,e,t)),this},ge.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,Ee(this,e,t)),this},ge.prototype.removeListener=function(e,t){var r,n,o,i,s;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(n=this._events))return this;if(!(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=fe(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(o=-1,i=r.length-1;i>=0;i--)if(r[i]===t||r[i].listener===t){s=r[i].listener,o=i;break}if(o<0)return this;0===o?r.shift():function(e,t){for(var r=o,n=r+1,i=e.length;n<i;r+=1,n+=1)e[r]=e[n];e.pop()}(r),1===r.length&&(n[e]=r[0]),n.removeListener&&this.emit("removeListener",e,s||t)}return this},ge.prototype.removeAllListeners=function(e){var t,r,n;if(!(r=this._events))return this;if(!r.removeListener)return 0===arguments.length?(this._events=fe(null),this._eventsCount=0):r[e]&&(0==--this._eventsCount?this._events=fe(null):delete r[e]),this;if(0===arguments.length){var o,i=he(r);for(n=0;n<i.length;++n)"removeListener"!==(o=i[n])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=fe(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},ge.prototype.listeners=function(e){return ke(this,e,!0)},ge.prototype.rawListeners=function(e){return ke(this,e,!1)},ge.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):xe.call(e,t)},ge.prototype.listenerCount=xe,ge.prototype.eventNames=function(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]};var Ce={};Ce="function"==typeof Object.create?function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}};var Pe={};(function(e){"use strict";Pe=void 0===e||!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?{nextTick:function(t,r,n,o){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var i,s,a=arguments.length;switch(a){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick(function(){t.call(null,r)});case 3:return e.nextTick(function(){t.call(null,r,n)});case 4:return e.nextTick(function(){t.call(null,r,n,o)});default:for(i=new Array(a-1),s=0;s<i.length;)i[s++]=arguments[s];return e.nextTick(function(){t.apply(null,i)})}}}:e}).call(this,f);var je={}.toString,Ae=Array.isArray||function(e){return"[object Array]"==je.call(e)},Oe=de.EventEmitter,Le={},Re=s({}),Ge=Re.Buffer;function De(e,t){for(var r in e)t[r]=e[r]}function Me(e,t,r){return Ge(e,t,r)}function qe(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}Ge.from&&Ge.alloc&&Ge.allocUnsafe&&Ge.allocUnsafeSlow?Le=Re:(De(Re,Le),Le.Buffer=Me),De(Ge,Me),Me.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return Ge(e,t,r)},Me.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=Ge(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},Me.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return Ge(e)},Me.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return Re.SlowBuffer(e)};var Be={};(function(e){function t(e){return Object.prototype.toString.call(e)}Be.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===t(e)},Be.isBoolean=function(e){return"boolean"==typeof e},Be.isNull=function(e){return null===e},Be.isNullOrUndefined=function(e){return null==e},Be.isNumber=function(e){return"number"==typeof e},Be.isString=function(e){return"string"==typeof e},Be.isSymbol=function(e){return"symbol"==typeof e},Be.isUndefined=function(e){return void 0===e},Be.isRegExp=function(e){return"[object RegExp]"===t(e)},Be.isObject=function(e){return"object"==typeof e&&null!==e},Be.isDate=function(e){return"[object Date]"===t(e)},Be.isError=function(e){return"[object Error]"===t(e)||e instanceof Error},Be.isFunction=function(e){return"function"==typeof e},Be.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},Be.isBuffer=e.isBuffer}).call(this,{isBuffer:function(e){return null!=e&&(qe(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&qe(e.slice(0,0))}(e)||!!e._isBuffer)}});var Ie={},Fe=Le.Buffer;function Ue(e,t){e.emit("error",t)}Ie=function(){function e(){!function(t,r){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r},e.prototype.concat=function(e){if(0===this.length)return Fe.alloc(0);if(1===this.length)return this.head.data;for(var t,r,n=Fe.allocUnsafe(e>>>0),o=this.head,i=0;o;)t=n,r=i,o.data.copy(t,r),i+=o.data.length,o=o.next;return n},e}(),le&&le.inspect&&le.inspect.custom&&(Ie.prototype[le.inspect.custom]=function(){var e=le.inspect({length:this.length});return this.constructor.name+" "+e});var Ne={destroy:function(e,t){var r=this,n=this._readableState&&this._readableState.destroyed,o=this._writableState&&this._writableState.destroyed;return n||o?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||Pe.nextTick(Ue,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,function(e){!t&&e?(Pe.nextTick(Ue,r,e),r._writableState&&(r._writableState.errorEmitted=!0)):t&&t(e)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}},He={};(function(e){function t(t){try{if(!e.localStorage)return!1}catch(n){return!1}var r=e.localStorage[t];return null!=r&&"true"===String(r).toLowerCase()}He=function(e,r){if(t("noDeprecation"))return e;var n=!1;return function(){if(!n){if(t("throwDeprecation"))throw new Error(r);t("traceDeprecation")?console.trace(r):console.warn(r),n=!0}return e.apply(this,arguments)}}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});var ze=Xe,$e=n({}),We=Object.create(Be);function Ve(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var o=this._readableState;o.reading=!1,(o.needReadable||o.length<o.highWaterMark)&&this._read(o.highWaterMark)}function Xe(e){if(!(this instanceof Xe))return new Xe(e);$e.call(this,e),this._transformState={afterTransform:Ve.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",Ke)}function Ke(){var e=this;"function"==typeof this._flush?this._flush(function(t,r){Je(e,t,r)}):Je(this,null,null)}function Je(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}We.inherits=Ce,We.inherits(Xe,$e),Xe.prototype.push=function(e,t){return this._transformState.needTransform=!1,$e.prototype.push.call(this,e,t)},Xe.prototype._transform=function(e,t,r){throw new Error("_transform() is not implemented")},Xe.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var o=this._readableState;(n.needTransform||o.needReadable||o.length<o.highWaterMark)&&this._read(o.highWaterMark)}},Xe.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},Xe.prototype._destroy=function(e,t){var r=this;$e.prototype._destroy.call(this,e,function(e){t(e),r.emit("close")})};var Ye=Qe,Ze=Object.create(Be);function Qe(e){if(!(this instanceof Qe))return new Qe(e);ze.call(this,e)}Ze.inherits=Ce,Ze.inherits(Qe,ze),Qe.prototype._transform=function(e,t,r){r(null,e)};var et={};(et=et=t({})).Stream=et,et.Readable=et,et.Writable=o({}),et.Duplex=n({}),et.Transform=ze,et.PassThrough=Ye;var tt=o({}),rt=n({}),nt=et.Transform,ot=et.PassThrough,it=at,st=de.EventEmitter;function at(){st.call(this)}Ce(at,st),at.Readable=et,at.Writable=tt,at.Duplex=rt,at.Transform=nt,at.PassThrough=ot,at.Stream=at,at.prototype.pipe=function(e,t){var r=this;function n(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function o(){r.readable&&r.resume&&r.resume()}r.on("data",n),e.on("drain",o),e._isStdio||t&&!1===t.end||(r.on("end",s),r.on("close",a));var i=!1;function s(){i||(i=!0,e.end())}function a(){i||(i=!0,"function"==typeof e.destroy&&e.destroy())}function c(e){if(u(),0===st.listenerCount(this,"error"))throw e}function u(){r.removeListener("data",n),e.removeListener("drain",o),r.removeListener("end",s),r.removeListener("close",a),r.removeListener("error",c),e.removeListener("error",c),r.removeListener("end",u),r.removeListener("close",u),e.removeListener("close",u)}return r.on("error",c),e.on("error",c),r.on("end",u),r.on("close",u),e.on("close",u),e.emit("pipe",r),e};var ct={};(function(e){"use strict";const{PassThrough:t}=it;ct=(r=>{r=Object.assign({},r);const{array:n}=r;let{encoding:o}=r;const i="buffer"===o;let s=!1;n?s=!(o||i):o=o||"utf8",i&&(o=null);let a=0;const c=[],u=new t({objectMode:s});return o&&u.setEncoding(o),u.on("data",e=>{c.push(e),s?a=c.length:a+=e.length}),u.getBufferedValue=(()=>n?c:i?e.concat(c,a):c.join("")),u.getBufferedLength=(()=>a),u})}).call(this,s({}).Buffer);var ut={};class lt extends Error{constructor(){super("maxBuffer exceeded"),this.name="MaxBufferError"}}function pt(e,t){if(!e)return Promise.reject(new Error("Expected a stream"));t=Object.assign({maxBuffer:1/0},t);const{maxBuffer:r}=t;let n;return new Promise((o,i)=>{const s=e=>{e&&(e.bufferedData=n.getBufferedValue()),i(e)};(n=pe(e,ct(t),e=>{e?s(e):o()})).on("data",()=>{n.getBufferedLength()>r&&s(new lt)})}).then(()=>n.getBufferedValue())}(ut=pt).buffer=((e,t)=>pt(e,Object.assign({},t,{encoding:"buffer"}))),ut.array=((e,t)=>pt(e,Object.assign({},t,{array:!0}))),ut.MaxBufferError=lt;var dt={};(function(e){dt=["SIGABRT","SIGALRM","SIGHUP","SIGINT","SIGTERM"],"win32"!==e.platform&&dt.push("SIGVTALRM","SIGXCPU","SIGXFSZ","SIGUSR2","SIGTRAP","SIGSYS","SIGQUIT","SIGIOT"),"linux"===e.platform&&dt.push("SIGIO","SIGPOLL","SIGPWR","SIGSTKFLT","SIGUNUSED")}).call(this,f);var ft={};(function(e){var t,r=/^win/i.test(e.platform);function n(){s&&(s=!1,dt.forEach(function(t){try{e.removeListener(t,i[t])}catch(r){}}),e.emit=l,e.reallyExit=c,t.count-=1)}function o(e,r,n){t.emitted[e]||(t.emitted[e]=!0,t.emit(e,r,n))}"function"!=typeof de&&(de=de.EventEmitter),e.__signal_exit_emitter__?t=e.__signal_exit_emitter__:((t=e.__signal_exit_emitter__=new de).count=0,t.emitted={}),t.infinite||(t.setMaxListeners(1/0),t.infinite=!0),(ft=function(e,r){!1===s&&a();var o="exit";return r&&r.alwaysLast&&(o="afterexit"),t.on(o,e),function(){t.removeListener(o,e),0===t.listeners("exit").length&&0===t.listeners("afterexit").length&&n()}}).unload=n;var i={};dt.forEach(function(s){i[s]=function(){e.listeners(s).length===t.count&&(n(),o("exit",null,s),o("afterexit",null,s),r&&"SIGHUP"===s&&(s="SIGINT"),e.kill(e.pid,s))}}),ft.signals=function(){return dt},ft.load=a;var s=!1;function a(){s||(s=!0,t.count+=1,dt=dt.filter(function(t){try{return e.on(t,i[t]),!0}catch(r){return!1}}),e.emit=p,e.reallyExit=u)}var c=e.reallyExit;function u(t){e.exitCode=t||0,o("exit",e.exitCode,null),o("afterexit",e.exitCode,null),c.call(e,e.exitCode)}var l=e.emit;function p(t,r){if("exit"===t){void 0!==r&&(e.exitCode=r);var n=l.apply(this,arguments);return o("exit",e.exitCode,null),o("afterexit",e.exitCode,null),n}return l.apply(this,arguments)}}).call(this,f);Object.create;var ht={};(function(e,t){function r(e,t){var r={seen:[],stylize:o};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),u(t)?r.showHidden=t:t&&ht._extend(r,t),f(r.showHidden)&&(r.showHidden=!1),f(r.depth)&&(r.depth=2),f(r.colors)&&(r.colors=!1),f(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=n),i(r,e,r.depth)}function n(e,t){var n=r.styles[t];return n?"\x1b["+r.colors[n][0]+"m"+e+"\x1b["+r.colors[n][1]+"m":e}function o(e,t){return e}function i(e,t,r){if(e.customInspect&&t&&w(t.inspect)&&t.inspect!==ht.inspect&&(!t.constructor||t.constructor.prototype!==t)){var n=t.inspect(r,e);return d(n)||(n=i(e,n,r)),n}var o=function(e,t){if(f(t))return e.stylize("undefined","undefined");if(d(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}return p(t)?e.stylize(""+t,"number"):u(t)?e.stylize(""+t,"boolean"):l(t)?e.stylize("null","null"):void 0}(e,t);if(o)return o;var m,v=Object.keys(t),_=(m={},v.forEach(function(e,t){m[e]=!0}),m);if(e.showHidden&&(v=Object.getOwnPropertyNames(t)),b(t)&&(v.indexOf("message")>=0||v.indexOf("description")>=0))return s(t);if(0===v.length){if(w(t)){var T=t.name?": "+t.name:"";return e.stylize("[Function"+T+"]","special")}if(h(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(g(t))return e.stylize(Date.prototype.toString.call(t),"date");if(b(t))return s(t)}var E,k="",x=!1,S=["{","}"];return c(t)&&(x=!0,S=["[","]"]),w(t)&&(k=" [Function"+(t.name?": "+t.name:"")+"]"),h(t)&&(k=" "+RegExp.prototype.toString.call(t)),g(t)&&(k=" "+Date.prototype.toUTCString.call(t)),b(t)&&(k=" "+s(t)),0!==v.length||x&&0!=t.length?r<0?h(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special"):(e.seen.push(t),E=x?function(e,t,r,n,o){for(var i=[],s=0,c=t.length;s<c;++s)y(t,String(s))?i.push(a(e,t,r,n,String(s),!0)):i.push("");return o.forEach(function(o){o.match(/^\d+$/)||i.push(a(e,t,r,n,o,!0))}),i}(e,t,r,_,v):v.map(function(n){return a(e,t,r,_,n,x)}),e.seen.pop(),function(e,t,r){return e.reduce(function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60?r[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+r[1]:r[0]+t+" "+e.join(", ")+" "+r[1]}(E,k,S)):S[0]+k+S[1]}function s(e){return"["+Error.prototype.toString.call(e)+"]"}function a(e,t,r,n,o,s){var a,c,u;if((u=Object.getOwnPropertyDescriptor(t,o)||{value:t[o]}).get?c=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(c=e.stylize("[Setter]","special")),y(n,o)||(a="["+o+"]"),c||(e.seen.indexOf(u.value)<0?(c=l(r)?i(e,u.value,null):i(e,u.value,r-1)).indexOf("\n")>-1&&(c=s?c.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+c.split("\n").map(function(e){return"   "+e}).join("\n")):c=e.stylize("[Circular]","special")),f(a)){if(s&&o.match(/^\d+$/))return c;(a=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=e.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=e.stylize(a,"string"))}return a+": "+c}function c(e){return Array.isArray(e)}function u(e){return"boolean"==typeof e}function l(e){return null===e}function p(e){return"number"==typeof e}function d(e){return"string"==typeof e}function f(e){return void 0===e}function h(e){return m(e)&&"[object RegExp]"===v(e)}function m(e){return"object"==typeof e&&null!==e}function g(e){return m(e)&&"[object Date]"===v(e)}function b(e){return m(e)&&("[object Error]"===v(e)||e instanceof Error)}function w(e){return"function"==typeof e}function v(e){return Object.prototype.toString.call(e)}ht.inspect=r,r.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},r.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};function y(e,t){return Object.prototype.hasOwnProperty.call(e,t)}ht._extend=function(e,t){if(!t||!m(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e}}).call(this,f,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});var mt={};(function(e){"use strict";let t;if("function"==typeof ht.getSystemErrorName)mt=ht.getSystemErrorName;else{try{if("function"!=typeof(t=e.binding("uv")).errname)throw new TypeError("uv.errname is not a function")}catch(Ir){console.error("execa/lib/errname: unable to establish process.binding('uv')",Ir),t=null}mt=(e=>r(t,e))}function r(e,t){if(e)return e.errname(t);if(!(t<0))throw new Error("err >= 0");return`Unknown system error ${t}`}mt.__test__=r}).call(this,f);const gt=["stdin","stdout","stderr"];var bt=e=>{if(!e)return null;if(e.stdio&&(e=>gt.some(t=>Boolean(e[t])))(e))throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${gt.map(e=>`\`${e}\``).join(", ")}`);if("string"==typeof e.stdio)return e.stdio;const t=e.stdio||[];if(!Array.isArray(t))throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof t}\``);const r=[],n=Math.max(t.length,gt.length);for(let o=0;o<n;o++){let n=null;void 0!==t[o]?n=t[o]:void 0!==e[gt[o]]&&(n=e[gt[o]]),r[o]=n}return r},wt={};(function(e){"use strict";const t=1e7;function r(r,n,o){let i;return(o=Object.assign({extendEnv:!0,env:{}},o)).extendEnv&&(o.env=Object.assign({},e.env,o.env)),!0===o.__winShell?(delete o.__winShell,i={command:r,args:n,options:o,file:r,original:{cmd:r,args:n}}):i=Q._parse(r,n,o),(o=Object.assign({maxBuffer:t,buffer:!0,stripEof:!0,preferLocal:!0,localDir:i.options.cwd||e.cwd(),encoding:"utf8",reject:!0,cleanup:!0},i.options)).stdio=bt(o),o.preferLocal&&(o.env=re.env(Object.assign({},o,{cwd:o.localDir}))),o.detached&&(o.cleanup=!1),"win32"===e.platform&&"cmd.exe"===S.basename(i.command)&&i.args.unshift("/q"),{cmd:i.command,args:i.args,opts:o,parsed:i}}function n(e,t){return t&&e.stripEof&&(t=te(t)),t}function o(t,r,n){let o="/bin/sh",i=["-c",r];return n=Object.assign({},n),"win32"===e.platform&&(n.__winShell=!0,o=e.env.comspec||"cmd.exe",i=["/s","/c",`"${r}"`],n.windowsVerbatimArguments=!0),n.shell&&(o=n.shell,delete n.shell),t(o,i,n)}function i(e,t,{encoding:r,buffer:n,maxBuffer:o}){if(!e[t])return null;let i;return(i=n?r?ut(e[t],{encoding:r,maxBuffer:o}):ut.buffer(e[t],{maxBuffer:o}):new Promise((r,n)=>{e[t].once("end",r).once("error",n)})).catch(e=>{throw e.stream=t,e.message=`${t} ${e.message}`,e})}function s(e,t){const{stdout:r,stderr:n}=e;let o=e.error;const{code:i,signal:s}=e,{parsed:a,joinedCmd:c}=t,u=t.timedOut||!1;if(!o){let e="";Array.isArray(a.opts.stdio)?("inherit"!==a.opts.stdio[2]&&(e+=e.length>0?n:`\n${n}`),"inherit"!==a.opts.stdio[1]&&(e+=`\n${r}`)):"inherit"!==a.opts.stdio&&(e=`\n${n}${r}`),(o=new Error(`Command failed: ${c}${e}`)).code=i<0?mt(i):i}return o.stdout=r,o.stderr=n,o.failed=!0,o.signal=s||null,o.cmd=c,o.timedOut=u,o}function a(e,t){let r=e;return Array.isArray(t)&&t.length>0&&(r+=" "+t.join(" ")),r}(wt=((e,t,o)=>{const c=r(e,t,o),{encoding:u,buffer:l,maxBuffer:p}=c.opts,d=a(e,t);let f,h;try{f=P.spawn(c.cmd,c.args,c.opts)}catch(Ir){return Promise.reject(Ir)}c.opts.cleanup&&(h=ft(()=>{f.kill()}));let m=null,g=!1;const b=()=>{m&&(clearTimeout(m),m=null),h&&h()};c.opts.timeout>0&&(m=setTimeout(()=>{m=null,g=!0,f.kill(c.opts.killSignal)},c.opts.timeout));const w=new Promise(e=>{f.on("exit",(t,r)=>{b(),e({code:t,signal:r})}),f.on("error",t=>{b(),e({error:t})}),f.stdin&&f.stdin.on("error",t=>{b(),e({error:t})})});function v(){f.stdout&&f.stdout.destroy(),f.stderr&&f.stderr.destroy()}const y=()=>((e,t)=>(t=t||(()=>{}),e.then(e=>new Promise(e=>{e(t())}).then(()=>e),e=>new Promise(e=>{e(t())}).then(()=>{throw e}))))(Promise.all([w,i(f,"stdout",{encoding:u,buffer:l,maxBuffer:p}),i(f,"stderr",{encoding:u,buffer:l,maxBuffer:p})]).then(e=>{const t=e[0];if(t.stdout=e[1],t.stderr=e[2],t.error||0!==t.code||null!==t.signal){const e=s(t,{joinedCmd:d,parsed:c,timedOut:g});if(e.killed=e.killed||f.killed,!c.opts.reject)return e;throw e}return{stdout:n(c.opts,t.stdout),stderr:n(c.opts,t.stderr),code:0,failed:!1,killed:!1,signal:null,cmd:d,timedOut:!1}}),v);return Q._enoent.hookChildProcess(f,c.parsed),function(e,t){null!=t&&(ne(t)?t.pipe(e.stdin):e.stdin.end(t))}(f,c.opts.input),f.then=((e,t)=>y().then(e,t)),f.catch=(e=>y().catch(e)),f})).stdout=((...e)=>wt(...e).then(e=>e.stdout)),wt.stderr=((...e)=>wt(...e).then(e=>e.stderr)),wt.shell=((e,t)=>o(wt,e,t)),wt.sync=((e,t,o)=>{const i=r(e,t,o),c=a(e,t);if(ne(i.opts.input))throw new TypeError("The `input` option cannot be a stream in sync mode");const u=P.spawnSync(i.cmd,i.args,i.opts);if(u.code=u.status,u.error||0!==u.status||null!==u.signal){const e=s(u,{joinedCmd:c,parsed:i});if(!i.opts.reject)return e;throw e}return{stdout:n(i.opts,u.stdout),stderr:n(i.opts,u.stderr),code:0,failed:!1,signal:null,cmd:c,timedOut:!1}}),wt.shellSync=((e,t)=>o(wt.sync,e,t))}).call(this,f);const vt=new Map([["10.0","10"],["6.3","8.1"],["6.2","8"],["6.1","7"],["6.0","Vista"],["5.2","Server 2003"],["5.1","XP"],["5.0","2000"],["4.9","ME"],["4.1","98"],["4.0","95"]]);var yt=(e,t)=>{if(!e&&t)throw new Error("You can't specify a `release` without specifying `platform`");let r;return"darwin"===(e=e||a.platform())?(t||"darwin"!==a.platform()||(t=a.release()),(t?Number(t.split(".")[0])>15?"macOS":"OS X":"macOS")+((r=t?c(t).name:"")?" "+r:"")):"linux"===e?(t||"linux"!==a.platform()||(t=a.release()),"Linux"+((r=t?t.replace(/^(\d+\.\d+).*/,"$1"):"")?" "+r:"")):"win32"===e?(t||"win32"!==a.platform()||(t=a.release()),"Windows"+((r=t?(e=>{const t=/\d+\.\d/.exec(e||a.release());if(e&&!t)throw new Error("`release` argument doesn't match `n.n`");const r=(t||[])[0];if((!e||e===a.release())&&["6.1","6.2","6.3","10.0"].includes(r)){let e;try{e=wt.sync("powershell",["(Get-CimInstance -ClassName Win32_OperatingSystem).caption"]).stdout||""}catch(n){e=wt.sync("wmic",["os","get","Caption"]).stdout||""}const t=(e.match(/2008|2012|2016|2019/)||[])[0];if(t)return`Server ${t}`}return vt.get(r)})(t):"")?" "+r:"")):e},_t={};(function(e){"use strict";Object.defineProperty(_t,"__esModule",{value:!0});var t,r=(t=yt)&&"object"==typeof t&&"default"in t?t.default:t;_t.getUserAgent=function(){try{return`Node.js/${e.version.substr(1)} (${r()}; ${e.arch})`}catch(t){return/wmic os get Caption/.test(t.message)?"Windows <version undetectable>":"<environment undetectable>"}}}).call(this,f);var Tt=function e(t,r,n,o){if("function"!=typeof n)throw new Error("method for before hook must be a function");return o||(o={}),Array.isArray(r)?r.reverse().reduce(function(r,n){return e.bind(null,t,n,r,o)},n)():Promise.resolve().then(function(){return t.registry[r]?t.registry[r].reduce(function(e,t){return t.hook.bind(null,e,o)},n)():n(o)})},Et=function(e,t,r,n){var o=n;e.registry[r]||(e.registry[r]=[]),"before"===t&&(n=function(e,t){return Promise.resolve().then(o.bind(null,t)).then(e.bind(null,t))}),"after"===t&&(n=function(e,t){var r;return Promise.resolve().then(e.bind(null,t)).then(function(e){return o(r=e,t)}).then(function(){return r})}),"error"===t&&(n=function(e,t){return Promise.resolve().then(e.bind(null,t)).catch(function(e){return o(e,t)})}),e.registry[r].push({hook:n,orig:o})},kt=function(e,t,r){if(e.registry[t]){var n=e.registry[t].map(function(e){return e.orig}).indexOf(r);-1!==n&&e.registry[t].splice(n,1)}},xt={},St=Function.bind,Ct=St.bind(St);function Pt(e,t,r){var n=Ct(kt,null).apply(null,r?[t,r]:[t]);e.api={remove:n},e.remove=n,["before","error","after","wrap"].forEach(function(n){var o=r?[t,n,r]:[t,n];e[n]=e.api[n]=Ct(Et,null).apply(null,o)})}function jt(){var e={registry:{}},t=Tt.bind(null,e);return Pt(t,e),t}var At=!1;function Ot(){return At||(console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'),At=!0),jt()}function Lt(e){return 1==(null!=(t=e)&&"object"==typeof t&&!1===Array.isArray(t))&&"[object Object]"===Object.prototype.toString.call(e);var t}Ot.Singular=function(){var e={registry:{}},t=Tt.bind(null,e,"h");return Pt(t,e,"h"),t}.bind(),Ot.Collection=jt.bind(),(xt=Ot).Hook=Ot,xt.Singular=Ot.Singular,xt.Collection=Ot.Collection;var Rt=function(e){var t,r;return!1!==Lt(e)&&"function"==typeof(t=e.constructor)&&!1!==Lt(r=t.prototype)&&!1!==r.hasOwnProperty("isPrototypeOf")},Gt={};Object.defineProperty(Gt,"__esModule",{value:!0});var Dt,Mt=(Dt=Rt)&&"object"==typeof Dt&&"default"in Dt?Dt.default:Dt;function qt(e,t,r){if("string"==typeof t){let[e,n]=t.split(" ");r=Object.assign(n?{method:e,url:n}:{url:e},r)}else r=Object.assign({},t);var n;r.headers=(n=r.headers)?Object.keys(n).reduce((e,t)=>(e[t.toLowerCase()]=n[t],e),{}):{};const o=function e(t,r){const n=Object.assign({},t);return Object.keys(r).forEach(o=>{Mt(r[o])&&o in t?n[o]=e(t[o],r[o]):Object.assign(n,{[o]:r[o]})}),n}(e||{},r);return e&&e.mediaType.previews.length&&(o.mediaType.previews=e.mediaType.previews.filter(e=>!o.mediaType.previews.includes(e)).concat(o.mediaType.previews)),o.mediaType.previews=o.mediaType.previews.map(e=>e.replace(/-preview/,"")),o}const Bt=/\{[^}]+\}/g;function It(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function Ft(e,t){return Object.keys(e).filter(e=>!t.includes(e)).reduce((t,r)=>(t[r]=e[r],t),{})}function Ut(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(e){return/%[0-9A-Fa-f]/.test(e)||(e=encodeURI(e).replace(/%5B/g,"[").replace(/%5D/g,"]")),e}).join("")}function Nt(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function Ht(e,t,r){return t="+"===e||"#"===e?Ut(t):Nt(t),r?Nt(r)+"="+t:t}function zt(e){return null!=e}function $t(e){return";"===e||"&"===e||"?"===e}function Wt(e,t){var r=["+","#",".","/",";","?","&"];return e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(e,n,o){if(n){let e="";const o=[];if(-1!==r.indexOf(n.charAt(0))&&(e=n.charAt(0),n=n.substr(1)),n.split(/,/g).forEach(function(r){var n=/([^:\*]*)(?::(\d+)|(\*))?/.exec(r);o.push(function(e,t,r,n){var o=e[r],i=[];if(zt(o)&&""!==o)if("string"==typeof o||"number"==typeof o||"boolean"==typeof o)o=o.toString(),n&&"*"!==n&&(o=o.substring(0,parseInt(n,10))),i.push(Ht(t,o,$t(t)?r:""));else if("*"===n)Array.isArray(o)?o.filter(zt).forEach(function(e){i.push(Ht(t,e,$t(t)?r:""))}):Object.keys(o).forEach(function(e){zt(o[e])&&i.push(Ht(t,o[e],e))});else{const e=[];Array.isArray(o)?o.filter(zt).forEach(function(r){e.push(Ht(t,r))}):Object.keys(o).forEach(function(r){zt(o[r])&&(e.push(Nt(r)),e.push(Ht(t,o[r].toString())))}),$t(t)?i.push(Nt(r)+"="+e.join(",")):0!==e.length&&i.push(e.join(","))}else";"===t?zt(o)&&i.push(Nt(r)):""!==o||"&"!==t&&"?"!==t?""===o&&i.push(""):i.push(Nt(r)+"=");return i}(t,e,n[1],n[2]||n[3]))}),e&&"+"!==e){var i=",";return"?"===e?i="&":"#"!==e&&(i=e),(0!==o.length?e:"")+o.join(i)}return o.join(",")}return Ut(o)})}function Vt(e){let t,r=e.method.toUpperCase(),n=(e.url||"/").replace(/:([a-z]\w+)/g,"{+$1}"),o=Object.assign({},e.headers),i=Ft(e,["method","baseUrl","url","headers","request","mediaType"]);const s=function(e){const t=e.match(Bt);return t?t.map(It).reduce((e,t)=>e.concat(t),[]):[]}(n);var a;n=(a=n,{expand:Wt.bind(null,a)}).expand(i),/^http/.test(n)||(n=e.baseUrl+n);const c=Ft(i,Object.keys(e).filter(e=>s.includes(e)).concat("baseUrl"));if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map(t=>t.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),e.mediaType.previews.length)){const t=o.accept.match(/[\w-]+(?=-preview)/g)||[];o.accept=t.concat(e.mediaType.previews).map(t=>`application/vnd.github.${t}-preview${e.mediaType.format?`.${e.mediaType.format}`:"+json"}`).join(",")}return["GET","HEAD"].includes(r)?n=function(e,t){const r=/\?/.test(e)?"&":"?",n=Object.keys(t);return 0===n.length?e:e+r+n.map(e=>"q"===e?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${e}=${encodeURIComponent(t[e])}`).join("&")}(n,c):"data"in c?t=c.data:Object.keys(c).length?t=c:o["content-length"]=0,o["content-type"]||void 0===t||(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(r)&&void 0===t&&(t=""),Object.assign({method:r,url:n,headers:o},void 0!==t?{body:t}:null,e.request?{request:e.request}:null)}const Xt=function e(t,r){const n=qt(t,r),o=function(e,t,r){return Vt(qt(e,t,r))}.bind(null,n);return Object.assign(o,{DEFAULTS:n,defaults:e.bind(null,n),merge:qt.bind(null,n),parse:Vt})}(null,{method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":`octokit-endpoint.js/6.0.1 ${_t.getUserAgent()}`},mediaType:{format:"",previews:[]}});Gt.endpoint=Xt;var Kt={},Jt=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==Jt)return Jt;throw new Error("unable to locate global object")}();(Kt=Kt=Jt.fetch).default=Jt.fetch.bind(Jt),Kt.Headers=Jt.Headers,Kt.Request=Jt.Request,Kt.Response=Jt.Response;var Yt={};Object.defineProperty(Yt,"__esModule",{value:!0}),Yt.Deprecation=class extends Error{constructor(e){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="Deprecation"}};var Zt,Qt={};Object.defineProperty(Qt,"__esModule",{value:!0});const er=((Zt=se)&&"object"==typeof Zt&&"default"in Zt?Zt.default:Zt)(e=>console.warn(e));Qt.RequestError=class extends Error{constructor(e,t,r){super(e),Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor),this.name="HttpError",this.status=t,Object.defineProperty(this,"code",{get:()=>(er(new Yt.Deprecation("[@octokit/request-error] `error.code` is deprecated, use `error.status`.")),t)}),this.headers=r.headers||{};const n=Object.assign({},r.request);r.request.headers.authorization&&(n.headers=Object.assign({},r.request.headers,{authorization:r.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),n.url=n.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=n}};var tr={};function rr(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(tr,"__esModule",{value:!0});var nr=rr(Rt),or=rr(Kt);function ir(e){(nr(e.body)||Array.isArray(e.body))&&(e.body=JSON.stringify(e.body));let t,r,n={};return(e.request&&e.request.fetch||or)(e.url,Object.assign({method:e.method,body:e.body,headers:e.headers,redirect:e.redirect},e.request)).then(o=>{r=o.url,t=o.status;for(const e of o.headers)n[e[0]]=e[1];if(204===t||205===t)return;if("HEAD"===e.method){if(t<400)return;throw new Qt.RequestError(o.statusText,t,{headers:n,request:e})}if(304===t)throw new Qt.RequestError("Not modified",t,{headers:n,request:e});if(t>=400)return o.text().then(r=>{const o=new Qt.RequestError(r,t,{headers:n,request:e});try{let e=JSON.parse(o.message);Object.assign(o,e);let t=e.errors;o.message=o.message+": "+t.map(JSON.stringify).join(", ")}catch(i){}throw o});const i=o.headers.get("content-type");return/application\/json/.test(i)?o.json():!i||/^text\/|charset=utf-8$/.test(i)?o.text():function(e){return e.arrayBuffer()}(o)}).then(e=>({status:t,url:r,headers:n,data:e})).catch(t=>{if(t instanceof Qt.RequestError)throw t;throw new Qt.RequestError(t.message,500,{headers:n,request:e})})}const sr=function e(t,r){const n=t.defaults(r);return Object.assign(function(t,r){const o=n.merge(t,r);if(!o.request||!o.request.hook)return ir(n.parse(o));const i=(e,t)=>ir(n.parse(n.merge(e,t)));return Object.assign(i,{endpoint:n,defaults:e.bind(null,n)}),o.request.hook(i,o)},{endpoint:n,defaults:e.bind(null,n)})}(Gt.endpoint,{headers:{"user-agent":`octokit-request.js/5.4.4 ${_t.getUserAgent()}`}});tr.request=sr;var ar={};Object.defineProperty(ar,"__esModule",{value:!0});class cr extends Error{constructor(e,t){super(t.data.errors[0].message),Object.assign(this,t.data),this.name="GraphqlError",this.request=e,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}}const ur=["method","baseUrl","url","headers","request","query","mediaType"];function lr(e,t){const r=e.defaults(t);return Object.assign((e,t)=>(function(e,t,r){r=r="string"==typeof t?Object.assign({query:t},r):t;const n=Object.keys(r).reduce((e,t)=>ur.includes(t)?(e[t]=r[t],e):(e.variables||(e.variables={}),e.variables[t]=r[t],e),{});return e(n).then(e=>{if(e.data.errors)throw new cr(n,{data:e.data});return e.data.data})})(r,e,t),{defaults:lr.bind(null,r),endpoint:tr.request.endpoint})}lr(tr.request,{headers:{"user-agent":`octokit-graphql.js/4.5.0 ${_t.getUserAgent()}`},method:"POST",url:"/graphql"});ar.withCustomRequest=function(e){return lr(e,{method:"POST",url:"/graphql"})};var pr={};async function dr(e,t,r,n){const o=t.endpoint.merge(r,n);return o.headers.authorization=function(e){return 3===e.split(/\./).length?`bearer ${e}`:`token ${e}`}(e),t(o)}Object.defineProperty(pr,"__esModule",{value:!0}),pr.createTokenAuth=function(e){if(!e)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if("string"!=typeof e)throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return e=e.replace(/^(token|bearer) +/i,""),Object.assign(async function(e){const t=3===e.split(/\./).length?"app":/^v\d+\./.test(e)?"installation":"oauth";return{type:"token",token:e,tokenType:t}}.bind(null,e),{hook:dr.bind(null,e)})};var fr={};function hr(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function mr(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function gr(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?mr(Object(r),!0).forEach(function(t){hr(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):mr(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}Object.defineProperty(fr,"__esModule",{value:!0});const br="2.5.3";let wr=(()=>{class e{constructor(e={}){const t=new xt.Collection,r={baseUrl:tr.request.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},e.request,{hook:t.bind(null,"request")}),mediaType:{previews:[],format:""}};if(r.headers["user-agent"]=[e.userAgent,`octokit-core.js/${br} ${_t.getUserAgent()}`].filter(Boolean).join(" "),e.baseUrl&&(r.baseUrl=e.baseUrl),e.previews&&(r.mediaType.previews=e.previews),e.timeZone&&(r.headers["time-zone"]=e.timeZone),this.request=tr.request.defaults(r),this.graphql=ar.withCustomRequest(this.request).defaults(gr(gr({},r),{},{baseUrl:r.baseUrl.replace(/\/api\/v3$/,"/api")})),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},e.log),this.hook=t,e.authStrategy){const r=e.authStrategy(Object.assign({request:this.request},e.auth));t.wrap("request",r.hook),this.auth=r}else if(e.auth){const r=pr.createTokenAuth(e.auth);t.wrap("request",r.hook),this.auth=r}else this.auth=(async()=>({type:"unauthenticated"}));this.constructor.plugins.forEach(t=>{Object.assign(this,t(this,e))})}static defaults(e){return class extends(this){constructor(...t){const r=t[0]||{};super(Object.assign({},e,r,r.userAgent&&e.userAgent?{userAgent:`${r.userAgent} ${e.userAgent}`}:null))}}}static plugin(e,...t){var r;e instanceof Array&&console.warn(["Passing an array of plugins to Octokit.plugin() has been deprecated.","Instead of:","  Octokit.plugin([plugin1, plugin2, ...])","Use:","  Octokit.plugin(plugin1, plugin2, ...)"].join("\n"));const n=this.plugins;let o=[...e instanceof Array?e:[e],...t];return(r=class extends(this){}).plugins=n.concat(o.filter(e=>!n.includes(e))),r}}return e.VERSION=br,e.plugins=[],e})();fr.Octokit=wr;var vr={};function yr(e){e.hook.wrap("request",(t,r)=>{e.log.debug("request",r);const n=Date.now(),o=e.request.endpoint.parse(r),i=o.url.replace(r.baseUrl,"");return t(r).then(t=>(e.log.info(`${o.method} ${i} - ${t.status} in ${Date.now()-n}ms`),t)).catch(t=>{throw e.log.info(`${o.method} ${i} - ${t.status} in ${Date.now()-n}ms`),t})})}Object.defineProperty(vr,"__esModule",{value:!0}),yr.VERSION="1.0.0",vr.requestLog=yr;var _r={};function Tr(e){if(!("total_count"in e.data)||"url"in e.data)return e;const t=e.data.incomplete_results,r=e.data.repository_selection,n=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const o=Object.keys(e.data)[0],i=e.data[o];return e.data=i,void 0!==t&&(e.data.incomplete_results=t),void 0!==r&&(e.data.repository_selection=r),e.data.total_count=n,e}function Er(e,t,r){const n="function"==typeof t?t.endpoint(r):e.request.endpoint(t,r),o="function"==typeof t?t:e.request,i=n.method,s=n.headers;let a=n.url;return{[Symbol.asyncIterator]:()=>({next:()=>a?o({method:i,url:a,headers:s}).then(Tr).then(e=>(a=((e.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:e})):Promise.resolve({done:!0})})}}function kr(e,t,r,n){return"function"==typeof r&&(n=r,r=void 0),function e(t,r,n,o){return n.next().then(i=>{if(i.done)return r;let s=!1;return r=r.concat(o?o(i.value,function(){s=!0}):i.value.data),s?r:e(t,r,n,o)})}(e,[],Er(e,t,r)[Symbol.asyncIterator](),n)}function xr(e){return{paginate:Object.assign(kr.bind(null,e),{iterator:Er.bind(null,e)})}}Object.defineProperty(_r,"__esModule",{value:!0}),xr.VERSION="2.2.1",_r.paginateRest=xr;var Sr={};Object.defineProperty(Sr,"__esModule",{value:!0});const Cr={actions:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}",{},{renamedParameters:{name:"secret_name"}}],createOrUpdateSecretForRepo:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}",{},{renamed:["actions","createOrUpdateRepoSecret"],renamedParameters:{name:"secret_name"}}],createRegistrationToken:["POST /repos/{owner}/{repo}/actions/runners/registration-token",{},{renamed:["actions","createRegistrationTokenForRepo"]}],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveToken:["POST /repos/{owner}/{repo}/actions/runners/remove-token",{},{renamed:["actions","createRemoveTokenForRepo"]}],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}",{},{renamedParameters:{name:"secret_name"}}],deleteSecretFromRepo:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}",{},{renamed:["actions","deleteRepoSecret"],renamedParameters:{name:"secret_name"}}],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadWorkflowJobLogs:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key",{},{renamed:["actions","getRepoPublicKey"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}",{},{renamedParameters:{name:"secret_name"}}],getSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}",{},{renamed:["actions","getRepoSecret"],renamedParameters:{name:"secret_name"}}],getSelfHostedRunner:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}",{},{renamed:["actions","getSelfHostedRunnerForRepo"]}],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowJob:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listDownloadsForSelfHostedRunnerApplication:["GET /repos/{owner}/{repo}/actions/runners/downloads",{},{renamed:["actions","listRunnerApplicationsForRepo"]}],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoWorkflowRuns:["GET /repos/{owner}/{repo}/actions/runs"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSecretsForRepo:["GET /repos/{owner}/{repo}/actions/secrets",{},{renamed:["actions","listRepoSecrets"]}],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowJobLogs:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs",{},{renamed:["actions","downloadWorkflowJobLogs"]}],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs",{},{renamed:["actions","downloadWorkflowRunLogs"]}],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelfHostedRunner:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}",{},{renamed:["actions","deleteSelfHostedRunnerFromRepo"]}],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],checkStarringRepo:["GET /user/starred/{owner}/{repo}",{},{renamed:["activity","checkRepoIsStarredByAuthenticatedUser"]}],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscription:["PUT /notifications",{},{renamed:["activity","getThreadSubscriptionForAuthenticatedUser"]}],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listEventsForOrg:["GET /users/{username}/events/orgs/{org}",{},{renamed:["activity","listOrgEventsForAuthenticatedUser"]}],listEventsForUser:["GET /users/{username}/events",{},{renamed:["activity","listEventsForAuthenticatedUser"]}],listFeeds:["GET /feeds",{},{renamed:["activity","getFeeds"]}],listNotifications:["GET /notifications",{},{renamed:["activity","listNotificationsForAuthenticatedUser"]}],listNotificationsForAuthenticatedUser:["GET /notifications"],listNotificationsForRepo:["GET /repos/{owner}/{repo}/notifications",{},{renamed:["activity","listRepoNotificationsForAuthenticatedUser"]}],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForOrg:["GET /orgs/{org}/events",{},{renamed:["activity","listPublicOrgEvents"]}],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markAsRead:["PUT /notifications",{},{renamed:["activity","markNotificationsAsRead"]}],markNotificationsAsRead:["PUT /notifications"],markNotificationsAsReadForRepo:["PUT /repos/{owner}/{repo}/notifications",{},{renamed:["activity","markRepoNotificationsAsRead"]}],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepo:["PUT /user/starred/{owner}/{repo}",{},{renamed:["activity","starRepoForAuthenticatedUser"]}],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepo:["DELETE /user/starred/{owner}/{repo}",{},{renamed:["activity","unstarRepoForAuthenticatedUser"]}],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{mediaType:{previews:["machine-man"]}}],checkAccountIsAssociatedWithAny:["GET /marketplace_listing/accounts/{account_id}",{},{renamed:["apps","getSubscriptionPlanForAccount"]}],checkAccountIsAssociatedWithAnyStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}",{},{renamed:["apps","getSubscriptionPlanForAccountStubbed"]}],checkToken:["POST /applications/{client_id}/token"],createContentAttachment:["POST /content_references/{content_reference_id}/attachments",{mediaType:{previews:["corsair"]}}],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationToken:["POST /app/installations/{installation_id}/access_tokens",{mediaType:{previews:["machine-man"]}}],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}",{mediaType:{previews:["machine-man"]}}],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app",{mediaType:{previews:["machine-man"]}}],getBySlug:["GET /apps/{app_slug}",{mediaType:{previews:["machine-man"]}}],getInstallation:["GET /app/installations/{installation_id}",{mediaType:{previews:["machine-man"]}}],getOrgInstallation:["GET /orgs/{org}/installation",{mediaType:{previews:["machine-man"]}}],getRepoInstallation:["GET /repos/{owner}/{repo}/installation",{mediaType:{previews:["machine-man"]}}],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation",{mediaType:{previews:["machine-man"]}}],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listAccountsUserOrOrgOnPlan:["GET /marketplace_listing/plans/{plan_id}/accounts",{},{renamed:["apps","listAccountsForPlan"]}],listAccountsUserOrOrgOnPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",{},{renamed:["apps","listAccountsForPlanStubbed"]}],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories",{mediaType:{previews:["machine-man"]}}],listInstallations:["GET /app/installations",{mediaType:{previews:["machine-man"]}}],listInstallationsForAuthenticatedUser:["GET /user/installations",{mediaType:{previews:["machine-man"]}}],listMarketplacePurchasesForAuthenticatedUser:["GET /user/marketplace_purchases",{},{renamed:["apps","listSubscriptionsForAuthenticatedUser"]}],listMarketplacePurchasesForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed",{},{renamed:["apps","listSubscriptionsForAuthenticatedUserStubbed"]}],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listRepos:["GET /installation/repositories",{mediaType:{previews:["machine-man"]}}],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{mediaType:{previews:["machine-man"]}}],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationToken:["DELETE /installation/token"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs",{mediaType:{previews:["antiope"]}}],createSuite:["POST /repos/{owner}/{repo}/check-suites",{mediaType:{previews:["antiope"]}}],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}",{mediaType:{previews:["antiope"]}}],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}",{mediaType:{previews:["antiope"]}}],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",{mediaType:{previews:["antiope"]}}],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs",{mediaType:{previews:["antiope"]}}],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",{mediaType:{previews:["antiope"]}}],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites",{mediaType:{previews:["antiope"]}}],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest",{mediaType:{previews:["antiope"]}}],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences",{mediaType:{previews:["antiope"]}}],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}",{mediaType:{previews:["antiope"]}}]},codeScanning:{getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_id}"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct",{mediaType:{previews:["scarlet-witch"]}}],getConductCode:["GET /codes_of_conduct/{key}",{mediaType:{previews:["scarlet-witch"]}}],getForRepo:["GET /repos/{owner}/{repo}/community/code_of_conduct",{mediaType:{previews:["scarlet-witch"]}}],listConductCodes:["GET /codes_of_conduct",{mediaType:{previews:["scarlet-witch"]}},{renamed:["codesOfConduct","getAllCodesOfConduct"]}]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listPublicForUser:["GET /users/{username}/gists",{},{renamed:["gists","listForUser"]}],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getTemplate:["GET /gitignore/templates/{name}"],listTemplates:["GET /gitignore/templates"]},interactions:{addOrUpdateRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits",{mediaType:{previews:["sombra"]}}],addOrUpdateRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits",{mediaType:{previews:["sombra"]}}],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits",{mediaType:{previews:["sombra"]}}],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits",{mediaType:{previews:["sombra"]}}],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits",{mediaType:{previews:["sombra"]}}],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits",{mediaType:{previews:["sombra"]}}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkAssignee:["GET /repos/{owner}/{repo}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",{mediaType:{previews:["mockingbird"]}}],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestonesForRepo:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],removeLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels",{},{renamed:["issues","removeAllLabels"]}],replaceAllLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],replaceLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels",{},{renamed:["issues","replaceAllLabels"]}],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getForRepo:["GET /repos/{owner}/{repo}/license"],listCommonlyUsed:["GET /licenses"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"]},migrations:{cancelImport:["DELETE /repos/{owner}/{repo}/import"],deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive",{mediaType:{previews:["wyandotte"]}}],getCommitAuthors:["GET /repos/{owner}/{repo}/import/authors"],getImportProgress:["GET /repos/{owner}/{repo}/import"],getLargeFiles:["GET /repos/{owner}/{repo}/import/large_files"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}",{mediaType:{previews:["wyandotte"]}}],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}",{mediaType:{previews:["wyandotte"]}}],listForAuthenticatedUser:["GET /user/migrations",{mediaType:{previews:["wyandotte"]}}],listForOrg:["GET /orgs/{org}/migrations",{mediaType:{previews:["wyandotte"]}}],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories",{mediaType:{previews:["wyandotte"]}}],listReposForUser:["GET /user/{migration_id}/repositories",{mediaType:{previews:["wyandotte"]}}],mapCommitAuthor:["PATCH /repos/{owner}/{repo}/import/authors/{author_id}"],setLfsPreference:["PATCH /repos/{owner}/{repo}/import/lfs"],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],startImport:["PUT /repos/{owner}/{repo}/import"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock",{mediaType:{previews:["wyandotte"]}}],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock",{mediaType:{previews:["wyandotte"]}}],updateImport:["PATCH /repos/{owner}/{repo}/import"]},orgs:{addOrUpdateMembership:["PUT /orgs/{org}/memberships/{username}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembership:["GET /orgs/{org}/members/{username}"],checkPublicMembership:["GET /orgs/{org}/public_members/{username}"],concealMembership:["DELETE /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createHook:["POST /orgs/{org}/hooks"],createInvitation:["POST /orgs/{org}/invitations"],deleteHook:["DELETE /orgs/{org}/hooks/{hook_id}"],get:["GET /orgs/{org}"],getHook:["GET /orgs/{org}/hooks/{hook_id}"],getMembership:["GET /orgs/{org}/memberships/{username}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],list:["GET /organizations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listHooks:["GET /orgs/{org}/hooks"],listInstallations:["GET /orgs/{org}/installations",{mediaType:{previews:["machine-man"]}}],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMemberships:["GET /user/memberships/orgs"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],pingHook:["POST /orgs/{org}/hooks/{hook_id}/pings"],publicizeMembership:["PUT /orgs/{org}/public_members/{username}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembership:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateHook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateMembership:["PATCH /user/memberships/orgs/{org}"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}",{mediaType:{previews:["inertia"]}}],createCard:["POST /projects/columns/{column_id}/cards",{mediaType:{previews:["inertia"]}}],createColumn:["POST /projects/{project_id}/columns",{mediaType:{previews:["inertia"]}}],createForAuthenticatedUser:["POST /user/projects",{mediaType:{previews:["inertia"]}}],createForOrg:["POST /orgs/{org}/projects",{mediaType:{previews:["inertia"]}}],createForRepo:["POST /repos/{owner}/{repo}/projects",{mediaType:{previews:["inertia"]}}],delete:["DELETE /projects/{project_id}",{mediaType:{previews:["inertia"]}}],deleteCard:["DELETE /projects/columns/cards/{card_id}",{mediaType:{previews:["inertia"]}}],deleteColumn:["DELETE /projects/columns/{column_id}",{mediaType:{previews:["inertia"]}}],get:["GET /projects/{project_id}",{mediaType:{previews:["inertia"]}}],getCard:["GET /projects/columns/cards/{card_id}",{mediaType:{previews:["inertia"]}}],getColumn:["GET /projects/columns/{column_id}",{mediaType:{previews:["inertia"]}}],listCards:["GET /projects/columns/{column_id}/cards",{mediaType:{previews:["inertia"]}}],listCollaborators:["GET /projects/{project_id}/collaborators",{mediaType:{previews:["inertia"]}}],listColumns:["GET /projects/{project_id}/columns",{mediaType:{previews:["inertia"]}}],listForOrg:["GET /orgs/{org}/projects",{mediaType:{previews:["inertia"]}}],listForRepo:["GET /repos/{owner}/{repo}/projects",{mediaType:{previews:["inertia"]}}],listForUser:["GET /users/{username}/projects",{mediaType:{previews:["inertia"]}}],moveCard:["POST /projects/columns/cards/{card_id}/moves",{mediaType:{previews:["inertia"]}}],moveColumn:["POST /projects/columns/{column_id}/moves",{mediaType:{previews:["inertia"]}}],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}",{mediaType:{previews:["inertia"]}}],reviewUserPermissionLevel:["GET /projects/{project_id}/collaborators/{username}/permission",{mediaType:{previews:["inertia"]}}],update:["PATCH /projects/{project_id}",{mediaType:{previews:["inertia"]}}],updateCard:["PATCH /projects/columns/cards/{card_id}",{mediaType:{previews:["inertia"]}}],updateColumn:["PATCH /projects/columns/{column_id}",{mediaType:{previews:["inertia"]}}]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewCommentReply:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReviewRequest:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],deleteComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewRequest:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],getCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listReviewRequests:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch",{mediaType:{previews:["lydian"]}}],updateComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],delete:["DELETE /reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}},{renamed:["reactions","deleteLegacy"]}],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}}],deleteLegacy:["DELETE /reactions/{reaction_id}",{mediaType:{previews:["squirrel-girl"]}},{deprecated:"octokit.reactions.deleteLegacy() is deprecated, see https://developer.github.com/v3/reactions/#delete-a-reaction-legacy"}],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",{mediaType:{previews:["squirrel-girl"]}}]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}"],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addDeployKey:["POST /repos/{owner}/{repo}/keys"],addProtectedBranchAdminEnforcement:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],addProtectedBranchAppRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addProtectedBranchRequiredSignatures:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",{mediaType:{previews:["zzzax"]}}],addProtectedBranchRequiredStatusChecksContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addProtectedBranchTeamRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addProtectedBranchUserRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts",{mediaType:{previews:["dorian"]}}],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createHook:["POST /repos/{owner}/{repo}/hooks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateFile:["PUT /repos/{owner}/{repo}/contents/{path}"],createRelease:["POST /repos/{owner}/{repo}/releases"],createStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate",{mediaType:{previews:["baptiste"]}}],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDownload:["DELETE /repos/{owner}/{repo}/downloads/{download_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteHook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes",{mediaType:{previews:["london"]}}],disablePagesSite:["DELETE /repos/{owner}/{repo}/pages",{mediaType:{previews:["switcheroo"]}}],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts",{mediaType:{previews:["dorian"]}}],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes",{mediaType:{previews:["london"]}}],enablePagesSite:["POST /repos/{owner}/{repo}/pages",{mediaType:{previews:["switcheroo"]}}],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts",{mediaType:{previews:["dorian"]}}],get:["GET /repos/{owner}/{repo}"],getAllTopics:["GET /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}}],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getArchiveLink:["GET /repos/{owner}/{repo}/{archive_format}/{ref}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getContents:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getDownload:["GET /repos/{owner}/{repo}/downloads/{download_id}"],getHook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getProtectedBranchAdminEnforcement:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getProtectedBranchPullRequestReviewEnforcement:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getProtectedBranchRequiredSignatures:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",{mediaType:{previews:["zzzax"]}}],getProtectedBranchRequiredStatusChecks:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getProtectedBranchRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],list:["GET /user/repos",{},{renamed:["repos","listForAuthenticatedUser"]}],listAssetsForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",{mediaType:{previews:["groot"]}}],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitComments:["GET /repos/{owner}/{repo}/comments"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listDownloads:["GET /repos/{owner}/{repo}/downloads"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listHooks:["GET /repos/{owner}/{repo}/hooks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listProtectedBranchRequiredStatusChecksContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",{mediaType:{previews:["groot"]}}],listReleases:["GET /repos/{owner}/{repo}/releases"],listStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listTopics:["GET /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}},{renamed:["repos","getAllTopics"]}],merge:["POST /repos/{owner}/{repo}/merges"],pingHook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],removeBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],removeProtectedBranchAdminEnforcement:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],removeProtectedBranchAppRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeProtectedBranchPullRequestReviewEnforcement:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],removeProtectedBranchRequiredSignatures:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",{mediaType:{previews:["zzzax"]}}],removeProtectedBranchRequiredStatusChecks:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeProtectedBranchRequiredStatusChecksContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeProtectedBranchRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],removeProtectedBranchTeamRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeProtectedBranchUserRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}}],replaceProtectedBranchAppRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],replaceProtectedBranchRequiredStatusChecksContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],replaceProtectedBranchTeamRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],replaceProtectedBranchUserRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],replaceTopics:["PUT /repos/{owner}/{repo}/topics",{mediaType:{previews:["mercy"]}},{renamed:["repos","replaceAllTopics"]}],requestPageBuild:["POST /repos/{owner}/{repo}/pages/builds"],retrieveCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],testPushHook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateHook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateProtectedBranchPullRequestReviewEnforcement:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateProtectedBranchRequiredStatusChecks:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits",{mediaType:{previews:["cloak"]}}],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},teams:{addOrUpdateMembershipInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}",{mediaType:{previews:["inertia"]}}],addOrUpdateRepoInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkManagesRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects",{mediaType:{previews:["inertia"]}}],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],reviewProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}",{mediaType:{previews:["inertia"]}}],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmails:["POST /user/emails"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowing:["GET /user/following/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],createGpgKey:["POST /user/gpg_keys"],createPublicKey:["POST /user/keys"],deleteEmails:["DELETE /user/emails"],deleteGpgKey:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicKey:["DELETE /user/keys/{key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKey:["GET /user/gpg_keys/{gpg_key_id}"],getPublicKey:["GET /user/keys/{key_id}"],list:["GET /users"],listBlocked:["GET /user/blocks"],listEmails:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForAuthenticatedUser:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticated"]}],listFollowingForUser:["GET /users/{username}/following"],listGpgKeys:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmails:["GET /user/public_emails"],listPublicKeys:["GET /user/keys"],listPublicKeysForUser:["GET /users/{username}/keys"],togglePrimaryEmailVisibility:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};function Pr(e,t,r,n,o){const i=e.request.defaults(n);return Object.assign(function(...n){let s=i.endpoint.merge(...n);if(o.mapToData)return s=Object.assign({},s,{data:s[o.mapToData],[o.mapToData]:void 0}),i(s);if(o.renamed){const[n,i]=o.renamed;e.log.warn(`octokit.${t}.${r}() has been renamed to octokit.${n}.${i}()`)}if(o.deprecated&&e.log.warn(o.deprecated),o.renamedParameters){const s=i.endpoint.merge(...n);for(const[n,i]of Object.entries(o.renamedParameters))n in s&&(e.log.warn(`"${n}" parameter is deprecated for "octokit.${t}.${r}()". Use "${i}" instead`),i in s||(s[i]=s[n]),delete s[n]);return i(s)}return i(...n)},i)}function jr(e){return function(e,t){const r={};for(const[n,o]of Object.entries(t))for(const[t,i]of Object.entries(o)){const[o,s,a]=i,[c,u]=o.split(/ /),l=Object.assign({method:c,url:u},s);r[n]||(r[n]={}),r[n][t]=a?Pr(e,n,t,l,a):e.request.defaults(l)}return r}(e,Cr)}jr.VERSION="3.12.2",Sr.restEndpointMethods=jr;var Ar={};Object.defineProperty(Ar,"__esModule",{value:!0});const Or=fr.Octokit.plugin(vr.requestLog,Sr.restEndpointMethods,_r.paginateRest).defaults({userAgent:"octokit-rest.js/17.9.2"});Ar.Octokit=Or;var Lr={exports:{}};!function(e,t){"use strict";"object"==typeof Lr.exports?Lr.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";var r=[],n=Object.getPrototypeOf,o=r.slice,i=r.flat?function(e){return r.flat.call(e)}:function(e){return r.concat.apply([],e)},s=r.push,a=r.indexOf,c={},u=c.toString,l=c.hasOwnProperty,p=l.toString,d=p.call(Object),f={},h=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},m=function(e){return null!=e&&e===e.window},g=e.document,b={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,r){var n,o,i=(r=r||g).createElement("script");if(i.text=e,t)for(n in b)(o=t[n]||t.getAttribute&&t.getAttribute(n))&&i.setAttribute(n,o);r.head.appendChild(i).parentNode.removeChild(i)}function v(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?c[u.call(e)]||"object":typeof e}var y=function(e,t){return new y.fn.init(e,t)};function _(e){var t=!!e&&"length"in e&&e.length,r=v(e);return!h(e)&&!m(e)&&("array"===r||0===t||"number"==typeof t&&t>0&&t-1 in e)}y.fn=y.prototype={jquery:"3.5.1",constructor:y,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=y.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return y.each(this,e)},map:function(e){return this.pushStack(y.map(this,function(t,r){return e.call(t,r,t)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(y.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(y.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,r=+e+(e<0?t:0);return this.pushStack(r>=0&&r<t?[this[r]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:r.sort,splice:r.splice},y.extend=y.fn.extend=function(){var e,t,r,n,o,i,s=arguments[0]||{},a=1,c=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||h(s)||(s={}),a===c&&(s=this,a--);a<c;a++)if(null!=(e=arguments[a]))for(t in e)n=e[t],"__proto__"!==t&&s!==n&&(u&&n&&(y.isPlainObject(n)||(o=Array.isArray(n)))?(r=s[t],i=o&&!Array.isArray(r)?[]:o||y.isPlainObject(r)?r:{},o=!1,s[t]=y.extend(u,i,n)):void 0!==n&&(s[t]=n));return s},y.extend({expando:"jQuery"+("3.5.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,r;return!(!e||"[object Object]"!==u.call(e)||(t=n(e))&&("function"!=typeof(r=l.call(t,"constructor")&&t.constructor)||p.call(r)!==d))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,r){w(e,{nonce:t&&t.nonce},r)},each:function(e,t){var r,n=0;if(_(e))for(r=e.length;n<r&&!1!==t.call(e[n],n,e[n]);n++);else for(n in e)if(!1===t.call(e[n],n,e[n]))break;return e},makeArray:function(e,t){var r=t||[];return null!=e&&(_(Object(e))?y.merge(r,"string"==typeof e?[e]:e):s.call(r,e)),r},inArray:function(e,t,r){return null==t?-1:a.call(t,e,r)},merge:function(e,t){for(var r=+t.length,n=0,o=e.length;n<r;n++)e[o++]=t[n];return e.length=o,e},grep:function(e,t,r){for(var n=[],o=0,i=e.length,s=!r;o<i;o++)!t(e[o],o)!==s&&n.push(e[o]);return n},map:function(e,t,r){var n,o,s=0,a=[];if(_(e))for(n=e.length;s<n;s++)null!=(o=t(e[s],s,r))&&a.push(o);else for(s in e)null!=(o=t(e[s],s,r))&&a.push(o);return i(a)},guid:1,support:f}),"function"==typeof Symbol&&(y.fn[Symbol.iterator]=r[Symbol.iterator]),y.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){c["[object "+t+"]"]=t.toLowerCase()});var T=function(e){var t,r,n,o,i,s,a,c,u,l,p,d,f,h,m,g,b,w,v,y="sizzle"+1*new Date,_=e.document,T=0,E=0,k=ce(),x=ce(),S=ce(),C=ce(),P=function(e,t){return e===t&&(p=!0),0},j={}.hasOwnProperty,A=[],O=A.pop,L=A.push,R=A.push,G=A.slice,D=function(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1},M="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",q="[\\x20\\t\\r\\n\\f]",B="(?:\\\\[\\da-fA-F]{1,6}"+q+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",I="\\["+q+"*("+B+")(?:"+q+"*([*^$|!~]?=)"+q+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+B+"))|)"+q+"*\\]",F=":("+B+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+I+")*)|.*)\\)|)",U=new RegExp(q+"+","g"),N=new RegExp("^"+q+"+|((?:^|[^\\\\])(?:\\\\.)*)"+q+"+$","g"),H=new RegExp("^"+q+"*,"+q+"*"),z=new RegExp("^"+q+"*([>+~]|"+q+")"+q+"*"),$=new RegExp(q+"|>"),W=new RegExp(F),V=new RegExp("^"+B+"$"),X={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B+"|[*])"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+q+"*(even|odd|(([+-]|)(\\d*)n|)"+q+"*(?:([+-]|)"+q+"*(\\d+)|))"+q+"*\\)|)","i"),bool:new RegExp("^(?:"+M+")$","i"),needsContext:new RegExp("^"+q+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+q+"*((?:-\\d)?\\d*)"+q+"*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,J=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+q+"?|\\\\([^\\r\\n\\f])","g"),re=function(e,t){var r="0x"+e.slice(1)-65536;return t||(r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320))},ne=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"\ufffd":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){d()},se=ye(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{R.apply(A=G.call(_.childNodes),_.childNodes),A[_.childNodes.length].nodeType}catch(xe){R={apply:A.length?function(e,t){L.apply(e,G.call(t))}:function(e,t){for(var r=e.length,n=0;e[r++]=t[n++];);e.length=r-1}}}function ae(e,t,n,o){var i,a,u,l,p,h,b,w=t&&t.ownerDocument,_=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==_&&9!==_&&11!==_)return n;if(!o&&(d(t),t=t||f,m)){if(11!==_&&(p=Q.exec(e)))if(i=p[1]){if(9===_){if(!(u=t.getElementById(i)))return n;if(u.id===i)return n.push(u),n}else if(w&&(u=w.getElementById(i))&&v(t,u)&&u.id===i)return n.push(u),n}else{if(p[2])return R.apply(n,t.getElementsByTagName(e)),n;if((i=p[3])&&r.getElementsByClassName&&t.getElementsByClassName)return R.apply(n,t.getElementsByClassName(i)),n}if(r.qsa&&!C[e+" "]&&(!g||!g.test(e))&&(1!==_||"object"!==t.nodeName.toLowerCase())){if(b=e,w=t,1===_&&($.test(e)||z.test(e))){for((w=ee.test(e)&&be(t.parentNode)||t)===t&&r.scope||((l=t.getAttribute("id"))?l=l.replace(ne,oe):t.setAttribute("id",l=y)),a=(h=s(e)).length;a--;)h[a]=(l?"#"+l:":scope")+" "+ve(h[a]);b=h.join(",")}try{return R.apply(n,w.querySelectorAll(b)),n}catch(T){C(e,!0)}finally{l===y&&t.removeAttribute("id")}}}return c(e.replace(N,"$1"),t,n,o)}function ce(){var e=[];return function t(r,o){return e.push(r+" ")>n.cacheLength&&delete t[e.shift()],t[r+" "]=o}}function ue(e){return e[y]=!0,e}function le(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(xe){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function pe(e,t){for(var r=e.split("|"),o=r.length;o--;)n.attrHandle[r[o]]=t}function de(e,t){var r=t&&e,n=r&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(r)for(;r=r.nextSibling;)if(r===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var r=t.nodeName.toLowerCase();return("input"===r||"button"===r)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return ue(function(t){return t=+t,ue(function(r,n){for(var o,i=e([],r.length,t),s=i.length;s--;)r[o=i[s]]&&(r[o]=!(n[o]=r[o]))})})}function be(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in r=ae.support={},i=ae.isXML=function(e){var t=e.namespaceURI,r=(e.ownerDocument||e).documentElement;return!K.test(t||r&&r.nodeName||"HTML")},d=ae.setDocument=function(e){var t,o,s=e?e.ownerDocument||e:_;return s!=f&&9===s.nodeType&&s.documentElement?(h=(f=s).documentElement,m=!i(f),_!=f&&(o=f.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",ie,!1):o.attachEvent&&o.attachEvent("onunload",ie)),r.scope=le(function(e){return h.appendChild(e).appendChild(f.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),r.attributes=le(function(e){return e.className="i",!e.getAttribute("className")}),r.getElementsByTagName=le(function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length}),r.getElementsByClassName=Z.test(f.getElementsByClassName),r.getById=le(function(e){return h.appendChild(e).id=y,!f.getElementsByName||!f.getElementsByName(y).length}),r.getById?(n.filter.ID=function(e){var t=e.replace(te,re);return function(e){return e.getAttribute("id")===t}},n.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var r=t.getElementById(e);return r?[r]:[]}}):(n.filter.ID=function(e){var t=e.replace(te,re);return function(e){var r=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return r&&r.value===t}},n.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var r,n,o,i=t.getElementById(e);if(i){if((r=i.getAttributeNode("id"))&&r.value===e)return[i];for(o=t.getElementsByName(e),n=0;i=o[n++];)if((r=i.getAttributeNode("id"))&&r.value===e)return[i]}return[]}}),n.find.TAG=r.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):r.qsa?t.querySelectorAll(e):void 0}:function(e,t){var r,n=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;r=i[o++];)1===r.nodeType&&n.push(r);return n}return i},n.find.CLASS=r.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},b=[],g=[],r.qsa=Z.test(f.querySelectorAll),r.matchesSelector=Z.test(w=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector),g=g.length&&new RegExp(g.join("|")),b=b.length&&new RegExp(b.join("|")),t=Z.test(h.compareDocumentPosition),v=t||Z.test(h.contains)?function(e,t){var r=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(r.contains?r.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},P=t?function(e,t){if(e===t)return p=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!r.sortDetached&&t.compareDocumentPosition(e)===n?e==f||e.ownerDocument==_&&v(_,e)?-1:t==f||t.ownerDocument==_&&v(_,t)?1:l?D(l,e)-D(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return p=!0,0;var r,n=0,o=e.parentNode,i=t.parentNode,s=[e],a=[t];if(!o||!i)return e==f?-1:t==f?1:o?-1:i?1:l?D(l,e)-D(l,t):0;if(o===i)return de(e,t);for(r=e;r=r.parentNode;)s.unshift(r);for(r=t;r=r.parentNode;)a.unshift(r);for(;s[n]===a[n];)n++;return n?de(s[n],a[n]):s[n]==_?-1:a[n]==_?1:0},f):f},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if(d(e),r.matchesSelector&&m&&!C[t+" "]&&(!b||!b.test(t))&&(!g||!g.test(t)))try{var n=w.call(e,t);if(n||r.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(xe){C(t,!0)}return ae(t,f,null,[e]).length>0},ae.contains=function(e,t){return(e.ownerDocument||e)!=f&&d(e),v(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!=f&&d(e);var o=n.attrHandle[t.toLowerCase()],i=o&&j.call(n.attrHandle,t.toLowerCase())?o(e,t,!m):void 0;return void 0!==i?i:r.attributes||!m?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},ae.escape=function(e){return(e+"").replace(ne,oe)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,n=[],o=0,i=0;if(p=!r.detectDuplicates,l=!r.sortStable&&e.slice(0),e.sort(P),p){for(;t=e[i++];)t===e[i]&&(o=n.push(i));for(;o--;)e.splice(n[o],1)}return l=null,e},o=ae.getText=function(e){var t,r="",n=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)r+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[n++];)r+=o(t);return r},(n=ae.selectors={cacheLength:50,createPseudo:ue,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,re),e[3]=(e[3]||e[4]||e[5]||"").replace(te,re),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,r=!e[6]&&e[2];return X.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":r&&W.test(r)&&(t=s(r,!0))&&(t=r.indexOf(")",r.length-t)-r.length)&&(e[0]=e[0].slice(0,t),e[2]=r.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,re).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=k[e+" "];return t||(t=new RegExp("(^|"+q+")"+e+"("+q+"|$)"))&&k(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,r){return function(n){var o=ae.attr(n,e);return null==o?"!="===t:!t||(o+="","="===t?o===r:"!="===t?o!==r:"^="===t?r&&0===o.indexOf(r):"*="===t?r&&o.indexOf(r)>-1:"$="===t?r&&o.slice(-r.length)===r:"~="===t?(" "+o.replace(U," ")+" ").indexOf(r)>-1:"|="===t&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,r,n,o){var i="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===n&&0===o?function(e){return!!e.parentNode}:function(t,r,c){var u,l,p,d,f,h,m=i!==s?"nextSibling":"previousSibling",g=t.parentNode,b=a&&t.nodeName.toLowerCase(),w=!c&&!a,v=!1;if(g){if(i){for(;m;){for(d=t;d=d[m];)if(a?d.nodeName.toLowerCase()===b:1===d.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?g.firstChild:g.lastChild],s&&w){for(v=(f=(u=(l=(p=(d=g)[y]||(d[y]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]||[])[0]===T&&u[1])&&u[2],d=f&&g.childNodes[f];d=++f&&d&&d[m]||(v=f=0)||h.pop();)if(1===d.nodeType&&++v&&d===t){l[e]=[T,f,v];break}}else if(w&&(v=f=(u=(l=(p=(d=t)[y]||(d[y]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]||[])[0]===T&&u[1]),!1===v)for(;(d=++f&&d&&d[m]||(v=f=0)||h.pop())&&((a?d.nodeName.toLowerCase()!==b:1!==d.nodeType)||!++v||(w&&((l=(p=d[y]||(d[y]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]=[T,v]),d!==t)););return(v-=o)===n||v%n==0&&v/n>=0}}},PSEUDO:function(e,t){var r,o=n.pseudos[e]||n.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return o[y]?o(t):o.length>1?(r=[e,e,"",t],n.setFilters.hasOwnProperty(e.toLowerCase())?ue(function(e,r){for(var n,i=o(e,t),s=i.length;s--;)e[n=D(e,i[s])]=!(r[n]=i[s])}):function(e){return o(e,0,r)}):o}},pseudos:{not:ue(function(e){var t=[],r=[],n=a(e.replace(N,"$1"));return n[y]?ue(function(e,t,r,o){for(var i,s=n(e,null,o,[]),a=e.length;a--;)(i=s[a])&&(e[a]=!(t[a]=i))}):function(e,o,i){return t[0]=e,n(t,null,i,r),t[0]=null,!r.pop()}}),has:ue(function(e){return function(t){return ae(e,t).length>0}}),contains:ue(function(e){return e=e.replace(te,re),function(t){return(t.textContent||o(t)).indexOf(e)>-1}}),lang:ue(function(e){return V.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(te,re).toLowerCase(),function(t){var r;do{if(r=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(r=r.toLowerCase())===e||0===r.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var r=e.location&&e.location.hash;return r&&r.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!n.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return J.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge(function(){return[0]}),last:ge(function(e,t){return[t-1]}),eq:ge(function(e,t,r){return[r<0?r+t:r]}),even:ge(function(e,t){for(var r=0;r<t;r+=2)e.push(r);return e}),odd:ge(function(e,t){for(var r=1;r<t;r+=2)e.push(r);return e}),lt:ge(function(e,t,r){for(var n=r<0?r+t:r>t?t:r;--n>=0;)e.push(n);return e}),gt:ge(function(e,t,r){for(var n=r<0?r+t:r;++n<t;)e.push(n);return e})}}).pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})n.pseudos[t]=he(t);function we(){}function ve(e){for(var t=0,r=e.length,n="";t<r;t++)n+=e[t].value;return n}function ye(e,t,r){var n=t.dir,o=t.next,i=o||n,s=r&&"parentNode"===i,a=E++;return t.first?function(t,r,o){for(;t=t[n];)if(1===t.nodeType||s)return e(t,r,o);return!1}:function(t,r,c){var u,l,p,d=[T,a];if(c){for(;t=t[n];)if((1===t.nodeType||s)&&e(t,r,c))return!0}else for(;t=t[n];)if(1===t.nodeType||s)if(l=(p=t[y]||(t[y]={}))[t.uniqueID]||(p[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[n]||t;else{if((u=l[i])&&u[0]===T&&u[1]===a)return d[2]=u[2];if(l[i]=d,d[2]=e(t,r,c))return!0}return!1}}function _e(e){return e.length>1?function(t,r,n){for(var o=e.length;o--;)if(!e[o](t,r,n))return!1;return!0}:e[0]}function Te(e,t,r,n,o){for(var i,s=[],a=0,c=e.length,u=null!=t;a<c;a++)(i=e[a])&&(r&&!r(i,n,o)||(s.push(i),u&&t.push(a)));return s}function Ee(e,t,r,n,o,i){return n&&!n[y]&&(n=Ee(n)),o&&!o[y]&&(o=Ee(o,i)),ue(function(i,s,a,c){var u,l,p,d=[],f=[],h=s.length,m=i||function(e,t,r){for(var n=0,o=t.length;n<o;n++)ae(e,t[n],r);return r}(t||"*",a.nodeType?[a]:a,[]),g=!e||!i&&t?m:Te(m,d,e,a,c),b=r?o||(i?e:h||n)?[]:s:g;if(r&&r(g,b,a,c),n)for(u=Te(b,f),n(u,[],a,c),l=u.length;l--;)(p=u[l])&&(b[f[l]]=!(g[f[l]]=p));if(i){if(o||e){if(o){for(u=[],l=b.length;l--;)(p=b[l])&&u.push(g[l]=p);o(null,b=[],u,c)}for(l=b.length;l--;)(p=b[l])&&(u=o?D(i,p):d[l])>-1&&(i[u]=!(s[u]=p))}}else b=Te(b===s?b.splice(h,b.length):b),o?o(null,s,b,c):R.apply(s,b)})}function ke(e){for(var t,r,o,i=e.length,s=n.relative[e[0].type],a=s||n.relative[" "],c=s?1:0,l=ye(function(e){return e===t},a,!0),p=ye(function(e){return D(t,e)>-1},a,!0),d=[function(e,r,n){var o=!s&&(n||r!==u)||((t=r).nodeType?l(e,r,n):p(e,r,n));return t=null,o}];c<i;c++)if(r=n.relative[e[c].type])d=[ye(_e(d),r)];else{if((r=n.filter[e[c].type].apply(null,e[c].matches))[y]){for(o=++c;o<i&&!n.relative[e[o].type];o++);return Ee(c>1&&_e(d),c>1&&ve(e.slice(0,c-1).concat({value:" "===e[c-2].type?"*":""})).replace(N,"$1"),r,c<o&&ke(e.slice(c,o)),o<i&&ke(e=e.slice(o)),o<i&&ve(e))}d.push(r)}return _e(d)}return we.prototype=n.filters=n.pseudos,n.setFilters=new we,s=ae.tokenize=function(e,t){var r,o,i,s,a,c,u,l=x[e+" "];if(l)return t?0:l.slice(0);for(a=e,c=[],u=n.preFilter;a;){for(s in r&&!(o=H.exec(a))||(o&&(a=a.slice(o[0].length)||a),c.push(i=[])),r=!1,(o=z.exec(a))&&(r=o.shift(),i.push({value:r,type:o[0].replace(N," ")}),a=a.slice(r.length)),n.filter)!(o=X[s].exec(a))||u[s]&&!(o=u[s](o))||(r=o.shift(),i.push({value:r,type:s,matches:o}),a=a.slice(r.length));if(!r)break}return t?a.length:a?ae.error(e):x(e,c).slice(0)},a=ae.compile=function(e,t){var r,o=[],i=[],a=S[e+" "];if(!a){for(t||(t=s(e)),r=t.length;r--;)(a=ke(t[r]))[y]?o.push(a):i.push(a);(a=S(e,function(e,t){var r=t.length>0,o=e.length>0,i=function(i,s,a,c,l){var p,h,g,b=0,w="0",v=i&&[],y=[],_=u,E=i||o&&n.find.TAG("*",l),k=T+=null==_?1:Math.random()||.1,x=E.length;for(l&&(u=s==f||s||l);w!==x&&null!=(p=E[w]);w++){if(o&&p){for(h=0,s||p.ownerDocument==f||(d(p),a=!m);g=e[h++];)if(g(p,s||f,a)){c.push(p);break}l&&(T=k)}r&&((p=!g&&p)&&b--,i&&v.push(p))}if(b+=w,r&&w!==b){for(h=0;g=t[h++];)g(v,y,s,a);if(i){if(b>0)for(;w--;)v[w]||y[w]||(y[w]=O.call(c));y=Te(y)}R.apply(c,y),l&&!i&&y.length>0&&b+t.length>1&&ae.uniqueSort(c)}return l&&(T=k,u=_),v};return r?ue(i):i}(i,o))).selector=e}return a},c=ae.select=function(e,t,r,o){var i,c,u,l,p,d="function"==typeof e&&e,f=!o&&s(e=d.selector||e);if(r=r||[],1===f.length){if((c=f[0]=f[0].slice(0)).length>2&&"ID"===(u=c[0]).type&&9===t.nodeType&&m&&n.relative[c[1].type]){if(!(t=(n.find.ID(u.matches[0].replace(te,re),t)||[])[0]))return r;d&&(t=t.parentNode),e=e.slice(c.shift().value.length)}for(i=X.needsContext.test(e)?0:c.length;i--&&(u=c[i],!n.relative[l=u.type]);)if((p=n.find[l])&&(o=p(u.matches[0].replace(te,re),ee.test(c[0].type)&&be(t.parentNode)||t))){if(c.splice(i,1),!(e=o.length&&ve(c)))return R.apply(r,o),r;break}}return(d||a(e,f))(o,t,!m,r,!t||ee.test(e)&&be(t.parentNode)||t),r},r.sortStable=y.split("").sort(P).join("")===y,r.detectDuplicates=!!p,d(),r.sortDetached=le(function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))}),le(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||pe("type|href|height|width",function(e,t,r){if(!r)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),r.attributes&&le(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||pe("value",function(e,t,r){if(!r&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),le(function(e){return null==e.getAttribute("disabled")})||pe(M,function(e,t,r){var n;if(!r)return!0===e[t]?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),ae}(e);y.find=T,y.expr=T.selectors,y.expr[":"]=y.expr.pseudos,y.uniqueSort=y.unique=T.uniqueSort,y.text=T.getText,y.isXMLDoc=T.isXML,y.contains=T.contains,y.escapeSelector=T.escape;var E=function(e,t,r){for(var n=[],o=void 0!==r;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&y(e).is(r))break;n.push(e)}return n},k=function(e,t){for(var r=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&r.push(e);return r},x=y.expr.match.needsContext;function S(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var C=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function P(e,t,r){return h(t)?y.grep(e,function(e,n){return!!t.call(e,n,e)!==r}):t.nodeType?y.grep(e,function(e){return e===t!==r}):"string"!=typeof t?y.grep(e,function(e){return a.call(t,e)>-1!==r}):y.filter(t,e,r)}y.filter=function(e,t,r){var n=t[0];return r&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?y.find.matchesSelector(n,e)?[n]:[]:y.find.matches(e,y.grep(t,function(e){return 1===e.nodeType}))},y.fn.extend({find:function(e){var t,r,n=this.length,o=this;if("string"!=typeof e)return this.pushStack(y(e).filter(function(){for(t=0;t<n;t++)if(y.contains(o[t],this))return!0}));for(r=this.pushStack([]),t=0;t<n;t++)y.find(e,o[t],r);return n>1?y.uniqueSort(r):r},filter:function(e){return this.pushStack(P(this,e||[],!1))},not:function(e){return this.pushStack(P(this,e||[],!0))},is:function(e){return!!P(this,"string"==typeof e&&x.test(e)?y(e):e||[],!1).length}});var j,A=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(y.fn.init=function(e,t,r){var n,o;if(!e)return this;if(r=r||j,"string"==typeof e){if(!(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:A.exec(e))||!n[1]&&t)return!t||t.jquery?(t||r).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof y?t[0]:t,y.merge(this,y.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:g,!0)),C.test(n[1])&&y.isPlainObject(t))for(n in t)h(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(o=g.getElementById(n[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):h(e)?void 0!==r.ready?r.ready(e):e(y):y.makeArray(e,this)}).prototype=y.fn,j=y(g);var O=/^(?:parents|prev(?:Until|All))/,L={children:!0,contents:!0,next:!0,prev:!0};function R(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}y.fn.extend({has:function(e){var t=y(e,this),r=t.length;return this.filter(function(){for(var e=0;e<r;e++)if(y.contains(this,t[e]))return!0})},closest:function(e,t){var r,n=0,o=this.length,i=[],s="string"!=typeof e&&y(e);if(!x.test(e))for(;n<o;n++)for(r=this[n];r&&r!==t;r=r.parentNode)if(r.nodeType<11&&(s?s.index(r)>-1:1===r.nodeType&&y.find.matchesSelector(r,e))){i.push(r);break}return this.pushStack(i.length>1?y.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?a.call(y(e),this[0]):a.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(y.uniqueSort(y.merge(this.get(),y(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),y.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return E(e,"parentNode")},parentsUntil:function(e,t,r){return E(e,"parentNode",r)},next:function(e){return R(e,"nextSibling")},prev:function(e){return R(e,"previousSibling")},nextAll:function(e){return E(e,"nextSibling")},prevAll:function(e){return E(e,"previousSibling")},nextUntil:function(e,t,r){return E(e,"nextSibling",r)},prevUntil:function(e,t,r){return E(e,"previousSibling",r)},siblings:function(e){return k((e.parentNode||{}).firstChild,e)},children:function(e){return k(e.firstChild)},contents:function(e){return null!=e.contentDocument&&n(e.contentDocument)?e.contentDocument:(S(e,"template")&&(e=e.content||e),y.merge([],e.childNodes))}},function(e,t){y.fn[e]=function(r,n){var o=y.map(this,t,r);return"Until"!==e.slice(-5)&&(n=r),n&&"string"==typeof n&&(o=y.filter(n,o)),this.length>1&&(L[e]||y.uniqueSort(o),O.test(e)&&o.reverse()),this.pushStack(o)}});var G=/[^\x20\t\r\n\f]+/g;function D(e){return e}function M(e){throw e}function q(e,t,r,n){var o;try{e&&h(o=e.promise)?o.call(e).done(t).fail(r):e&&h(o=e.then)?o.call(e,t,r):t.apply(void 0,[e].slice(n))}catch(e){r.apply(void 0,[e])}}y.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return y.each(e.match(G)||[],function(e,r){t[r]=!0}),t}(e):y.extend({},e);var t,r,n,o,i=[],s=[],a=-1,c=function(){for(o=o||e.once,n=t=!0;s.length;a=-1)for(r=s.shift();++a<i.length;)!1===i[a].apply(r[0],r[1])&&e.stopOnFalse&&(a=i.length,r=!1);e.memory||(r=!1),t=!1,o&&(i=r?[]:"")},u={add:function(){return i&&(r&&!t&&(a=i.length-1,s.push(r)),function t(r){y.each(r,function(r,n){h(n)?e.unique&&u.has(n)||i.push(n):n&&n.length&&"string"!==v(n)&&t(n)})}(arguments),r&&!t&&c()),this},remove:function(){return y.each(arguments,function(e,t){for(var r;(r=y.inArray(t,i,r))>-1;)i.splice(r,1),r<=a&&a--}),this},has:function(e){return e?y.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=s=[],i=r="",this},disabled:function(){return!i},lock:function(){return o=s=[],r||t||(i=r=""),this},locked:function(){return!!o},fireWith:function(e,r){return o||(r=[e,(r=r||[]).slice?r.slice():r],s.push(r),t||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!n}};return u},y.extend({Deferred:function(t){var r=[["notify","progress",y.Callbacks("memory"),y.Callbacks("memory"),2],["resolve","done",y.Callbacks("once memory"),y.Callbacks("once memory"),0,"resolved"],["reject","fail",y.Callbacks("once memory"),y.Callbacks("once memory"),1,"rejected"]],n="pending",o={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return y.Deferred(function(t){y.each(r,function(r,n){var o=h(e[n[4]])&&e[n[4]];i[n[1]](function(){var e=o&&o.apply(this,arguments);e&&h(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[n[0]+"With"](this,o?[e]:arguments)})}),e=null}).promise()},then:function(t,n,o){var i=0;function s(t,r,n,o){return function(){var a=this,c=arguments,u=function(){var e,u;if(!(t<i)){if((e=n.apply(a,c))===r.promise())throw new TypeError("Thenable self-resolution");u=e&&("object"==typeof e||"function"==typeof e)&&e.then,h(u)?o?u.call(e,s(i,r,D,o),s(i,r,M,o)):(i++,u.call(e,s(i,r,D,o),s(i,r,M,o),s(i,r,D,r.notifyWith))):(n!==D&&(a=void 0,c=[e]),(o||r.resolveWith)(a,c))}},l=o?u:function(){try{u()}catch(e){y.Deferred.exceptionHook&&y.Deferred.exceptionHook(e,l.stackTrace),t+1>=i&&(n!==M&&(a=void 0,c=[e]),r.rejectWith(a,c))}};t?l():(y.Deferred.getStackHook&&(l.stackTrace=y.Deferred.getStackHook()),e.setTimeout(l))}}return y.Deferred(function(e){r[0][3].add(s(0,e,h(o)?o:D,e.notifyWith)),r[1][3].add(s(0,e,h(t)?t:D)),r[2][3].add(s(0,e,h(n)?n:M))}).promise()},promise:function(e){return null!=e?y.extend(e,o):o}},i={};return y.each(r,function(e,t){var s=t[2],a=t[5];o[t[1]]=s.add,a&&s.add(function(){n=a},r[3-e][2].disable,r[3-e][3].disable,r[0][2].lock,r[0][3].lock),s.add(t[3].fire),i[t[0]]=function(){return i[t[0]+"With"](this===i?void 0:this,arguments),this},i[t[0]+"With"]=s.fireWith}),o.promise(i),t&&t.call(i,i),i},when:function(e){var t=arguments.length,r=t,n=Array(r),i=o.call(arguments),s=y.Deferred(),a=function(e){return function(r){n[e]=this,i[e]=arguments.length>1?o.call(arguments):r,--t||s.resolveWith(n,i)}};if(t<=1&&(q(e,s.done(a(r)).resolve,s.reject,!t),"pending"===s.state()||h(i[r]&&i[r].then)))return s.then();for(;r--;)q(i[r],a(r),s.reject);return s.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;y.Deferred.exceptionHook=function(t,r){e.console&&e.console.warn&&t&&B.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,r)},y.readyException=function(t){e.setTimeout(function(){throw t})};var I=y.Deferred();function F(){g.removeEventListener("DOMContentLoaded",F),e.removeEventListener("load",F),y.ready()}y.fn.ready=function(e){return I.then(e).catch(function(e){y.readyException(e)}),this},y.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--y.readyWait:y.isReady)||(y.isReady=!0,!0!==e&&--y.readyWait>0||I.resolveWith(g,[y]))}}),y.ready.then=I.then,"complete"===g.readyState||"loading"!==g.readyState&&!g.documentElement.doScroll?e.setTimeout(y.ready):(g.addEventListener("DOMContentLoaded",F),e.addEventListener("load",F));var U=function(e,t,r,n,o,i,s){var a=0,c=e.length,u=null==r;if("object"===v(r))for(a in o=!0,r)U(e,t,a,r[a],!0,i,s);else if(void 0!==n&&(o=!0,h(n)||(s=!0),u&&(s?(t.call(e,n),t=null):(u=t,t=function(e,t,r){return u.call(y(e),r)})),t))for(;a<c;a++)t(e[a],r,s?n:n.call(e[a],a,t(e[a],r)));return o?e:u?t.call(e):c?t(e[0],r):i},N=/^-ms-/,H=/-([a-z])/g;function z(e,t){return t.toUpperCase()}function $(e){return e.replace(N,"ms-").replace(H,z)}var W=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function V(){this.expando=y.expando+V.uid++}V.uid=1,V.prototype={cache:function(e){var t=e[this.expando];return t||(t={},W(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,r){var n,o=this.cache(e);if("string"==typeof t)o[$(t)]=r;else for(n in t)o[$(n)]=t[n];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][$(t)]},access:function(e,t,r){return void 0===t||t&&"string"==typeof t&&void 0===r?this.get(e,t):(this.set(e,t,r),void 0!==r?r:t)},remove:function(e,t){var r,n=e[this.expando];if(void 0!==n){if(void 0!==t){r=(t=Array.isArray(t)?t.map($):(t=$(t))in n?[t]:t.match(G)||[]).length;for(;r--;)delete n[t[r]]}(void 0===t||y.isEmptyObject(n))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!y.isEmptyObject(t)}};var X=new V,K=new V,J=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Y=/[A-Z]/g;function Z(e,t,r){var n;if(void 0===r&&1===e.nodeType)if(n="data-"+t.replace(Y,"-$&").toLowerCase(),"string"==typeof(r=e.getAttribute(n))){try{r=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:J.test(e)?JSON.parse(e):e)}(r)}catch(o){}K.set(e,t,r)}else r=void 0;return r}y.extend({hasData:function(e){return K.hasData(e)||X.hasData(e)},data:function(e,t,r){return K.access(e,t,r)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,r){return X.access(e,t,r)},_removeData:function(e,t){X.remove(e,t)}}),y.fn.extend({data:function(e,t){var r,n,o,i=this[0],s=i&&i.attributes;if(void 0===e){if(this.length&&(o=K.get(i),1===i.nodeType&&!X.get(i,"hasDataAttrs"))){for(r=s.length;r--;)s[r]&&0===(n=s[r].name).indexOf("data-")&&(n=$(n.slice(5)),Z(i,n,o[n]));X.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each(function(){K.set(this,e)}):U(this,function(t){var r;if(i&&void 0===t)return void 0!==(r=K.get(i,e))?r:void 0!==(r=Z(i,e))?r:void 0;this.each(function(){K.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),y.extend({queue:function(e,t,r){var n;if(e)return t=(t||"fx")+"queue",n=X.get(e,t),r&&(!n||Array.isArray(r)?n=X.access(e,t,y.makeArray(r)):n.push(r)),n||[]},dequeue:function(e,t){t=t||"fx";var r=y.queue(e,t),n=r.length,o=r.shift(),i=y._queueHooks(e,t);"inprogress"===o&&(o=r.shift(),n--),o&&("fx"===t&&r.unshift("inprogress"),delete i.stop,o.call(e,function(){y.dequeue(e,t)},i)),!n&&i&&i.empty.fire()},_queueHooks:function(e,t){var r=t+"queueHooks";return X.get(e,r)||X.access(e,r,{empty:y.Callbacks("once memory").add(function(){X.remove(e,[t+"queue",r])})})}}),y.fn.extend({queue:function(e,t){var r=2;return"string"!=typeof e&&(t=e,e="fx",r--),arguments.length<r?y.queue(this[0],e):void 0===t?this:this.each(function(){var r=y.queue(this,e,t);y._queueHooks(this,e),"fx"===e&&"inprogress"!==r[0]&&y.dequeue(this,e)})},dequeue:function(e){return this.each(function(){y.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var r,n=1,o=y.Deferred(),i=this,s=this.length,a=function(){--n||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(r=X.get(i[s],e+"queueHooks"))&&r.empty&&(n++,r.empty.add(a));return a(),o.promise(t)}});var Q=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ee=new RegExp("^(?:([+-])=|)("+Q+")([a-z%]*)$","i"),te=["Top","Right","Bottom","Left"],re=g.documentElement,ne=function(e){return y.contains(e.ownerDocument,e)},oe={composed:!0};re.getRootNode&&(ne=function(e){return y.contains(e.ownerDocument,e)||e.getRootNode(oe)===e.ownerDocument});var ie=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ne(e)&&"none"===y.css(e,"display")};function se(e,t,r,n){var o,i,s=20,a=n?function(){return n.cur()}:function(){return y.css(e,t,"")},c=a(),u=r&&r[3]||(y.cssNumber[t]?"":"px"),l=e.nodeType&&(y.cssNumber[t]||"px"!==u&&+c)&&ee.exec(y.css(e,t));if(l&&l[3]!==u){for(c/=2,u=u||l[3],l=+c||1;s--;)y.style(e,t,l+u),(1-i)*(1-(i=a()/c||.5))<=0&&(s=0),l/=i;l*=2,y.style(e,t,l+u),r=r||[]}return r&&(l=+l||+c||0,o=r[1]?l+(r[1]+1)*r[2]:+r[2],n&&(n.unit=u,n.start=l,n.end=o)),o}var ae={};function ce(e){var t,r=e.ownerDocument,n=e.nodeName,o=ae[n];return o||(t=r.body.appendChild(r.createElement(n)),o=y.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),ae[n]=o,o)}function ue(e,t){for(var r,n,o=[],i=0,s=e.length;i<s;i++)(n=e[i]).style&&(r=n.style.display,t?("none"===r&&(o[i]=X.get(n,"display")||null,o[i]||(n.style.display="")),""===n.style.display&&ie(n)&&(o[i]=ce(n))):"none"!==r&&(o[i]="none",X.set(n,"display",r)));for(i=0;i<s;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}y.fn.extend({show:function(){return ue(this,!0)},hide:function(){return ue(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ie(this)?y(this).show():y(this).hide()})}});var le,pe,de=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,he=/^$|^module$|\/(?:java|ecma)script/i;le=g.createDocumentFragment().appendChild(g.createElement("div")),(pe=g.createElement("input")).setAttribute("type","radio"),pe.setAttribute("checked","checked"),pe.setAttribute("name","t"),le.appendChild(pe),f.checkClone=le.cloneNode(!0).cloneNode(!0).lastChild.checked,le.innerHTML="<textarea>x</textarea>",f.noCloneChecked=!!le.cloneNode(!0).lastChild.defaultValue,le.innerHTML="<option></option>",f.option=!!le.lastChild;var me={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var r;return r=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&S(e,t)?y.merge([e],r):r}function be(e,t){for(var r=0,n=e.length;r<n;r++)X.set(e[r],"globalEval",!t||X.get(t[r],"globalEval"))}me.tbody=me.tfoot=me.colgroup=me.caption=me.thead,me.th=me.td,f.option||(me.optgroup=me.option=[1,"<select multiple='multiple'>","</select>"]);var we=/<|&#?\w+;/;function ve(e,t,r,n,o){for(var i,s,a,c,u,l,p=t.createDocumentFragment(),d=[],f=0,h=e.length;f<h;f++)if((i=e[f])||0===i)if("object"===v(i))y.merge(d,i.nodeType?[i]:i);else if(we.test(i)){for(s=s||p.appendChild(t.createElement("div")),a=(fe.exec(i)||["",""])[1].toLowerCase(),c=me[a]||me._default,s.innerHTML=c[1]+y.htmlPrefilter(i)+c[2],l=c[0];l--;)s=s.lastChild;y.merge(d,s.childNodes),(s=p.firstChild).textContent=""}else d.push(t.createTextNode(i));for(p.textContent="",f=0;i=d[f++];)if(n&&y.inArray(i,n)>-1)o&&o.push(i);else if(u=ne(i),s=ge(p.appendChild(i),"script"),u&&be(s),r)for(l=0;i=s[l++];)he.test(i.type||"")&&r.push(i);return p}var ye=/^key/,_e=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Te=/^([^.]*)(?:\.(.+)|)/;function Ee(){return!0}function ke(){return!1}function xe(e,t){return e===function(){try{return g.activeElement}catch(Ir){}}()==("focus"===t)}function Se(e,t,r,n,o,i){var s,a;if("object"==typeof t){for(a in"string"!=typeof r&&(n=n||r,r=void 0),t)Se(e,a,r,n,t[a],i);return e}if(null==n&&null==o?(o=r,n=r=void 0):null==o&&("string"==typeof r?(o=n,n=void 0):(o=n,n=r,r=void 0)),!1===o)o=ke;else if(!o)return e;return 1===i&&(s=o,(o=function(e){return y().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=y.guid++)),e.each(function(){y.event.add(this,t,o,n,r)})}function Ce(e,t,r){r?(X.set(e,t,!1),y.event.add(e,t,{namespace:!1,handler:function(e){var n,i,s=X.get(this,t);if(1&e.isTrigger&&this[t]){if(s.length)(y.event.special[t]||{}).delegateType&&e.stopPropagation();else if(s=o.call(arguments),X.set(this,t,s),n=r(this,t),this[t](),s!==(i=X.get(this,t))||n?X.set(this,t,!1):i={},s!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else s.length&&(X.set(this,t,{value:y.event.trigger(y.extend(s[0],y.Event.prototype),s.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===X.get(e,t)&&y.event.add(e,t,Ee)}y.event={global:{},add:function(e,t,r,n,o){var i,s,a,c,u,l,p,d,f,h,m,g=X.get(e);if(W(e))for(r.handler&&(r=(i=r).handler,o=i.selector),o&&y.find.matchesSelector(re,o),r.guid||(r.guid=y.guid++),(c=g.events)||(c=g.events=Object.create(null)),(s=g.handle)||(s=g.handle=function(t){return void 0!==y&&y.event.triggered!==t.type?y.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(G)||[""]).length;u--;)f=m=(a=Te.exec(t[u])||[])[1],h=(a[2]||"").split(".").sort(),f&&(p=y.event.special[f]||{},f=(o?p.delegateType:p.bindType)||f,p=y.event.special[f]||{},l=y.extend({type:f,origType:m,data:n,handler:r,guid:r.guid,selector:o,needsContext:o&&y.expr.match.needsContext.test(o),namespace:h.join(".")},i),(d=c[f])||((d=c[f]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(e,n,h,s)||e.addEventListener&&e.addEventListener(f,s)),p.add&&(p.add.call(e,l),l.handler.guid||(l.handler.guid=r.guid)),o?d.splice(d.delegateCount++,0,l):d.push(l),y.event.global[f]=!0)},remove:function(e,t,r,n,o){var i,s,a,c,u,l,p,d,f,h,m,g=X.hasData(e)&&X.get(e);if(g&&(c=g.events)){for(u=(t=(t||"").match(G)||[""]).length;u--;)if(f=m=(a=Te.exec(t[u])||[])[1],h=(a[2]||"").split(".").sort(),f){for(p=y.event.special[f]||{},d=c[f=(n?p.delegateType:p.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=d.length;i--;)l=d[i],!o&&m!==l.origType||r&&r.guid!==l.guid||a&&!a.test(l.namespace)||n&&n!==l.selector&&("**"!==n||!l.selector)||(d.splice(i,1),l.selector&&d.delegateCount--,p.remove&&p.remove.call(e,l));s&&!d.length&&(p.teardown&&!1!==p.teardown.call(e,h,g.handle)||y.removeEvent(e,f,g.handle),delete c[f])}else for(f in c)y.event.remove(e,f+t[u],r,n,!0);y.isEmptyObject(c)&&X.remove(e,"handle events")}},dispatch:function(e){var t,r,n,o,i,s,a=new Array(arguments.length),c=y.event.fix(e),u=(X.get(this,"events")||Object.create(null))[c.type]||[],l=y.event.special[c.type]||{};for(a[0]=c,t=1;t<arguments.length;t++)a[t]=arguments[t];if(c.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,c)){for(s=y.event.handlers.call(this,c,u),t=0;(o=s[t++])&&!c.isPropagationStopped();)for(c.currentTarget=o.elem,r=0;(i=o.handlers[r++])&&!c.isImmediatePropagationStopped();)c.rnamespace&&!1!==i.namespace&&!c.rnamespace.test(i.namespace)||(c.handleObj=i,c.data=i.data,void 0!==(n=((y.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,a))&&!1===(c.result=n)&&(c.preventDefault(),c.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,c),c.result}},handlers:function(e,t){var r,n,o,i,s,a=[],c=t.delegateCount,u=e.target;if(c&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(i=[],s={},r=0;r<c;r++)void 0===s[o=(n=t[r]).selector+" "]&&(s[o]=n.needsContext?y(o,this).index(u)>-1:y.find(o,this,null,[u]).length),s[o]&&i.push(n);i.length&&a.push({elem:u,handlers:i})}return u=this,c<t.length&&a.push({elem:u,handlers:t.slice(c)}),a},addProp:function(e,t){Object.defineProperty(y.Event.prototype,e,{enumerable:!0,configurable:!0,get:h(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[y.expando]?e:new y.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return de.test(t.type)&&t.click&&S(t,"input")&&Ce(t,"click",Ee),!1},trigger:function(e){var t=this||e;return de.test(t.type)&&t.click&&S(t,"input")&&Ce(t,"click"),!0},_default:function(e){var t=e.target;return de.test(t.type)&&t.click&&S(t,"input")&&X.get(t,"click")||S(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},y.removeEvent=function(e,t,r){e.removeEventListener&&e.removeEventListener(t,r)},y.Event=function(e,t){if(!(this instanceof y.Event))return new y.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&y.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[y.expando]=!0},y.Event.prototype={constructor:y.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},y.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&ye.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&_e.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},y.event.addProp),y.each({focus:"focusin",blur:"focusout"},function(e,t){y.event.special[e]={setup:function(){return Ce(this,e,xe),!1},trigger:function(){return Ce(this,e),!0},delegateType:t}}),y.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){y.event.special[e]={delegateType:t,bindType:t,handle:function(e){var r,n=e.relatedTarget,o=e.handleObj;return n&&(n===this||y.contains(this,n))||(e.type=o.origType,r=o.handler.apply(this,arguments),e.type=t),r}}}),y.fn.extend({on:function(e,t,r,n){return Se(this,e,t,r,n)},one:function(e,t,r,n){return Se(this,e,t,r,n,1)},off:function(e,t,r){var n,o;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,y(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(r=t,t=void 0),!1===r&&(r=ke),this.each(function(){y.event.remove(this,e,r,t)})}});var Pe=/<script|<style|<link/i,je=/checked\s*(?:[^=]|=\s*.checked.)/i,Ae=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Oe(e,t){return S(e,"table")&&S(11!==t.nodeType?t:t.firstChild,"tr")&&y(e).children("tbody")[0]||e}function Le(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Re(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ge(e,t){var r,n,o,i,s,a;if(1===t.nodeType){if(X.hasData(e)&&(a=X.get(e).events))for(o in X.remove(t,"handle events"),a)for(r=0,n=a[o].length;r<n;r++)y.event.add(t,o,a[o][r]);K.hasData(e)&&(i=K.access(e),s=y.extend({},i),K.set(t,s))}}function De(e,t,r,n){t=i(t);var o,s,a,c,u,l,p=0,d=e.length,m=d-1,g=t[0],b=h(g);if(b||d>1&&"string"==typeof g&&!f.checkClone&&je.test(g))return e.each(function(o){var i=e.eq(o);b&&(t[0]=g.call(this,o,i.html())),De(i,t,r,n)});if(d&&(s=(o=ve(t,e[0].ownerDocument,!1,e,n)).firstChild,1===o.childNodes.length&&(o=s),s||n)){for(c=(a=y.map(ge(o,"script"),Le)).length;p<d;p++)u=o,p!==m&&(u=y.clone(u,!0,!0),c&&y.merge(a,ge(u,"script"))),r.call(e[p],u,p);if(c)for(l=a[a.length-1].ownerDocument,y.map(a,Re),p=0;p<c;p++)u=a[p],he.test(u.type||"")&&!X.access(u,"globalEval")&&y.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?y._evalUrl&&!u.noModule&&y._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},l):w(u.textContent.replace(Ae,""),u,l))}return e}function Me(e,t,r){for(var n,o=t?y.filter(t,e):e,i=0;null!=(n=o[i]);i++)r||1!==n.nodeType||y.cleanData(ge(n)),n.parentNode&&(r&&ne(n)&&be(ge(n,"script")),n.parentNode.removeChild(n));return e}y.extend({htmlPrefilter:function(e){return e},clone:function(e,t,r){var n,o,i,s,a,c,u,l=e.cloneNode(!0),p=ne(e);if(!(f.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||y.isXMLDoc(e)))for(s=ge(l),n=0,o=(i=ge(e)).length;n<o;n++)a=i[n],void 0,"input"===(u=(c=s[n]).nodeName.toLowerCase())&&de.test(a.type)?c.checked=a.checked:"input"!==u&&"textarea"!==u||(c.defaultValue=a.defaultValue);if(t)if(r)for(i=i||ge(e),s=s||ge(l),n=0,o=i.length;n<o;n++)Ge(i[n],s[n]);else Ge(e,l);return(s=ge(l,"script")).length>0&&be(s,!p&&ge(e,"script")),l},cleanData:function(e){for(var t,r,n,o=y.event.special,i=0;void 0!==(r=e[i]);i++)if(W(r)){if(t=r[X.expando]){if(t.events)for(n in t.events)o[n]?y.event.remove(r,n):y.removeEvent(r,n,t.handle);r[X.expando]=void 0}r[K.expando]&&(r[K.expando]=void 0)}}}),y.fn.extend({detach:function(e){return Me(this,e,!0)},remove:function(e){return Me(this,e)},text:function(e){return U(this,function(e){return void 0===e?y.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return De(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Oe(this,e).appendChild(e)})},prepend:function(){return De(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Oe(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return De(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return De(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(y.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return y.clone(this,e,t)})},html:function(e){return U(this,function(e){var t=this[0]||{},r=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Pe.test(e)&&!me[(fe.exec(e)||["",""])[1].toLowerCase()]){e=y.htmlPrefilter(e);try{for(;r<n;r++)1===(t=this[r]||{}).nodeType&&(y.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(o){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return De(this,arguments,function(t){var r=this.parentNode;y.inArray(this,e)<0&&(y.cleanData(ge(this)),r&&r.replaceChild(t,this))},e)}}),y.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){y.fn[e]=function(e){for(var r,n=[],o=y(e),i=o.length-1,a=0;a<=i;a++)r=a===i?this:this.clone(!0),y(o[a])[t](r),s.apply(n,r.get());return this.pushStack(n)}});var qe=new RegExp("^("+Q+")(?!px)[a-z%]+$","i"),Be=function(t){var r=t.ownerDocument.defaultView;return r&&r.opener||(r=e),r.getComputedStyle(t)},Ie=function(e,t,r){var n,o,i={};for(o in t)i[o]=e.style[o],e.style[o]=t[o];for(o in n=r.call(e),t)e.style[o]=i[o];return n},Fe=new RegExp(te.join("|"),"i");function Ue(e,t,r){var n,o,i,s,a=e.style;return(r=r||Be(e))&&(""!==(s=r.getPropertyValue(t)||r[t])||ne(e)||(s=y.style(e,t)),!f.pixelBoxStyles()&&qe.test(s)&&Fe.test(t)&&(n=a.width,o=a.minWidth,i=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=r.width,a.width=n,a.minWidth=o,a.maxWidth=i)),void 0!==s?s+"":s}function Ne(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function t(){if(l){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",re.appendChild(u).appendChild(l);var t=e.getComputedStyle(l);n="1%"!==t.top,c=12===r(t.marginLeft),l.style.right="60%",s=36===r(t.right),o=36===r(t.width),l.style.position="absolute",i=12===r(l.offsetWidth/3),re.removeChild(u),l=null}}function r(e){return Math.round(parseFloat(e))}var n,o,i,s,a,c,u=g.createElement("div"),l=g.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",f.clearCloneStyle="content-box"===l.style.backgroundClip,y.extend(f,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),c},scrollboxSize:function(){return t(),i},reliableTrDimensions:function(){var t,r,n,o;return null==a&&(t=g.createElement("table"),r=g.createElement("tr"),n=g.createElement("div"),t.style.cssText="position:absolute;left:-11111px",r.style.height="1px",n.style.height="9px",re.appendChild(t).appendChild(r).appendChild(n),o=e.getComputedStyle(r),a=parseInt(o.height)>3,re.removeChild(t)),a}}))}();var He=["Webkit","Moz","ms"],ze=g.createElement("div").style,$e={};function We(e){return y.cssProps[e]||$e[e]||(e in ze?e:$e[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),r=He.length;r--;)if((e=He[r]+t)in ze)return e}(e)||e)}var Ve=/^(none|table(?!-c[ea]).+)/,Xe=/^--/,Ke={position:"absolute",visibility:"hidden",display:"block"},Je={letterSpacing:"0",fontWeight:"400"};function Ye(e,t,r){var n=ee.exec(t);return n?Math.max(0,n[2]-(r||0))+(n[3]||"px"):t}function Ze(e,t,r,n,o,i){var s="width"===t?1:0,a=0,c=0;if(r===(n?"border":"content"))return 0;for(;s<4;s+=2)"margin"===r&&(c+=y.css(e,r+te[s],!0,o)),n?("content"===r&&(c-=y.css(e,"padding"+te[s],!0,o)),"margin"!==r&&(c-=y.css(e,"border"+te[s]+"Width",!0,o))):(c+=y.css(e,"padding"+te[s],!0,o),"padding"!==r?c+=y.css(e,"border"+te[s]+"Width",!0,o):a+=y.css(e,"border"+te[s]+"Width",!0,o));return!n&&i>=0&&(c+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-c-a-.5))||0),c}function Qe(e,t,r){var n=Be(e),o=(!f.boxSizingReliable()||r)&&"border-box"===y.css(e,"boxSizing",!1,n),i=o,s=Ue(e,t,n),a="offset"+t[0].toUpperCase()+t.slice(1);if(qe.test(s)){if(!r)return s;s="auto"}return(!f.boxSizingReliable()&&o||!f.reliableTrDimensions()&&S(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===y.css(e,"display",!1,n))&&e.getClientRects().length&&(o="border-box"===y.css(e,"boxSizing",!1,n),(i=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+Ze(e,t,r||(o?"border":"content"),i,n,s)+"px"}function et(e,t,r,n,o){return new et.prototype.init(e,t,r,n,o)}y.extend({cssHooks:{opacity:{get:function(e,t){if(t){var r=Ue(e,"opacity");return""===r?"1":r}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,r,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,s,a=$(t),c=Xe.test(t),u=e.style;if(c||(t=We(a)),s=y.cssHooks[t]||y.cssHooks[a],void 0===r)return s&&"get"in s&&void 0!==(o=s.get(e,!1,n))?o:u[t];"string"==(i=typeof r)&&(o=ee.exec(r))&&o[1]&&(r=se(e,t,o),i="number"),null!=r&&r==r&&("number"!==i||c||(r+=o&&o[3]||(y.cssNumber[a]?"":"px")),f.clearCloneStyle||""!==r||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(r=s.set(e,r,n))||(c?u.setProperty(t,r):u[t]=r))}},css:function(e,t,r,n){var o,i,s,a=$(t);return Xe.test(t)||(t=We(a)),(s=y.cssHooks[t]||y.cssHooks[a])&&"get"in s&&(o=s.get(e,!0,r)),void 0===o&&(o=Ue(e,t,n)),"normal"===o&&t in Je&&(o=Je[t]),""===r||r?(i=parseFloat(o),!0===r||isFinite(i)?i||0:o):o}}),y.each(["height","width"],function(e,t){y.cssHooks[t]={get:function(e,r,n){if(r)return!Ve.test(y.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Qe(e,t,n):Ie(e,Ke,function(){return Qe(e,t,n)})},set:function(e,r,n){var o,i=Be(e),s=!f.scrollboxSize()&&"absolute"===i.position,a=(s||n)&&"border-box"===y.css(e,"boxSizing",!1,i),c=n?Ze(e,t,n,a,i):0;return a&&s&&(c-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-Ze(e,t,"border",!1,i)-.5)),c&&(o=ee.exec(r))&&"px"!==(o[3]||"px")&&(e.style[t]=r,r=y.css(e,t)),Ye(0,r,c)}}}),y.cssHooks.marginLeft=Ne(f.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ue(e,"marginLeft"))||e.getBoundingClientRect().left-Ie(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),y.each({margin:"",padding:"",border:"Width"},function(e,t){y.cssHooks[e+t]={expand:function(r){for(var n=0,o={},i="string"==typeof r?r.split(" "):[r];n<4;n++)o[e+te[n]+t]=i[n]||i[n-2]||i[0];return o}},"margin"!==e&&(y.cssHooks[e+t].set=Ye)}),y.fn.extend({css:function(e,t){return U(this,function(e,t,r){var n,o,i={},s=0;if(Array.isArray(t)){for(n=Be(e),o=t.length;s<o;s++)i[t[s]]=y.css(e,t[s],!1,n);return i}return void 0!==r?y.style(e,t,r):y.css(e,t)},e,t,arguments.length>1)}}),y.Tween=et,et.prototype={constructor:et,init:function(e,t,r,n,o,i){this.elem=e,this.prop=r,this.easing=o||y.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=i||(y.cssNumber[r]?"":"px")},cur:function(){var e=et.propHooks[this.prop];return e&&e.get?e.get(this):et.propHooks._default.get(this)},run:function(e){var t,r=et.propHooks[this.prop];return this.options.duration?this.pos=t=y.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),r&&r.set?r.set(this):et.propHooks._default.set(this),this}},et.prototype.init.prototype=et.prototype,et.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=y.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){y.fx.step[e.prop]?y.fx.step[e.prop](e):1!==e.elem.nodeType||!y.cssHooks[e.prop]&&null==e.elem.style[We(e.prop)]?e.elem[e.prop]=e.now:y.style(e.elem,e.prop,e.now+e.unit)}}},et.propHooks.scrollTop=et.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},y.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},y.fx=et.prototype.init,y.fx.step={};var tt,rt,nt=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function it(){rt&&(!1===g.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(it):e.setTimeout(it,y.fx.interval),y.fx.tick())}function st(){return e.setTimeout(function(){tt=void 0}),tt=Date.now()}function at(e,t){var r,n=0,o={height:e};for(t=t?1:0;n<4;n+=2-t)o["margin"+(r=te[n])]=o["padding"+r]=e;return t&&(o.opacity=o.width=e),o}function ct(e,t,r){for(var n,o=(ut.tweeners[t]||[]).concat(ut.tweeners["*"]),i=0,s=o.length;i<s;i++)if(n=o[i].call(r,t,e))return n}function ut(e,t,r){var n,o,i=0,s=ut.prefilters.length,a=y.Deferred().always(function(){delete c.elem}),c=function(){if(o)return!1;for(var t=tt||st(),r=Math.max(0,u.startTime+u.duration-t),n=1-(r/u.duration||0),i=0,s=u.tweens.length;i<s;i++)u.tweens[i].run(n);return a.notifyWith(e,[u,n,r]),n<1&&s?r:(s||a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:y.extend({},t),opts:y.extend(!0,{specialEasing:{},easing:y.easing._default},r),originalProperties:t,originalOptions:r,startTime:tt||st(),duration:r.duration,tweens:[],createTween:function(t,r){var n=y.Tween(e,u.opts,t,r,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(n),n},stop:function(t){var r=0,n=t?u.tweens.length:0;if(o)return this;for(o=!0;r<n;r++)u.tweens[r].run(1);return t?(a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u,t])):a.rejectWith(e,[u,t]),this}}),l=u.props;for(function(e,t){var r,n,o,i,s;for(r in e)if(o=t[n=$(r)],i=e[r],Array.isArray(i)&&(o=i[1],i=e[r]=i[0]),r!==n&&(e[n]=i,delete e[r]),(s=y.cssHooks[n])&&"expand"in s)for(r in i=s.expand(i),delete e[n],i)r in e||(e[r]=i[r],t[r]=o);else t[n]=o}(l,u.opts.specialEasing);i<s;i++)if(n=ut.prefilters[i].call(u,e,l,u.opts))return h(n.stop)&&(y._queueHooks(u.elem,u.opts.queue).stop=n.stop.bind(n)),n;return y.map(l,ct,u),h(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),y.fx.timer(y.extend(c,{elem:e,anim:u,queue:u.opts.queue})),u}y.Animation=y.extend(ut,{tweeners:{"*":[function(e,t){var r=this.createTween(e,t);return se(r.elem,e,ee.exec(t),r),r}]},tweener:function(e,t){h(e)?(t=e,e=["*"]):e=e.match(G);for(var r,n=0,o=e.length;n<o;n++)r=e[n],ut.tweeners[r]=ut.tweeners[r]||[],ut.tweeners[r].unshift(t)},prefilters:[function(e,t,r){var n,o,i,s,a,c,u,l,p="width"in t||"height"in t,d=this,f={},h=e.style,m=e.nodeType&&ie(e),g=X.get(e,"fxshow");for(n in r.queue||(null==(s=y._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,y.queue(e,"fx").length||s.empty.fire()})})),t)if(o=t[n],nt.test(o)){if(delete t[n],i=i||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!g||void 0===g[n])continue;m=!0}f[n]=g&&g[n]||y.style(e,n)}if((c=!y.isEmptyObject(t))||!y.isEmptyObject(f))for(n in p&&1===e.nodeType&&(r.overflow=[h.overflow,h.overflowX,h.overflowY],null==(u=g&&g.display)&&(u=X.get(e,"display")),"none"===(l=y.css(e,"display"))&&(u?l=u:(ue([e],!0),u=e.style.display||u,l=y.css(e,"display"),ue([e]))),("inline"===l||"inline-block"===l&&null!=u)&&"none"===y.css(e,"float")&&(c||(d.done(function(){h.display=u}),null==u&&(l=h.display,u="none"===l?"":l)),h.display="inline-block")),r.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=r.overflow[0],h.overflowX=r.overflow[1],h.overflowY=r.overflow[2]})),c=!1,f)c||(g?"hidden"in g&&(m=g.hidden):g=X.access(e,"fxshow",{display:u}),i&&(g.hidden=!m),m&&ue([e],!0),d.done(function(){for(n in m||ue([e]),X.remove(e,"fxshow"),f)y.style(e,n,f[n])})),c=ct(m?g[n]:0,n,d),n in g||(g[n]=c.start,m&&(c.end=c.start,c.start=0))}],prefilter:function(e,t){t?ut.prefilters.unshift(e):ut.prefilters.push(e)}}),y.speed=function(e,t,r){var n=e&&"object"==typeof e?y.extend({},e):{complete:r||!r&&t||h(e)&&e,duration:e,easing:r&&t||t&&!h(t)&&t};return y.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in y.fx.speeds?n.duration=y.fx.speeds[n.duration]:n.duration=y.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){h(n.old)&&n.old.call(this),n.queue&&y.dequeue(this,n.queue)},n},y.fn.extend({fadeTo:function(e,t,r,n){return this.filter(ie).css("opacity",0).show().end().animate({opacity:t},e,r,n)},animate:function(e,t,r,n){var o=y.isEmptyObject(e),i=y.speed(t,r,n),s=function(){var t=ut(this,y.extend({},e),i);(o||X.get(this,"finish"))&&t.stop(!0)};return s.finish=s,o||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(e,t,r){var n=function(e){var t=e.stop;delete e.stop,t(r)};return"string"!=typeof e&&(r=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",i=y.timers,s=X.get(this);if(o)s[o]&&s[o].stop&&n(s[o]);else for(o in s)s[o]&&s[o].stop&&ot.test(o)&&n(s[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(r),t=!1,i.splice(o,1));!t&&r||y.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,r=X.get(this),n=r[e+"queue"],o=r[e+"queueHooks"],i=y.timers,s=n?n.length:0;for(r.finish=!0,y.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<s;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete r.finish})}}),y.each(["toggle","show","hide"],function(e,t){var r=y.fn[t];y.fn[t]=function(e,n,o){return null==e||"boolean"==typeof e?r.apply(this,arguments):this.animate(at(t,!0),e,n,o)}}),y.each({slideDown:at("show"),slideUp:at("hide"),slideToggle:at("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){y.fn[e]=function(e,r,n){return this.animate(t,e,r,n)}}),y.timers=[],y.fx.tick=function(){var e,t=0,r=y.timers;for(tt=Date.now();t<r.length;t++)(e=r[t])()||r[t]!==e||r.splice(t--,1);r.length||y.fx.stop(),tt=void 0},y.fx.timer=function(e){y.timers.push(e),y.fx.start()},y.fx.interval=13,y.fx.start=function(){rt||(rt=!0,it())},y.fx.stop=function(){rt=null},y.fx.speeds={slow:600,fast:200,_default:400},y.fn.delay=function(t,r){return t=y.fx&&y.fx.speeds[t]||t,r=r||"fx",this.queue(r,function(r,n){var o=e.setTimeout(r,t);n.stop=function(){e.clearTimeout(o)}})},function(){var e=g.createElement("input"),t=g.createElement("select").appendChild(g.createElement("option"));e.type="checkbox",f.checkOn=""!==e.value,f.optSelected=t.selected,(e=g.createElement("input")).value="t",e.type="radio",f.radioValue="t"===e.value}();var lt,pt=y.expr.attrHandle;y.fn.extend({attr:function(e,t){return U(this,y.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){y.removeAttr(this,e)})}}),y.extend({attr:function(e,t,r){var n,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?y.prop(e,t,r):(1===i&&y.isXMLDoc(e)||(o=y.attrHooks[t.toLowerCase()]||(y.expr.match.bool.test(t)?lt:void 0)),void 0!==r?null===r?void y.removeAttr(e,t):o&&"set"in o&&void 0!==(n=o.set(e,r,t))?n:(e.setAttribute(t,r+""),r):o&&"get"in o&&null!==(n=o.get(e,t))?n:null==(n=y.find.attr(e,t))?void 0:n)},attrHooks:{type:{set:function(e,t){if(!f.radioValue&&"radio"===t&&S(e,"input")){var r=e.value;return e.setAttribute("type",t),r&&(e.value=r),t}}}},removeAttr:function(e,t){var r,n=0,o=t&&t.match(G);if(o&&1===e.nodeType)for(;r=o[n++];)e.removeAttribute(r)}}),lt={set:function(e,t,r){return!1===t?y.removeAttr(e,r):e.setAttribute(r,r),r}},y.each(y.expr.match.bool.source.match(/\w+/g),function(e,t){var r=pt[t]||y.find.attr;pt[t]=function(e,t,n){var o,i,s=t.toLowerCase();return n||(i=pt[s],pt[s]=o,o=null!=r(e,t,n)?s:null,pt[s]=i),o}});var dt=/^(?:input|select|textarea|button)$/i,ft=/^(?:a|area)$/i;function ht(e){return(e.match(G)||[]).join(" ")}function mt(e){return e.getAttribute&&e.getAttribute("class")||""}function gt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(G)||[]}y.fn.extend({prop:function(e,t){return U(this,y.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[y.propFix[e]||e]})}}),y.extend({prop:function(e,t,r){var n,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&y.isXMLDoc(e)||(t=y.propFix[t]||t,o=y.propHooks[t]),void 0!==r?o&&"set"in o&&void 0!==(n=o.set(e,r,t))?n:e[t]=r:o&&"get"in o&&null!==(n=o.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=y.find.attr(e,"tabindex");return t?parseInt(t,10):dt.test(e.nodeName)||ft.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),f.optSelected||(y.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),y.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){y.propFix[this.toLowerCase()]=this}),y.fn.extend({addClass:function(e){var t,r,n,o,i,s,a,c=0;if(h(e))return this.each(function(t){y(this).addClass(e.call(this,t,mt(this)))});if((t=gt(e)).length)for(;r=this[c++];)if(o=mt(r),n=1===r.nodeType&&" "+ht(o)+" "){for(s=0;i=t[s++];)n.indexOf(" "+i+" ")<0&&(n+=i+" ");o!==(a=ht(n))&&r.setAttribute("class",a)}return this},removeClass:function(e){var t,r,n,o,i,s,a,c=0;if(h(e))return this.each(function(t){y(this).removeClass(e.call(this,t,mt(this)))});if(!arguments.length)return this.attr("class","");if((t=gt(e)).length)for(;r=this[c++];)if(o=mt(r),n=1===r.nodeType&&" "+ht(o)+" "){for(s=0;i=t[s++];)for(;n.indexOf(" "+i+" ")>-1;)n=n.replace(" "+i+" "," ");o!==(a=ht(n))&&r.setAttribute("class",a)}return this},toggleClass:function(e,t){var r=typeof e,n="string"===r||Array.isArray(e);return"boolean"==typeof t&&n?t?this.addClass(e):this.removeClass(e):h(e)?this.each(function(r){y(this).toggleClass(e.call(this,r,mt(this),t),t)}):this.each(function(){var t,o,i,s;if(n)for(o=0,i=y(this),s=gt(e);t=s[o++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==r||((t=mt(this))&&X.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":X.get(this,"__className__")||""))})},hasClass:function(e){var t,r,n=0;for(t=" "+e+" ";r=this[n++];)if(1===r.nodeType&&(" "+ht(mt(r))+" ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g;y.fn.extend({val:function(e){var t,r,n,o=this[0];return arguments.length?(n=h(e),this.each(function(r){var o;1===this.nodeType&&(null==(o=n?e.call(this,r,y(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=y.map(o,function(e){return null==e?"":e+""})),(t=y.valHooks[this.type]||y.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))})):o?(t=y.valHooks[o.type]||y.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(r=t.get(o,"value"))?r:"string"==typeof(r=o.value)?r.replace(bt,""):null==r?"":r:void 0}}),y.extend({valHooks:{option:{get:function(e){var t=y.find.attr(e,"value");return null!=t?t:ht(y.text(e))}},select:{get:function(e){var t,r,n,o=e.options,i=e.selectedIndex,s="select-one"===e.type,a=s?null:[],c=s?i+1:o.length;for(n=i<0?c:s?i:0;n<c;n++)if(((r=o[n]).selected||n===i)&&!r.disabled&&(!r.parentNode.disabled||!S(r.parentNode,"optgroup"))){if(t=y(r).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var r,n,o=e.options,i=y.makeArray(t),s=o.length;s--;)((n=o[s]).selected=y.inArray(y.valHooks.option.get(n),i)>-1)&&(r=!0);return r||(e.selectedIndex=-1),i}}}}),y.each(["radio","checkbox"],function(){y.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=y.inArray(y(e).val(),t)>-1}},f.checkOn||(y.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),f.focusin="onfocusin"in e;var wt=/^(?:focusinfocus|focusoutblur)$/,vt=function(e){e.stopPropagation()};y.extend(y.event,{trigger:function(t,r,n,o){var i,s,a,c,u,p,d,f,b=[n||g],w=l.call(t,"type")?t.type:t,v=l.call(t,"namespace")?t.namespace.split("."):[];if(s=f=a=n=n||g,3!==n.nodeType&&8!==n.nodeType&&!wt.test(w+y.event.triggered)&&(w.indexOf(".")>-1&&(v=w.split("."),w=v.shift(),v.sort()),u=w.indexOf(":")<0&&"on"+w,(t=t[y.expando]?t:new y.Event(w,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=v.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),r=null==r?[t]:y.makeArray(r,[t]),d=y.event.special[w]||{},o||!d.trigger||!1!==d.trigger.apply(n,r))){if(!o&&!d.noBubble&&!m(n)){for(c=d.delegateType||w,wt.test(c+w)||(s=s.parentNode);s;s=s.parentNode)b.push(s),a=s;a===(n.ownerDocument||g)&&b.push(a.defaultView||a.parentWindow||e)}for(i=0;(s=b[i++])&&!t.isPropagationStopped();)f=s,t.type=i>1?c:d.bindType||w,(p=(X.get(s,"events")||Object.create(null))[t.type]&&X.get(s,"handle"))&&p.apply(s,r),(p=u&&s[u])&&p.apply&&W(s)&&(t.result=p.apply(s,r),!1===t.result&&t.preventDefault());return t.type=w,o||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(b.pop(),r)||!W(n)||u&&h(n[w])&&!m(n)&&((a=n[u])&&(n[u]=null),y.event.triggered=w,t.isPropagationStopped()&&f.addEventListener(w,vt),n[w](),t.isPropagationStopped()&&f.removeEventListener(w,vt),y.event.triggered=void 0,a&&(n[u]=a)),t.result}},simulate:function(e,t,r){var n=y.extend(new y.Event,r,{type:e,isSimulated:!0});y.event.trigger(n,null,t)}}),y.fn.extend({trigger:function(e,t){return this.each(function(){y.event.trigger(e,t,this)})},triggerHandler:function(e,t){var r=this[0];if(r)return y.event.trigger(e,t,r,!0)}}),f.focusin||y.each({focus:"focusin",blur:"focusout"},function(e,t){var r=function(e){y.event.simulate(t,e.target,y.event.fix(e))};y.event.special[t]={setup:function(){var n=this.ownerDocument||this.document||this,o=X.access(n,t);o||n.addEventListener(e,r,!0),X.access(n,t,(o||0)+1)},teardown:function(){var n=this.ownerDocument||this.document||this,o=X.access(n,t)-1;o?X.access(n,t,o):(n.removeEventListener(e,r,!0),X.remove(n,t))}}});var yt=e.location,_t={guid:Date.now()},Tt=/\?/;y.parseXML=function(t){var r;if(!t||"string"!=typeof t)return null;try{r=(new e.DOMParser).parseFromString(t,"text/xml")}catch(n){r=void 0}return r&&!r.getElementsByTagName("parsererror").length||y.error("Invalid XML: "+t),r};var Et=/\[\]$/,kt=/\r?\n/g,xt=/^(?:submit|button|image|reset|file)$/i,St=/^(?:input|select|textarea|keygen)/i;function Ct(e,t,r,n){var o;if(Array.isArray(t))y.each(t,function(t,o){r||Et.test(e)?n(e,o):Ct(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,r,n)});else if(r||"object"!==v(t))n(e,t);else for(o in t)Ct(e+"["+o+"]",t[o],r,n)}y.param=function(e,t){var r,n=[],o=function(e,t){var r=h(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==r?"":r)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!y.isPlainObject(e))y.each(e,function(){o(this.name,this.value)});else for(r in e)Ct(r,e[r],t,o);return n.join("&")},y.fn.extend({serialize:function(){return y.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=y.prop(this,"elements");return e?y.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!y(this).is(":disabled")&&St.test(this.nodeName)&&!xt.test(e)&&(this.checked||!de.test(e))}).map(function(e,t){var r=y(this).val();return null==r?null:Array.isArray(r)?y.map(r,function(e){return{name:t.name,value:e.replace(kt,"\r\n")}}):{name:t.name,value:r.replace(kt,"\r\n")}}).get()}});var Pt=/%20/g,jt=/#.*$/,At=/([?&])_=[^&]*/,Ot=/^(.*?):[ \t]*([^\r\n]*)$/gm,Lt=/^(?:GET|HEAD)$/,Rt=/^\/\//,Gt={},Dt={},Mt="*/".concat("*"),qt=g.createElement("a");function Bt(e){return function(t,r){"string"!=typeof t&&(r=t,t="*");var n,o=0,i=t.toLowerCase().match(G)||[];if(h(r))for(;n=i[o++];)"+"===n[0]?(n=n.slice(1)||"*",(e[n]=e[n]||[]).unshift(r)):(e[n]=e[n]||[]).push(r)}}function It(e,t,r,n){var o={},i=e===Dt;function s(a){var c;return o[a]=!0,y.each(e[a]||[],function(e,a){var u=a(t,r,n);return"string"!=typeof u||i||o[u]?i?!(c=u):void 0:(t.dataTypes.unshift(u),s(u),!1)}),c}return s(t.dataTypes[0])||!o["*"]&&s("*")}function Ft(e,t){var r,n,o=y.ajaxSettings.flatOptions||{};for(r in t)void 0!==t[r]&&((o[r]?e:n||(n={}))[r]=t[r]);return n&&y.extend(!0,e,n),e}qt.href=yt.href,y.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:yt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(yt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Mt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":y.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ft(Ft(e,y.ajaxSettings),t):Ft(y.ajaxSettings,e)},ajaxPrefilter:Bt(Gt),ajaxTransport:Bt(Dt),ajax:function(t,r){"object"==typeof t&&(r=t,t=void 0),r=r||{};var n,o,i,s,a,c,u,l,p,d,f=y.ajaxSetup({},r),h=f.context||f,m=f.context&&(h.nodeType||h.jquery)?y(h):y.event,b=y.Deferred(),w=y.Callbacks("once memory"),v=f.statusCode||{},_={},T={},E="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(u){if(!s)for(s={};t=Ot.exec(i);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?i:null},setRequestHeader:function(e,t){return null==u&&(e=T[e.toLowerCase()]=T[e.toLowerCase()]||e,_[e]=t),this},overrideMimeType:function(e){return null==u&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)k.always(e[k.status]);else for(t in e)v[t]=[v[t],e[t]];return this},abort:function(e){var t=e||E;return n&&n.abort(t),x(0,t),this}};if(b.promise(k),f.url=((t||f.url||yt.href)+"").replace(Rt,yt.protocol+"//"),f.type=r.method||r.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(G)||[""],null==f.crossDomain){c=g.createElement("a");try{c.href=f.url,c.href=c.href,f.crossDomain=qt.protocol+"//"+qt.host!=c.protocol+"//"+c.host}catch(S){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=y.param(f.data,f.traditional)),It(Gt,f,r,k),u)return k;for(p in(l=y.event&&f.global)&&0==y.active++&&y.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Lt.test(f.type),o=f.url.replace(jt,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Pt,"+")):(d=f.url.slice(o.length),f.data&&(f.processData||"string"==typeof f.data)&&(o+=(Tt.test(o)?"&":"?")+f.data,delete f.data),!1===f.cache&&(o=o.replace(At,"$1"),d=(Tt.test(o)?"&":"?")+"_="+_t.guid+++d),f.url=o+d),f.ifModified&&(y.lastModified[o]&&k.setRequestHeader("If-Modified-Since",y.lastModified[o]),y.etag[o]&&k.setRequestHeader("If-None-Match",y.etag[o])),(f.data&&f.hasContent&&!1!==f.contentType||r.contentType)&&k.setRequestHeader("Content-Type",f.contentType),k.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Mt+"; q=0.01":""):f.accepts["*"]),f.headers)k.setRequestHeader(p,f.headers[p]);if(f.beforeSend&&(!1===f.beforeSend.call(h,k,f)||u))return k.abort();if(E="abort",w.add(f.complete),k.done(f.success),k.fail(f.error),n=It(Dt,f,r,k)){if(k.readyState=1,l&&m.trigger("ajaxSend",[k,f]),u)return k;f.async&&f.timeout>0&&(a=e.setTimeout(function(){k.abort("timeout")},f.timeout));try{u=!1,n.send(_,x)}catch(S){if(u)throw S;x(-1,S)}}else x(-1,"No Transport");function x(t,r,s,c){var p,d,g,_,T,E=r;u||(u=!0,a&&e.clearTimeout(a),n=void 0,i=c||"",k.readyState=t>0?4:0,p=t>=200&&t<300||304===t,s&&(_=function(e,t,r){for(var n,o,i,s,a=e.contents,c=e.dataTypes;"*"===c[0];)c.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(o in a)if(a[o]&&a[o].test(n)){c.unshift(o);break}if(c[0]in r)i=c[0];else{for(o in r){if(!c[0]||e.converters[o+" "+c[0]]){i=o;break}s||(s=o)}i=i||s}if(i)return i!==c[0]&&c.unshift(i),r[i]}(f,k,s)),!p&&y.inArray("script",f.dataTypes)>-1&&(f.converters["text script"]=function(){}),_=function(e,t,r,n){var o,i,s,a,c,u={},l=e.dataTypes.slice();if(l[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(i=l.shift();i;)if(e.responseFields[i]&&(r[e.responseFields[i]]=t),!c&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),c=i,i=l.shift())if("*"===i)i=c;else if("*"!==c&&c!==i){if(!(s=u[c+" "+i]||u["* "+i]))for(o in u)if((a=o.split(" "))[1]===i&&(s=u[c+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[o]:!0!==u[o]&&(i=a[0],l.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(S){return{state:"parsererror",error:s?S:"No conversion from "+c+" to "+i}}}return{state:"success",data:t}}(f,_,k,p),p?(f.ifModified&&((T=k.getResponseHeader("Last-Modified"))&&(y.lastModified[o]=T),(T=k.getResponseHeader("etag"))&&(y.etag[o]=T)),204===t||"HEAD"===f.type?E="nocontent":304===t?E="notmodified":(E=_.state,d=_.data,p=!(g=_.error))):(g=E,!t&&E||(E="error",t<0&&(t=0))),k.status=t,k.statusText=(r||E)+"",p?b.resolveWith(h,[d,E,k]):b.rejectWith(h,[k,E,g]),k.statusCode(v),v=void 0,l&&m.trigger(p?"ajaxSuccess":"ajaxError",[k,f,p?d:g]),w.fireWith(h,[k,E]),l&&(m.trigger("ajaxComplete",[k,f]),--y.active||y.event.trigger("ajaxStop")))}return k},getJSON:function(e,t,r){return y.get(e,t,r,"json")},getScript:function(e,t){return y.get(e,void 0,t,"script")}}),y.each(["get","post"],function(e,t){y[t]=function(e,r,n,o){return h(r)&&(o=o||n,n=r,r=void 0),y.ajax(y.extend({url:e,type:t,dataType:o,data:r,success:n},y.isPlainObject(e)&&e))}}),y.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),y._evalUrl=function(e,t,r){return y.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){y.globalEval(e,t,r)}})},y.fn.extend({wrapAll:function(e){var t;return this[0]&&(h(e)&&(e=e.call(this[0])),t=y(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return h(e)?this.each(function(t){y(this).wrapInner(e.call(this,t))}):this.each(function(){var t=y(this),r=t.contents();r.length?r.wrapAll(e):t.append(e)})},wrap:function(e){var t=h(e);return this.each(function(r){y(this).wrapAll(t?e.call(this,r):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){y(this).replaceWith(this.childNodes)}),this}}),y.expr.pseudos.hidden=function(e){return!y.expr.pseudos.visible(e)},y.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},y.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(t){}};var Ut={0:200,1223:204},Nt=y.ajaxSettings.xhr();f.cors=!!Nt&&"withCredentials"in Nt,f.ajax=Nt=!!Nt,y.ajaxTransport(function(t){var r,n;if(f.cors||Nt&&!t.crossDomain)return{send:function(o,i){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];for(s in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(s,o[s]);r=function(e){return function(){r&&(r=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?i(0,"error"):i(a.status,a.statusText):i(Ut[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=r(),n=a.onerror=a.ontimeout=r("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){r&&n()})},r=r("abort");try{a.send(t.hasContent&&t.data||null)}catch(c){if(r)throw c}},abort:function(){r&&r()}}}),y.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),y.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return y.globalEval(e),e}}}),y.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),y.ajaxTransport("script",function(e){var t,r;if(e.crossDomain||e.scriptAttrs)return{send:function(n,o){t=y("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",r=function(e){t.remove(),r=null,e&&o("error"===e.type?404:200,e.type)}),g.head.appendChild(t[0])},abort:function(){r&&r()}}});var Ht,zt=[],$t=/(=)\?(?=&|$)|\?\?/;y.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=zt.pop()||y.expando+"_"+_t.guid++;return this[e]=!0,e}}),y.ajaxPrefilter("json jsonp",function(t,r,n){var o,i,s,a=!1!==t.jsonp&&($t.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&$t.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=h(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace($t,"$1"+o):!1!==t.jsonp&&(t.url+=(Tt.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return s||y.error(o+" was not called"),s[0]},t.dataTypes[0]="json",i=e[o],e[o]=function(){s=arguments},n.always(function(){void 0===i?y(e).removeProp(o):e[o]=i,t[o]&&(t.jsonpCallback=r.jsonpCallback,zt.push(o)),s&&h(i)&&i(s[0]),s=i=void 0}),"script"}),f.createHTMLDocument=((Ht=g.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ht.childNodes.length),y.parseHTML=function(e,t,r){return"string"!=typeof e?[]:("boolean"==typeof t&&(r=t,t=!1),t||(f.createHTMLDocument?((n=(t=g.implementation.createHTMLDocument("")).createElement("base")).href=g.location.href,t.head.appendChild(n)):t=g),i=!r&&[],(o=C.exec(e))?[t.createElement(o[1])]:(o=ve([e],t,i),i&&i.length&&y(i).remove(),y.merge([],o.childNodes)));var n,o,i},y.fn.load=function(e,t,r){var n,o,i,s=this,a=e.indexOf(" ");return a>-1&&(n=ht(e.slice(a)),e=e.slice(0,a)),h(t)?(r=t,t=void 0):t&&"object"==typeof t&&(o="POST"),s.length>0&&y.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){i=arguments,s.html(n?y("<div>").append(y.parseHTML(e)).find(n):e)}).always(r&&function(e,t){s.each(function(){r.apply(this,i||[e.responseText,t,e])})}),this},y.expr.pseudos.animated=function(e){return y.grep(y.timers,function(t){return e===t.elem}).length},y.offset={setOffset:function(e,t,r){var n,o,i,s,a,c,u=y.css(e,"position"),l=y(e),p={};"static"===u&&(e.style.position="relative"),a=l.offset(),i=y.css(e,"top"),c=y.css(e,"left"),("absolute"===u||"fixed"===u)&&(i+c).indexOf("auto")>-1?(s=(n=l.position()).top,o=n.left):(s=parseFloat(i)||0,o=parseFloat(c)||0),h(t)&&(t=t.call(e,r,y.extend({},a))),null!=t.top&&(p.top=t.top-a.top+s),null!=t.left&&(p.left=t.left-a.left+o),"using"in t?t.using.call(e,p):("number"==typeof p.top&&(p.top+="px"),"number"==typeof p.left&&(p.left+="px"),l.css(p))}},y.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){y.offset.setOffset(this,e,t)});var t,r,n=this[0];return n?n.getClientRects().length?(t=n.getBoundingClientRect(),r=n.ownerDocument.defaultView,{top:t.top+r.pageYOffset,left:t.left+r.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,r,n=this[0],o={top:0,left:0};if("fixed"===y.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),r=n.ownerDocument,e=n.offsetParent||r.documentElement;e&&(e===r.body||e===r.documentElement)&&"static"===y.css(e,"position");)e=e.parentNode;e&&e!==n&&1===e.nodeType&&((o=y(e).offset()).top+=y.css(e,"borderTopWidth",!0),o.left+=y.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-y.css(n,"marginTop",!0),left:t.left-o.left-y.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===y.css(e,"position");)e=e.offsetParent;return e||re})}}),y.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var r="pageYOffset"===t;y.fn[e]=function(n){return U(this,function(e,n,o){var i;if(m(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[n];i?i.scrollTo(r?i.pageXOffset:o,r?o:i.pageYOffset):e[n]=o},e,n,arguments.length)}}),y.each(["top","left"],function(e,t){y.cssHooks[t]=Ne(f.pixelPosition,function(e,r){if(r)return r=Ue(e,t),qe.test(r)?y(e).position()[t]+"px":r})}),y.each({Height:"height",Width:"width"},function(e,t){y.each({padding:"inner"+e,content:t,"":"outer"+e},function(r,n){y.fn[n]=function(o,i){var s=arguments.length&&(r||"boolean"!=typeof o),a=r||(!0===o||!0===i?"margin":"border");return U(this,function(t,r,o){var i;return m(t)?0===n.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?y.css(t,r,a):y.style(t,r,o,a)},t,s?o:void 0,s)}})}),y.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){y.fn[t]=function(e){return this.on(t,e)}}),y.fn.extend({bind:function(e,t,r){return this.on(e,null,t,r)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,r,n){return this.on(t,e,r,n)},undelegate:function(e,t,r){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",r)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),y.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){y.fn[t]=function(e,r){return arguments.length>0?this.on(t,null,e,r):this.trigger(t)}});var Wt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;y.proxy=function(e,t){var r,n,i;if("string"==typeof t&&(r=e[t],t=e,e=r),h(e))return n=o.call(arguments,2),(i=function(){return e.apply(t||this,n.concat(o.call(arguments)))}).guid=e.guid=e.guid||y.guid++,i},y.holdReady=function(e){e?y.readyWait++:y.ready(!0)},y.isArray=Array.isArray,y.parseJSON=JSON.parse,y.nodeName=S,y.isFunction=h,y.isWindow=m,y.camelCase=$,y.type=v,y.now=Date.now,y.isNumeric=function(e){var t=y.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},y.trim=function(e){return null==e?"":(e+"").replace(Wt,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return y});var Vt=e.jQuery,Xt=e.$;return y.noConflict=function(t){return e.$===y&&(e.$=Xt),t&&e.jQuery===y&&(e.jQuery=Vt),y},void 0===t&&(e.jQuery=e.$=y),y}),Lr=Lr.exports;var Rr={exports:{}};(function(){function e(e){"use strict";var t={omitExtraWLInCodeBlocks:{defaultValue:!1,describe:"Omit the default extra whiteline added to code blocks",type:"boolean"},noHeaderId:{defaultValue:!1,describe:"Turn on/off generated header id",type:"boolean"},prefixHeaderId:{defaultValue:!1,describe:"Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic 'section-' prefix",type:"string"},rawPrefixHeaderId:{defaultValue:!1,describe:'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',type:"boolean"},ghCompatibleHeaderId:{defaultValue:!1,describe:"Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)",type:"boolean"},rawHeaderId:{defaultValue:!1,describe:"Remove only spaces, ' and \" from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids",type:"boolean"},headerLevelStart:{defaultValue:!1,describe:"The header blocks level start",type:"integer"},parseImgDimensions:{defaultValue:!1,describe:"Turn on/off image dimension parsing",type:"boolean"},simplifiedAutoLink:{defaultValue:!1,describe:"Turn on/off GFM autolink style",type:"boolean"},excludeTrailingPunctuationFromURLs:{defaultValue:!1,describe:"Excludes trailing punctuation from links generated with autoLinking",type:"boolean"},literalMidWordUnderscores:{defaultValue:!1,describe:"Parse midword underscores as literal underscores",type:"boolean"},literalMidWordAsterisks:{defaultValue:!1,describe:"Parse midword asterisks as literal asterisks",type:"boolean"},strikethrough:{defaultValue:!1,describe:"Turn on/off strikethrough support",type:"boolean"},tables:{defaultValue:!1,describe:"Turn on/off tables support",type:"boolean"},tablesHeaderId:{defaultValue:!1,describe:"Add an id to table headers",type:"boolean"},ghCodeBlocks:{defaultValue:!0,describe:"Turn on/off GFM fenced code blocks support",type:"boolean"},tasklists:{defaultValue:!1,describe:"Turn on/off GFM tasklist support",type:"boolean"},smoothLivePreview:{defaultValue:!1,describe:"Prevents weird effects in live previews due to incomplete input",type:"boolean"},smartIndentationFix:{defaultValue:!1,description:"Tries to smartly fix indentation in es6 strings",type:"boolean"},disableForced4SpacesIndentedSublists:{defaultValue:!1,description:"Disables the requirement of indenting nested sublists by 4 spaces",type:"boolean"},simpleLineBreaks:{defaultValue:!1,description:"Parses simple line breaks as <br> (GFM Style)",type:"boolean"},requireSpaceBeforeHeadingText:{defaultValue:!1,description:"Makes adding a space between `#` and the header text mandatory (GFM Style)",type:"boolean"},ghMentions:{defaultValue:!1,description:"Enables github @mentions",type:"boolean"},ghMentionsLink:{defaultValue:"https://github.com/{u}",description:"Changes the link generated by @mentions. Only applies if ghMentions option is enabled.",type:"string"},encodeEmails:{defaultValue:!0,description:"Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities",type:"boolean"},openLinksInNewWindow:{defaultValue:!1,description:"Open all links in new windows",type:"boolean"},backslashEscapesHTMLTags:{defaultValue:!1,description:"Support for HTML Tag escaping. ex: <div>foo</div>",type:"boolean"},emoji:{defaultValue:!1,description:"Enable emoji support. Ex: `this is a :smile: emoji`",type:"boolean"},underline:{defaultValue:!1,description:"Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`",type:"boolean"},completeHTMLDocument:{defaultValue:!1,description:"Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags",type:"boolean"},metadata:{defaultValue:!1,description:"Enable support for document metadata (defined at the top of the document between `\xab\xab\xab` and `\xbb\xbb\xbb` or between `---` and `---`).",type:"boolean"},splitAdjacentBlockquotes:{defaultValue:!1,description:"Split adjacent blockquote blocks",type:"boolean"}};if(!1===e)return JSON.parse(JSON.stringify(t));var r={};for(var n in t)t.hasOwnProperty(n)&&(r[n]=t[n].defaultValue);return r}var t={},r={},n={},o=e(!0),i="vanilla",s={github:{omitExtraWLInCodeBlocks:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,disableForced4SpacesIndentedSublists:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghCompatibleHeaderId:!0,ghMentions:!0,backslashEscapesHTMLTags:!0,emoji:!0,splitAdjacentBlockquotes:!0},original:{noHeaderId:!0,ghCodeBlocks:!1},ghost:{omitExtraWLInCodeBlocks:!0,parseImgDimensions:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,smoothLivePreview:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghMentions:!1,encodeEmails:!0},vanilla:e(!0),allOn:function(){"use strict";var t=e(!0),r={};for(var n in t)t.hasOwnProperty(n)&&(r[n]=!0);return r}()};function a(e,r){"use strict";var n=r?"Error in "+r+" extension->":"Error in unnamed extension",o={valid:!0,error:""};t.helper.isArray(e)||(e=[e]);for(var i=0;i<e.length;++i){var s=n+" sub-extension "+i+": ",a=e[i];if("object"!=typeof a)return o.valid=!1,o.error=s+"must be an object, but "+typeof a+" given",o;if(!t.helper.isString(a.type))return o.valid=!1,o.error=s+'property "type" must be a string, but '+typeof a.type+" given",o;var c=a.type=a.type.toLowerCase();if("language"===c&&(c=a.type="lang"),"html"===c&&(c=a.type="output"),"lang"!==c&&"output"!==c&&"listener"!==c)return o.valid=!1,o.error=s+"type "+c+' is not recognized. Valid values: "lang/language", "output/html" or "listener"',o;if("listener"===c){if(t.helper.isUndefined(a.listeners))return o.valid=!1,o.error=s+'. Extensions of type "listener" must have a property called "listeners"',o}else if(t.helper.isUndefined(a.filter)&&t.helper.isUndefined(a.regex))return o.valid=!1,o.error=s+c+' extensions must define either a "regex" property or a "filter" method',o;if(a.listeners){if("object"!=typeof a.listeners)return o.valid=!1,o.error=s+'"listeners" property must be an object but '+typeof a.listeners+" given",o;for(var u in a.listeners)if(a.listeners.hasOwnProperty(u)&&"function"!=typeof a.listeners[u])return o.valid=!1,o.error=s+'"listeners" property must be an hash of [event name]: [callback]. listeners.'+u+" must be a function but "+typeof a.listeners[u]+" given",o}if(a.filter){if("function"!=typeof a.filter)return o.valid=!1,o.error=s+'"filter" must be a function, but '+typeof a.filter+" given",o}else if(a.regex){if(t.helper.isString(a.regex)&&(a.regex=new RegExp(a.regex,"g")),!(a.regex instanceof RegExp))return o.valid=!1,o.error=s+'"regex" property must either be a string or a RegExp object, but '+typeof a.regex+" given",o;if(t.helper.isUndefined(a.replace))return o.valid=!1,o.error=s+'"regex" extensions must implement a replace string or function',o}}return o}function c(e,t){"use strict";return"\xa8E"+t.charCodeAt(0)+"E"}t.helper={},t.extensions={},t.setOption=function(e,t){"use strict";return o[e]=t,this},t.getOption=function(e){"use strict";return o[e]},t.getOptions=function(){"use strict";return o},t.resetOptions=function(){"use strict";o=e(!0)},t.setFlavor=function(e){"use strict";if(!s.hasOwnProperty(e))throw Error(e+" flavor was not found");t.resetOptions();var r=s[e];for(var n in i=e,r)r.hasOwnProperty(n)&&(o[n]=r[n])},t.getFlavor=function(){"use strict";return i},t.getFlavorOptions=function(e){"use strict";if(s.hasOwnProperty(e))return s[e]},t.getDefaultOptions=function(t){"use strict";return e(t)},t.subParser=function(e,n){"use strict";if(t.helper.isString(e)){if(void 0===n){if(r.hasOwnProperty(e))return r[e];throw Error("SubParser named "+e+" not registered!")}r[e]=n}},t.extension=function(e,r){"use strict";if(!t.helper.isString(e))throw Error("Extension 'name' must be a string");if(e=t.helper.stdExtName(e),t.helper.isUndefined(r)){if(!n.hasOwnProperty(e))throw Error("Extension named "+e+" is not registered!");return n[e]}"function"==typeof r&&(r=r()),t.helper.isArray(r)||(r=[r]);var o=a(r,e);if(!o.valid)throw Error(o.error);n[e]=r},t.getAllExtensions=function(){"use strict";return n},t.removeExtension=function(e){"use strict";delete n[e]},t.resetExtensions=function(){"use strict";n={}},t.validateExtension=function(e){"use strict";var t=a(e,null);return!!t.valid||(console.warn(t.error),!1)},t.hasOwnProperty("helper")||(t.helper={}),t.helper.isString=function(e){"use strict";return"string"==typeof e||e instanceof String},t.helper.isFunction=function(e){"use strict";return e&&"[object Function]"==={}.toString.call(e)},t.helper.isArray=function(e){"use strict";return Array.isArray(e)},t.helper.isUndefined=function(e){"use strict";return void 0===e},t.helper.forEach=function(e,r){"use strict";if(t.helper.isUndefined(e))throw new Error("obj param is required");if(t.helper.isUndefined(r))throw new Error("callback param is required");if(!t.helper.isFunction(r))throw new Error("callback param must be a function/closure");if("function"==typeof e.forEach)e.forEach(r);else if(t.helper.isArray(e))for(var n=0;n<e.length;n++)r(e[n],n,e);else{if("object"!=typeof e)throw new Error("obj does not seem to be an array or an iterable object");for(var o in e)e.hasOwnProperty(o)&&r(e[o],o,e)}},t.helper.stdExtName=function(e){"use strict";return e.replace(/[_?*+\/\\.^-]/g,"").replace(/\s/g,"").toLowerCase()},t.helper.escapeCharactersCallback=c,t.helper.escapeCharacters=function(e,t,r){"use strict";var n="(["+t.replace(/([\[\]\\])/g,"\\$1")+"])";r&&(n="\\\\"+n);var o=new RegExp(n,"g");return e.replace(o,c)},t.helper.unescapeHTMLEntities=function(e){"use strict";return e.replace(/&quot;/g,'"').replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&")};var u=function(e,t,r,n){"use strict";var o,i,s,a,c,u=n||"",l=u.indexOf("g")>-1,p=new RegExp(t+"|"+r,"g"+u.replace(/g/g,"")),d=new RegExp(t,u.replace(/g/g,"")),f=[];do{for(o=0;s=p.exec(e);)if(d.test(s[0]))o++||(a=(i=p.lastIndex)-s[0].length);else if(o&&!--o){c=s.index+s[0].length;var h={left:{start:a,end:i},match:{start:i,end:s.index},right:{start:s.index,end:c},wholeMatch:{start:a,end:c}};if(f.push(h),!l)return f}}while(o&&(p.lastIndex=i));return f};t.helper.matchRecursiveRegExp=function(e,t,r,n){"use strict";for(var o=u(e,t,r,n),i=[],s=0;s<o.length;++s)i.push([e.slice(o[s].wholeMatch.start,o[s].wholeMatch.end),e.slice(o[s].match.start,o[s].match.end),e.slice(o[s].left.start,o[s].left.end),e.slice(o[s].right.start,o[s].right.end)]);return i},t.helper.replaceRecursiveRegExp=function(e,r,n,o,i){"use strict";if(!t.helper.isFunction(r)){var s=r;r=function(){return s}}var a=u(e,n,o,i),c=e,l=a.length;if(l>0){var p=[];0!==a[0].wholeMatch.start&&p.push(e.slice(0,a[0].wholeMatch.start));for(var d=0;d<l;++d)p.push(r(e.slice(a[d].wholeMatch.start,a[d].wholeMatch.end),e.slice(a[d].match.start,a[d].match.end),e.slice(a[d].left.start,a[d].left.end),e.slice(a[d].right.start,a[d].right.end))),d<l-1&&p.push(e.slice(a[d].wholeMatch.end,a[d+1].wholeMatch.start));a[l-1].wholeMatch.end<e.length&&p.push(e.slice(a[l-1].wholeMatch.end)),c=p.join("")}return c},t.helper.regexIndexOf=function(e,r,n){"use strict";if(!t.helper.isString(e))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";if(r instanceof RegExp==0)throw"InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp";var o=e.substring(n||0).search(r);return o>=0?o+(n||0):o},t.helper.splitAtIndex=function(e,r){"use strict";if(!t.helper.isString(e))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";return[e.substring(0,r),e.substring(r)]},t.helper.encodeEmailAddress=function(e){"use strict";var t=[function(e){return"&#"+e.charCodeAt(0)+";"},function(e){return"&#x"+e.charCodeAt(0).toString(16)+";"},function(e){return e}];return e.replace(/./g,function(e){if("@"===e)e=t[Math.floor(2*Math.random())](e);else{var r=Math.random();e=r>.9?t[2](e):r>.45?t[1](e):t[0](e)}return e})},t.helper.padEnd=function(e,t,r){"use strict";return t>>=0,r=String(r||" "),e.length>t?String(e):((t-=e.length)>r.length&&(r+=r.repeat(t/r.length)),String(e)+r.slice(0,t))},"undefined"==typeof console&&(console={warn:function(e){"use strict";alert(e)},log:function(e){"use strict";alert(e)},error:function(e){"use strict";throw e}}),t.helper.regexes={asteriskDashAndColon:/([*_:~])/g},t.helper.emojis={"+1":"\ud83d\udc4d","-1":"\ud83d\udc4e",100:"\ud83d\udcaf",1234:"\ud83d\udd22","1st_place_medal":"\ud83e\udd47","2nd_place_medal":"\ud83e\udd48","3rd_place_medal":"\ud83e\udd49","8ball":"\ud83c\udfb1",a:"\ud83c\udd70\ufe0f",ab:"\ud83c\udd8e",abc:"\ud83d\udd24",abcd:"\ud83d\udd21",accept:"\ud83c\ude51",aerial_tramway:"\ud83d\udea1",airplane:"\u2708\ufe0f",alarm_clock:"\u23f0",alembic:"\u2697\ufe0f",alien:"\ud83d\udc7d",ambulance:"\ud83d\ude91",amphora:"\ud83c\udffa",anchor:"\u2693\ufe0f",angel:"\ud83d\udc7c",anger:"\ud83d\udca2",angry:"\ud83d\ude20",anguished:"\ud83d\ude27",ant:"\ud83d\udc1c",apple:"\ud83c\udf4e",aquarius:"\u2652\ufe0f",aries:"\u2648\ufe0f",arrow_backward:"\u25c0\ufe0f",arrow_double_down:"\u23ec",arrow_double_up:"\u23eb",arrow_down:"\u2b07\ufe0f",arrow_down_small:"\ud83d\udd3d",arrow_forward:"\u25b6\ufe0f",arrow_heading_down:"\u2935\ufe0f",arrow_heading_up:"\u2934\ufe0f",arrow_left:"\u2b05\ufe0f",arrow_lower_left:"\u2199\ufe0f",arrow_lower_right:"\u2198\ufe0f",arrow_right:"\u27a1\ufe0f",arrow_right_hook:"\u21aa\ufe0f",arrow_up:"\u2b06\ufe0f",arrow_up_down:"\u2195\ufe0f",arrow_up_small:"\ud83d\udd3c",arrow_upper_left:"\u2196\ufe0f",arrow_upper_right:"\u2197\ufe0f",arrows_clockwise:"\ud83d\udd03",arrows_counterclockwise:"\ud83d\udd04",art:"\ud83c\udfa8",articulated_lorry:"\ud83d\ude9b",artificial_satellite:"\ud83d\udef0",astonished:"\ud83d\ude32",athletic_shoe:"\ud83d\udc5f",atm:"\ud83c\udfe7",atom_symbol:"\u269b\ufe0f",avocado:"\ud83e\udd51",b:"\ud83c\udd71\ufe0f",baby:"\ud83d\udc76",baby_bottle:"\ud83c\udf7c",baby_chick:"\ud83d\udc24",baby_symbol:"\ud83d\udebc",back:"\ud83d\udd19",bacon:"\ud83e\udd53",badminton:"\ud83c\udff8",baggage_claim:"\ud83d\udec4",baguette_bread:"\ud83e\udd56",balance_scale:"\u2696\ufe0f",balloon:"\ud83c\udf88",ballot_box:"\ud83d\uddf3",ballot_box_with_check:"\u2611\ufe0f",bamboo:"\ud83c\udf8d",banana:"\ud83c\udf4c",bangbang:"\u203c\ufe0f",bank:"\ud83c\udfe6",bar_chart:"\ud83d\udcca",barber:"\ud83d\udc88",baseball:"\u26be\ufe0f",basketball:"\ud83c\udfc0",basketball_man:"\u26f9\ufe0f",basketball_woman:"\u26f9\ufe0f&zwj;\u2640\ufe0f",bat:"\ud83e\udd87",bath:"\ud83d\udec0",bathtub:"\ud83d\udec1",battery:"\ud83d\udd0b",beach_umbrella:"\ud83c\udfd6",bear:"\ud83d\udc3b",bed:"\ud83d\udecf",bee:"\ud83d\udc1d",beer:"\ud83c\udf7a",beers:"\ud83c\udf7b",beetle:"\ud83d\udc1e",beginner:"\ud83d\udd30",bell:"\ud83d\udd14",bellhop_bell:"\ud83d\udece",bento:"\ud83c\udf71",biking_man:"\ud83d\udeb4",bike:"\ud83d\udeb2",biking_woman:"\ud83d\udeb4&zwj;\u2640\ufe0f",bikini:"\ud83d\udc59",biohazard:"\u2623\ufe0f",bird:"\ud83d\udc26",birthday:"\ud83c\udf82",black_circle:"\u26ab\ufe0f",black_flag:"\ud83c\udff4",black_heart:"\ud83d\udda4",black_joker:"\ud83c\udccf",black_large_square:"\u2b1b\ufe0f",black_medium_small_square:"\u25fe\ufe0f",black_medium_square:"\u25fc\ufe0f",black_nib:"\u2712\ufe0f",black_small_square:"\u25aa\ufe0f",black_square_button:"\ud83d\udd32",blonde_man:"\ud83d\udc71",blonde_woman:"\ud83d\udc71&zwj;\u2640\ufe0f",blossom:"\ud83c\udf3c",blowfish:"\ud83d\udc21",blue_book:"\ud83d\udcd8",blue_car:"\ud83d\ude99",blue_heart:"\ud83d\udc99",blush:"\ud83d\ude0a",boar:"\ud83d\udc17",boat:"\u26f5\ufe0f",bomb:"\ud83d\udca3",book:"\ud83d\udcd6",bookmark:"\ud83d\udd16",bookmark_tabs:"\ud83d\udcd1",books:"\ud83d\udcda",boom:"\ud83d\udca5",boot:"\ud83d\udc62",bouquet:"\ud83d\udc90",bowing_man:"\ud83d\ude47",bow_and_arrow:"\ud83c\udff9",bowing_woman:"\ud83d\ude47&zwj;\u2640\ufe0f",bowling:"\ud83c\udfb3",boxing_glove:"\ud83e\udd4a",boy:"\ud83d\udc66",bread:"\ud83c\udf5e",bride_with_veil:"\ud83d\udc70",bridge_at_night:"\ud83c\udf09",briefcase:"\ud83d\udcbc",broken_heart:"\ud83d\udc94",bug:"\ud83d\udc1b",building_construction:"\ud83c\udfd7",bulb:"\ud83d\udca1",bullettrain_front:"\ud83d\ude85",bullettrain_side:"\ud83d\ude84",burrito:"\ud83c\udf2f",bus:"\ud83d\ude8c",business_suit_levitating:"\ud83d\udd74",busstop:"\ud83d\ude8f",bust_in_silhouette:"\ud83d\udc64",busts_in_silhouette:"\ud83d\udc65",butterfly:"\ud83e\udd8b",cactus:"\ud83c\udf35",cake:"\ud83c\udf70",calendar:"\ud83d\udcc6",call_me_hand:"\ud83e\udd19",calling:"\ud83d\udcf2",camel:"\ud83d\udc2b",camera:"\ud83d\udcf7",camera_flash:"\ud83d\udcf8",camping:"\ud83c\udfd5",cancer:"\u264b\ufe0f",candle:"\ud83d\udd6f",candy:"\ud83c\udf6c",canoe:"\ud83d\udef6",capital_abcd:"\ud83d\udd20",capricorn:"\u2651\ufe0f",car:"\ud83d\ude97",card_file_box:"\ud83d\uddc3",card_index:"\ud83d\udcc7",card_index_dividers:"\ud83d\uddc2",carousel_horse:"\ud83c\udfa0",carrot:"\ud83e\udd55",cat:"\ud83d\udc31",cat2:"\ud83d\udc08",cd:"\ud83d\udcbf",chains:"\u26d3",champagne:"\ud83c\udf7e",chart:"\ud83d\udcb9",chart_with_downwards_trend:"\ud83d\udcc9",chart_with_upwards_trend:"\ud83d\udcc8",checkered_flag:"\ud83c\udfc1",cheese:"\ud83e\uddc0",cherries:"\ud83c\udf52",cherry_blossom:"\ud83c\udf38",chestnut:"\ud83c\udf30",chicken:"\ud83d\udc14",children_crossing:"\ud83d\udeb8",chipmunk:"\ud83d\udc3f",chocolate_bar:"\ud83c\udf6b",christmas_tree:"\ud83c\udf84",church:"\u26ea\ufe0f",cinema:"\ud83c\udfa6",circus_tent:"\ud83c\udfaa",city_sunrise:"\ud83c\udf07",city_sunset:"\ud83c\udf06",cityscape:"\ud83c\udfd9",cl:"\ud83c\udd91",clamp:"\ud83d\udddc",clap:"\ud83d\udc4f",clapper:"\ud83c\udfac",classical_building:"\ud83c\udfdb",clinking_glasses:"\ud83e\udd42",clipboard:"\ud83d\udccb",clock1:"\ud83d\udd50",clock10:"\ud83d\udd59",clock1030:"\ud83d\udd65",clock11:"\ud83d\udd5a",clock1130:"\ud83d\udd66",clock12:"\ud83d\udd5b",clock1230:"\ud83d\udd67",clock130:"\ud83d\udd5c",clock2:"\ud83d\udd51",clock230:"\ud83d\udd5d",clock3:"\ud83d\udd52",clock330:"\ud83d\udd5e",clock4:"\ud83d\udd53",clock430:"\ud83d\udd5f",clock5:"\ud83d\udd54",clock530:"\ud83d\udd60",clock6:"\ud83d\udd55",clock630:"\ud83d\udd61",clock7:"\ud83d\udd56",clock730:"\ud83d\udd62",clock8:"\ud83d\udd57",clock830:"\ud83d\udd63",clock9:"\ud83d\udd58",clock930:"\ud83d\udd64",closed_book:"\ud83d\udcd5",closed_lock_with_key:"\ud83d\udd10",closed_umbrella:"\ud83c\udf02",cloud:"\u2601\ufe0f",cloud_with_lightning:"\ud83c\udf29",cloud_with_lightning_and_rain:"\u26c8",cloud_with_rain:"\ud83c\udf27",cloud_with_snow:"\ud83c\udf28",clown_face:"\ud83e\udd21",clubs:"\u2663\ufe0f",cocktail:"\ud83c\udf78",coffee:"\u2615\ufe0f",coffin:"\u26b0\ufe0f",cold_sweat:"\ud83d\ude30",comet:"\u2604\ufe0f",computer:"\ud83d\udcbb",computer_mouse:"\ud83d\uddb1",confetti_ball:"\ud83c\udf8a",confounded:"\ud83d\ude16",confused:"\ud83d\ude15",congratulations:"\u3297\ufe0f",construction:"\ud83d\udea7",construction_worker_man:"\ud83d\udc77",construction_worker_woman:"\ud83d\udc77&zwj;\u2640\ufe0f",control_knobs:"\ud83c\udf9b",convenience_store:"\ud83c\udfea",cookie:"\ud83c\udf6a",cool:"\ud83c\udd92",policeman:"\ud83d\udc6e",copyright:"\xa9\ufe0f",corn:"\ud83c\udf3d",couch_and_lamp:"\ud83d\udecb",couple:"\ud83d\udc6b",couple_with_heart_woman_man:"\ud83d\udc91",couple_with_heart_man_man:"\ud83d\udc68&zwj;\u2764\ufe0f&zwj;\ud83d\udc68",couple_with_heart_woman_woman:"\ud83d\udc69&zwj;\u2764\ufe0f&zwj;\ud83d\udc69",couplekiss_man_man:"\ud83d\udc68&zwj;\u2764\ufe0f&zwj;\ud83d\udc8b&zwj;\ud83d\udc68",couplekiss_man_woman:"\ud83d\udc8f",couplekiss_woman_woman:"\ud83d\udc69&zwj;\u2764\ufe0f&zwj;\ud83d\udc8b&zwj;\ud83d\udc69",cow:"\ud83d\udc2e",cow2:"\ud83d\udc04",cowboy_hat_face:"\ud83e\udd20",crab:"\ud83e\udd80",crayon:"\ud83d\udd8d",credit_card:"\ud83d\udcb3",crescent_moon:"\ud83c\udf19",cricket:"\ud83c\udfcf",crocodile:"\ud83d\udc0a",croissant:"\ud83e\udd50",crossed_fingers:"\ud83e\udd1e",crossed_flags:"\ud83c\udf8c",crossed_swords:"\u2694\ufe0f",crown:"\ud83d\udc51",cry:"\ud83d\ude22",crying_cat_face:"\ud83d\ude3f",crystal_ball:"\ud83d\udd2e",cucumber:"\ud83e\udd52",cupid:"\ud83d\udc98",curly_loop:"\u27b0",currency_exchange:"\ud83d\udcb1",curry:"\ud83c\udf5b",custard:"\ud83c\udf6e",customs:"\ud83d\udec3",cyclone:"\ud83c\udf00",dagger:"\ud83d\udde1",dancer:"\ud83d\udc83",dancing_women:"\ud83d\udc6f",dancing_men:"\ud83d\udc6f&zwj;\u2642\ufe0f",dango:"\ud83c\udf61",dark_sunglasses:"\ud83d\udd76",dart:"\ud83c\udfaf",dash:"\ud83d\udca8",date:"\ud83d\udcc5",deciduous_tree:"\ud83c\udf33",deer:"\ud83e\udd8c",department_store:"\ud83c\udfec",derelict_house:"\ud83c\udfda",desert:"\ud83c\udfdc",desert_island:"\ud83c\udfdd",desktop_computer:"\ud83d\udda5",male_detective:"\ud83d\udd75\ufe0f",diamond_shape_with_a_dot_inside:"\ud83d\udca0",diamonds:"\u2666\ufe0f",disappointed:"\ud83d\ude1e",disappointed_relieved:"\ud83d\ude25",dizzy:"\ud83d\udcab",dizzy_face:"\ud83d\ude35",do_not_litter:"\ud83d\udeaf",dog:"\ud83d\udc36",dog2:"\ud83d\udc15",dollar:"\ud83d\udcb5",dolls:"\ud83c\udf8e",dolphin:"\ud83d\udc2c",door:"\ud83d\udeaa",doughnut:"\ud83c\udf69",dove:"\ud83d\udd4a",dragon:"\ud83d\udc09",dragon_face:"\ud83d\udc32",dress:"\ud83d\udc57",dromedary_camel:"\ud83d\udc2a",drooling_face:"\ud83e\udd24",droplet:"\ud83d\udca7",drum:"\ud83e\udd41",duck:"\ud83e\udd86",dvd:"\ud83d\udcc0","e-mail":"\ud83d\udce7",eagle:"\ud83e\udd85",ear:"\ud83d\udc42",ear_of_rice:"\ud83c\udf3e",earth_africa:"\ud83c\udf0d",earth_americas:"\ud83c\udf0e",earth_asia:"\ud83c\udf0f",egg:"\ud83e\udd5a",eggplant:"\ud83c\udf46",eight_pointed_black_star:"\u2734\ufe0f",eight_spoked_asterisk:"\u2733\ufe0f",electric_plug:"\ud83d\udd0c",elephant:"\ud83d\udc18",email:"\u2709\ufe0f",end:"\ud83d\udd1a",envelope_with_arrow:"\ud83d\udce9",euro:"\ud83d\udcb6",european_castle:"\ud83c\udff0",european_post_office:"\ud83c\udfe4",evergreen_tree:"\ud83c\udf32",exclamation:"\u2757\ufe0f",expressionless:"\ud83d\ude11",eye:"\ud83d\udc41",eye_speech_bubble:"\ud83d\udc41&zwj;\ud83d\udde8",eyeglasses:"\ud83d\udc53",eyes:"\ud83d\udc40",face_with_head_bandage:"\ud83e\udd15",face_with_thermometer:"\ud83e\udd12",fist_oncoming:"\ud83d\udc4a",factory:"\ud83c\udfed",fallen_leaf:"\ud83c\udf42",family_man_woman_boy:"\ud83d\udc6a",family_man_boy:"\ud83d\udc68&zwj;\ud83d\udc66",family_man_boy_boy:"\ud83d\udc68&zwj;\ud83d\udc66&zwj;\ud83d\udc66",family_man_girl:"\ud83d\udc68&zwj;\ud83d\udc67",family_man_girl_boy:"\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc66",family_man_girl_girl:"\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc67",family_man_man_boy:"\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc66",family_man_man_boy_boy:"\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc66&zwj;\ud83d\udc66",family_man_man_girl:"\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67",family_man_man_girl_boy:"\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc66",family_man_man_girl_girl:"\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc67",family_man_woman_boy_boy:"\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66",family_man_woman_girl:"\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67",family_man_woman_girl_boy:"\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66",family_man_woman_girl_girl:"\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67",family_woman_boy:"\ud83d\udc69&zwj;\ud83d\udc66",family_woman_boy_boy:"\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66",family_woman_girl:"\ud83d\udc69&zwj;\ud83d\udc67",family_woman_girl_boy:"\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66",family_woman_girl_girl:"\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67",family_woman_woman_boy:"\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc66",family_woman_woman_boy_boy:"\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66",family_woman_woman_girl:"\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67",family_woman_woman_girl_boy:"\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66",family_woman_woman_girl_girl:"\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67",fast_forward:"\u23e9",fax:"\ud83d\udce0",fearful:"\ud83d\ude28",feet:"\ud83d\udc3e",female_detective:"\ud83d\udd75\ufe0f&zwj;\u2640\ufe0f",ferris_wheel:"\ud83c\udfa1",ferry:"\u26f4",field_hockey:"\ud83c\udfd1",file_cabinet:"\ud83d\uddc4",file_folder:"\ud83d\udcc1",film_projector:"\ud83d\udcfd",film_strip:"\ud83c\udf9e",fire:"\ud83d\udd25",fire_engine:"\ud83d\ude92",fireworks:"\ud83c\udf86",first_quarter_moon:"\ud83c\udf13",first_quarter_moon_with_face:"\ud83c\udf1b",fish:"\ud83d\udc1f",fish_cake:"\ud83c\udf65",fishing_pole_and_fish:"\ud83c\udfa3",fist_raised:"\u270a",fist_left:"\ud83e\udd1b",fist_right:"\ud83e\udd1c",flags:"\ud83c\udf8f",flashlight:"\ud83d\udd26",fleur_de_lis:"\u269c\ufe0f",flight_arrival:"\ud83d\udeec",flight_departure:"\ud83d\udeeb",floppy_disk:"\ud83d\udcbe",flower_playing_cards:"\ud83c\udfb4",flushed:"\ud83d\ude33",fog:"\ud83c\udf2b",foggy:"\ud83c\udf01",football:"\ud83c\udfc8",footprints:"\ud83d\udc63",fork_and_knife:"\ud83c\udf74",fountain:"\u26f2\ufe0f",fountain_pen:"\ud83d\udd8b",four_leaf_clover:"\ud83c\udf40",fox_face:"\ud83e\udd8a",framed_picture:"\ud83d\uddbc",free:"\ud83c\udd93",fried_egg:"\ud83c\udf73",fried_shrimp:"\ud83c\udf64",fries:"\ud83c\udf5f",frog:"\ud83d\udc38",frowning:"\ud83d\ude26",frowning_face:"\u2639\ufe0f",frowning_man:"\ud83d\ude4d&zwj;\u2642\ufe0f",frowning_woman:"\ud83d\ude4d",middle_finger:"\ud83d\udd95",fuelpump:"\u26fd\ufe0f",full_moon:"\ud83c\udf15",full_moon_with_face:"\ud83c\udf1d",funeral_urn:"\u26b1\ufe0f",game_die:"\ud83c\udfb2",gear:"\u2699\ufe0f",gem:"\ud83d\udc8e",gemini:"\u264a\ufe0f",ghost:"\ud83d\udc7b",gift:"\ud83c\udf81",gift_heart:"\ud83d\udc9d",girl:"\ud83d\udc67",globe_with_meridians:"\ud83c\udf10",goal_net:"\ud83e\udd45",goat:"\ud83d\udc10",golf:"\u26f3\ufe0f",golfing_man:"\ud83c\udfcc\ufe0f",golfing_woman:"\ud83c\udfcc\ufe0f&zwj;\u2640\ufe0f",gorilla:"\ud83e\udd8d",grapes:"\ud83c\udf47",green_apple:"\ud83c\udf4f",green_book:"\ud83d\udcd7",green_heart:"\ud83d\udc9a",green_salad:"\ud83e\udd57",grey_exclamation:"\u2755",grey_question:"\u2754",grimacing:"\ud83d\ude2c",grin:"\ud83d\ude01",grinning:"\ud83d\ude00",guardsman:"\ud83d\udc82",guardswoman:"\ud83d\udc82&zwj;\u2640\ufe0f",guitar:"\ud83c\udfb8",gun:"\ud83d\udd2b",haircut_woman:"\ud83d\udc87",haircut_man:"\ud83d\udc87&zwj;\u2642\ufe0f",hamburger:"\ud83c\udf54",hammer:"\ud83d\udd28",hammer_and_pick:"\u2692",hammer_and_wrench:"\ud83d\udee0",hamster:"\ud83d\udc39",hand:"\u270b",handbag:"\ud83d\udc5c",handshake:"\ud83e\udd1d",hankey:"\ud83d\udca9",hatched_chick:"\ud83d\udc25",hatching_chick:"\ud83d\udc23",headphones:"\ud83c\udfa7",hear_no_evil:"\ud83d\ude49",heart:"\u2764\ufe0f",heart_decoration:"\ud83d\udc9f",heart_eyes:"\ud83d\ude0d",heart_eyes_cat:"\ud83d\ude3b",heartbeat:"\ud83d\udc93",heartpulse:"\ud83d\udc97",hearts:"\u2665\ufe0f",heavy_check_mark:"\u2714\ufe0f",heavy_division_sign:"\u2797",heavy_dollar_sign:"\ud83d\udcb2",heavy_heart_exclamation:"\u2763\ufe0f",heavy_minus_sign:"\u2796",heavy_multiplication_x:"\u2716\ufe0f",heavy_plus_sign:"\u2795",helicopter:"\ud83d\ude81",herb:"\ud83c\udf3f",hibiscus:"\ud83c\udf3a",high_brightness:"\ud83d\udd06",high_heel:"\ud83d\udc60",hocho:"\ud83d\udd2a",hole:"\ud83d\udd73",honey_pot:"\ud83c\udf6f",horse:"\ud83d\udc34",horse_racing:"\ud83c\udfc7",hospital:"\ud83c\udfe5",hot_pepper:"\ud83c\udf36",hotdog:"\ud83c\udf2d",hotel:"\ud83c\udfe8",hotsprings:"\u2668\ufe0f",hourglass:"\u231b\ufe0f",hourglass_flowing_sand:"\u23f3",house:"\ud83c\udfe0",house_with_garden:"\ud83c\udfe1",houses:"\ud83c\udfd8",hugs:"\ud83e\udd17",hushed:"\ud83d\ude2f",ice_cream:"\ud83c\udf68",ice_hockey:"\ud83c\udfd2",ice_skate:"\u26f8",icecream:"\ud83c\udf66",id:"\ud83c\udd94",ideograph_advantage:"\ud83c\ude50",imp:"\ud83d\udc7f",inbox_tray:"\ud83d\udce5",incoming_envelope:"\ud83d\udce8",tipping_hand_woman:"\ud83d\udc81",information_source:"\u2139\ufe0f",innocent:"\ud83d\ude07",interrobang:"\u2049\ufe0f",iphone:"\ud83d\udcf1",izakaya_lantern:"\ud83c\udfee",jack_o_lantern:"\ud83c\udf83",japan:"\ud83d\uddfe",japanese_castle:"\ud83c\udfef",japanese_goblin:"\ud83d\udc7a",japanese_ogre:"\ud83d\udc79",jeans:"\ud83d\udc56",joy:"\ud83d\ude02",joy_cat:"\ud83d\ude39",joystick:"\ud83d\udd79",kaaba:"\ud83d\udd4b",key:"\ud83d\udd11",keyboard:"\u2328\ufe0f",keycap_ten:"\ud83d\udd1f",kick_scooter:"\ud83d\udef4",kimono:"\ud83d\udc58",kiss:"\ud83d\udc8b",kissing:"\ud83d\ude17",kissing_cat:"\ud83d\ude3d",kissing_closed_eyes:"\ud83d\ude1a",kissing_heart:"\ud83d\ude18",kissing_smiling_eyes:"\ud83d\ude19",kiwi_fruit:"\ud83e\udd5d",koala:"\ud83d\udc28",koko:"\ud83c\ude01",label:"\ud83c\udff7",large_blue_circle:"\ud83d\udd35",large_blue_diamond:"\ud83d\udd37",large_orange_diamond:"\ud83d\udd36",last_quarter_moon:"\ud83c\udf17",last_quarter_moon_with_face:"\ud83c\udf1c",latin_cross:"\u271d\ufe0f",laughing:"\ud83d\ude06",leaves:"\ud83c\udf43",ledger:"\ud83d\udcd2",left_luggage:"\ud83d\udec5",left_right_arrow:"\u2194\ufe0f",leftwards_arrow_with_hook:"\u21a9\ufe0f",lemon:"\ud83c\udf4b",leo:"\u264c\ufe0f",leopard:"\ud83d\udc06",level_slider:"\ud83c\udf9a",libra:"\u264e\ufe0f",light_rail:"\ud83d\ude88",link:"\ud83d\udd17",lion:"\ud83e\udd81",lips:"\ud83d\udc44",lipstick:"\ud83d\udc84",lizard:"\ud83e\udd8e",lock:"\ud83d\udd12",lock_with_ink_pen:"\ud83d\udd0f",lollipop:"\ud83c\udf6d",loop:"\u27bf",loud_sound:"\ud83d\udd0a",loudspeaker:"\ud83d\udce2",love_hotel:"\ud83c\udfe9",love_letter:"\ud83d\udc8c",low_brightness:"\ud83d\udd05",lying_face:"\ud83e\udd25",m:"\u24c2\ufe0f",mag:"\ud83d\udd0d",mag_right:"\ud83d\udd0e",mahjong:"\ud83c\udc04\ufe0f",mailbox:"\ud83d\udceb",mailbox_closed:"\ud83d\udcea",mailbox_with_mail:"\ud83d\udcec",mailbox_with_no_mail:"\ud83d\udced",man:"\ud83d\udc68",man_artist:"\ud83d\udc68&zwj;\ud83c\udfa8",man_astronaut:"\ud83d\udc68&zwj;\ud83d\ude80",man_cartwheeling:"\ud83e\udd38&zwj;\u2642\ufe0f",man_cook:"\ud83d\udc68&zwj;\ud83c\udf73",man_dancing:"\ud83d\udd7a",man_facepalming:"\ud83e\udd26&zwj;\u2642\ufe0f",man_factory_worker:"\ud83d\udc68&zwj;\ud83c\udfed",man_farmer:"\ud83d\udc68&zwj;\ud83c\udf3e",man_firefighter:"\ud83d\udc68&zwj;\ud83d\ude92",man_health_worker:"\ud83d\udc68&zwj;\u2695\ufe0f",man_in_tuxedo:"\ud83e\udd35",man_judge:"\ud83d\udc68&zwj;\u2696\ufe0f",man_juggling:"\ud83e\udd39&zwj;\u2642\ufe0f",man_mechanic:"\ud83d\udc68&zwj;\ud83d\udd27",man_office_worker:"\ud83d\udc68&zwj;\ud83d\udcbc",man_pilot:"\ud83d\udc68&zwj;\u2708\ufe0f",man_playing_handball:"\ud83e\udd3e&zwj;\u2642\ufe0f",man_playing_water_polo:"\ud83e\udd3d&zwj;\u2642\ufe0f",man_scientist:"\ud83d\udc68&zwj;\ud83d\udd2c",man_shrugging:"\ud83e\udd37&zwj;\u2642\ufe0f",man_singer:"\ud83d\udc68&zwj;\ud83c\udfa4",man_student:"\ud83d\udc68&zwj;\ud83c\udf93",man_teacher:"\ud83d\udc68&zwj;\ud83c\udfeb",man_technologist:"\ud83d\udc68&zwj;\ud83d\udcbb",man_with_gua_pi_mao:"\ud83d\udc72",man_with_turban:"\ud83d\udc73",tangerine:"\ud83c\udf4a",mans_shoe:"\ud83d\udc5e",mantelpiece_clock:"\ud83d\udd70",maple_leaf:"\ud83c\udf41",martial_arts_uniform:"\ud83e\udd4b",mask:"\ud83d\ude37",massage_woman:"\ud83d\udc86",massage_man:"\ud83d\udc86&zwj;\u2642\ufe0f",meat_on_bone:"\ud83c\udf56",medal_military:"\ud83c\udf96",medal_sports:"\ud83c\udfc5",mega:"\ud83d\udce3",melon:"\ud83c\udf48",memo:"\ud83d\udcdd",men_wrestling:"\ud83e\udd3c&zwj;\u2642\ufe0f",menorah:"\ud83d\udd4e",mens:"\ud83d\udeb9",metal:"\ud83e\udd18",metro:"\ud83d\ude87",microphone:"\ud83c\udfa4",microscope:"\ud83d\udd2c",milk_glass:"\ud83e\udd5b",milky_way:"\ud83c\udf0c",minibus:"\ud83d\ude90",minidisc:"\ud83d\udcbd",mobile_phone_off:"\ud83d\udcf4",money_mouth_face:"\ud83e\udd11",money_with_wings:"\ud83d\udcb8",moneybag:"\ud83d\udcb0",monkey:"\ud83d\udc12",monkey_face:"\ud83d\udc35",monorail:"\ud83d\ude9d",moon:"\ud83c\udf14",mortar_board:"\ud83c\udf93",mosque:"\ud83d\udd4c",motor_boat:"\ud83d\udee5",motor_scooter:"\ud83d\udef5",motorcycle:"\ud83c\udfcd",motorway:"\ud83d\udee3",mount_fuji:"\ud83d\uddfb",mountain:"\u26f0",mountain_biking_man:"\ud83d\udeb5",mountain_biking_woman:"\ud83d\udeb5&zwj;\u2640\ufe0f",mountain_cableway:"\ud83d\udea0",mountain_railway:"\ud83d\ude9e",mountain_snow:"\ud83c\udfd4",mouse:"\ud83d\udc2d",mouse2:"\ud83d\udc01",movie_camera:"\ud83c\udfa5",moyai:"\ud83d\uddff",mrs_claus:"\ud83e\udd36",muscle:"\ud83d\udcaa",mushroom:"\ud83c\udf44",musical_keyboard:"\ud83c\udfb9",musical_note:"\ud83c\udfb5",musical_score:"\ud83c\udfbc",mute:"\ud83d\udd07",nail_care:"\ud83d\udc85",name_badge:"\ud83d\udcdb",national_park:"\ud83c\udfde",nauseated_face:"\ud83e\udd22",necktie:"\ud83d\udc54",negative_squared_cross_mark:"\u274e",nerd_face:"\ud83e\udd13",neutral_face:"\ud83d\ude10",new:"\ud83c\udd95",new_moon:"\ud83c\udf11",new_moon_with_face:"\ud83c\udf1a",newspaper:"\ud83d\udcf0",newspaper_roll:"\ud83d\uddde",next_track_button:"\u23ed",ng:"\ud83c\udd96",no_good_man:"\ud83d\ude45&zwj;\u2642\ufe0f",no_good_woman:"\ud83d\ude45",night_with_stars:"\ud83c\udf03",no_bell:"\ud83d\udd15",no_bicycles:"\ud83d\udeb3",no_entry:"\u26d4\ufe0f",no_entry_sign:"\ud83d\udeab",no_mobile_phones:"\ud83d\udcf5",no_mouth:"\ud83d\ude36",no_pedestrians:"\ud83d\udeb7",no_smoking:"\ud83d\udead","non-potable_water":"\ud83d\udeb1",nose:"\ud83d\udc43",notebook:"\ud83d\udcd3",notebook_with_decorative_cover:"\ud83d\udcd4",notes:"\ud83c\udfb6",nut_and_bolt:"\ud83d\udd29",o:"\u2b55\ufe0f",o2:"\ud83c\udd7e\ufe0f",ocean:"\ud83c\udf0a",octopus:"\ud83d\udc19",oden:"\ud83c\udf62",office:"\ud83c\udfe2",oil_drum:"\ud83d\udee2",ok:"\ud83c\udd97",ok_hand:"\ud83d\udc4c",ok_man:"\ud83d\ude46&zwj;\u2642\ufe0f",ok_woman:"\ud83d\ude46",old_key:"\ud83d\udddd",older_man:"\ud83d\udc74",older_woman:"\ud83d\udc75",om:"\ud83d\udd49",on:"\ud83d\udd1b",oncoming_automobile:"\ud83d\ude98",oncoming_bus:"\ud83d\ude8d",oncoming_police_car:"\ud83d\ude94",oncoming_taxi:"\ud83d\ude96",open_file_folder:"\ud83d\udcc2",open_hands:"\ud83d\udc50",open_mouth:"\ud83d\ude2e",open_umbrella:"\u2602\ufe0f",ophiuchus:"\u26ce",orange_book:"\ud83d\udcd9",orthodox_cross:"\u2626\ufe0f",outbox_tray:"\ud83d\udce4",owl:"\ud83e\udd89",ox:"\ud83d\udc02",package:"\ud83d\udce6",page_facing_up:"\ud83d\udcc4",page_with_curl:"\ud83d\udcc3",pager:"\ud83d\udcdf",paintbrush:"\ud83d\udd8c",palm_tree:"\ud83c\udf34",pancakes:"\ud83e\udd5e",panda_face:"\ud83d\udc3c",paperclip:"\ud83d\udcce",paperclips:"\ud83d\udd87",parasol_on_ground:"\u26f1",parking:"\ud83c\udd7f\ufe0f",part_alternation_mark:"\u303d\ufe0f",partly_sunny:"\u26c5\ufe0f",passenger_ship:"\ud83d\udef3",passport_control:"\ud83d\udec2",pause_button:"\u23f8",peace_symbol:"\u262e\ufe0f",peach:"\ud83c\udf51",peanuts:"\ud83e\udd5c",pear:"\ud83c\udf50",pen:"\ud83d\udd8a",pencil2:"\u270f\ufe0f",penguin:"\ud83d\udc27",pensive:"\ud83d\ude14",performing_arts:"\ud83c\udfad",persevere:"\ud83d\ude23",person_fencing:"\ud83e\udd3a",pouting_woman:"\ud83d\ude4e",phone:"\u260e\ufe0f",pick:"\u26cf",pig:"\ud83d\udc37",pig2:"\ud83d\udc16",pig_nose:"\ud83d\udc3d",pill:"\ud83d\udc8a",pineapple:"\ud83c\udf4d",ping_pong:"\ud83c\udfd3",pisces:"\u2653\ufe0f",pizza:"\ud83c\udf55",place_of_worship:"\ud83d\uded0",plate_with_cutlery:"\ud83c\udf7d",play_or_pause_button:"\u23ef",point_down:"\ud83d\udc47",point_left:"\ud83d\udc48",point_right:"\ud83d\udc49",point_up:"\u261d\ufe0f",point_up_2:"\ud83d\udc46",police_car:"\ud83d\ude93",policewoman:"\ud83d\udc6e&zwj;\u2640\ufe0f",poodle:"\ud83d\udc29",popcorn:"\ud83c\udf7f",post_office:"\ud83c\udfe3",postal_horn:"\ud83d\udcef",postbox:"\ud83d\udcee",potable_water:"\ud83d\udeb0",potato:"\ud83e\udd54",pouch:"\ud83d\udc5d",poultry_leg:"\ud83c\udf57",pound:"\ud83d\udcb7",rage:"\ud83d\ude21",pouting_cat:"\ud83d\ude3e",pouting_man:"\ud83d\ude4e&zwj;\u2642\ufe0f",pray:"\ud83d\ude4f",prayer_beads:"\ud83d\udcff",pregnant_woman:"\ud83e\udd30",previous_track_button:"\u23ee",prince:"\ud83e\udd34",princess:"\ud83d\udc78",printer:"\ud83d\udda8",purple_heart:"\ud83d\udc9c",purse:"\ud83d\udc5b",pushpin:"\ud83d\udccc",put_litter_in_its_place:"\ud83d\udeae",question:"\u2753",rabbit:"\ud83d\udc30",rabbit2:"\ud83d\udc07",racehorse:"\ud83d\udc0e",racing_car:"\ud83c\udfce",radio:"\ud83d\udcfb",radio_button:"\ud83d\udd18",radioactive:"\u2622\ufe0f",railway_car:"\ud83d\ude83",railway_track:"\ud83d\udee4",rainbow:"\ud83c\udf08",rainbow_flag:"\ud83c\udff3\ufe0f&zwj;\ud83c\udf08",raised_back_of_hand:"\ud83e\udd1a",raised_hand_with_fingers_splayed:"\ud83d\udd90",raised_hands:"\ud83d\ude4c",raising_hand_woman:"\ud83d\ude4b",raising_hand_man:"\ud83d\ude4b&zwj;\u2642\ufe0f",ram:"\ud83d\udc0f",ramen:"\ud83c\udf5c",rat:"\ud83d\udc00",record_button:"\u23fa",recycle:"\u267b\ufe0f",red_circle:"\ud83d\udd34",registered:"\xae\ufe0f",relaxed:"\u263a\ufe0f",relieved:"\ud83d\ude0c",reminder_ribbon:"\ud83c\udf97",repeat:"\ud83d\udd01",repeat_one:"\ud83d\udd02",rescue_worker_helmet:"\u26d1",restroom:"\ud83d\udebb",revolving_hearts:"\ud83d\udc9e",rewind:"\u23ea",rhinoceros:"\ud83e\udd8f",ribbon:"\ud83c\udf80",rice:"\ud83c\udf5a",rice_ball:"\ud83c\udf59",rice_cracker:"\ud83c\udf58",rice_scene:"\ud83c\udf91",right_anger_bubble:"\ud83d\uddef",ring:"\ud83d\udc8d",robot:"\ud83e\udd16",rocket:"\ud83d\ude80",rofl:"\ud83e\udd23",roll_eyes:"\ud83d\ude44",roller_coaster:"\ud83c\udfa2",rooster:"\ud83d\udc13",rose:"\ud83c\udf39",rosette:"\ud83c\udff5",rotating_light:"\ud83d\udea8",round_pushpin:"\ud83d\udccd",rowing_man:"\ud83d\udea3",rowing_woman:"\ud83d\udea3&zwj;\u2640\ufe0f",rugby_football:"\ud83c\udfc9",running_man:"\ud83c\udfc3",running_shirt_with_sash:"\ud83c\udfbd",running_woman:"\ud83c\udfc3&zwj;\u2640\ufe0f",sa:"\ud83c\ude02\ufe0f",sagittarius:"\u2650\ufe0f",sake:"\ud83c\udf76",sandal:"\ud83d\udc61",santa:"\ud83c\udf85",satellite:"\ud83d\udce1",saxophone:"\ud83c\udfb7",school:"\ud83c\udfeb",school_satchel:"\ud83c\udf92",scissors:"\u2702\ufe0f",scorpion:"\ud83e\udd82",scorpius:"\u264f\ufe0f",scream:"\ud83d\ude31",scream_cat:"\ud83d\ude40",scroll:"\ud83d\udcdc",seat:"\ud83d\udcba",secret:"\u3299\ufe0f",see_no_evil:"\ud83d\ude48",seedling:"\ud83c\udf31",selfie:"\ud83e\udd33",shallow_pan_of_food:"\ud83e\udd58",shamrock:"\u2618\ufe0f",shark:"\ud83e\udd88",shaved_ice:"\ud83c\udf67",sheep:"\ud83d\udc11",shell:"\ud83d\udc1a",shield:"\ud83d\udee1",shinto_shrine:"\u26e9",ship:"\ud83d\udea2",shirt:"\ud83d\udc55",shopping:"\ud83d\udecd",shopping_cart:"\ud83d\uded2",shower:"\ud83d\udebf",shrimp:"\ud83e\udd90",signal_strength:"\ud83d\udcf6",six_pointed_star:"\ud83d\udd2f",ski:"\ud83c\udfbf",skier:"\u26f7",skull:"\ud83d\udc80",skull_and_crossbones:"\u2620\ufe0f",sleeping:"\ud83d\ude34",sleeping_bed:"\ud83d\udecc",sleepy:"\ud83d\ude2a",slightly_frowning_face:"\ud83d\ude41",slightly_smiling_face:"\ud83d\ude42",slot_machine:"\ud83c\udfb0",small_airplane:"\ud83d\udee9",small_blue_diamond:"\ud83d\udd39",small_orange_diamond:"\ud83d\udd38",small_red_triangle:"\ud83d\udd3a",small_red_triangle_down:"\ud83d\udd3b",smile:"\ud83d\ude04",smile_cat:"\ud83d\ude38",smiley:"\ud83d\ude03",smiley_cat:"\ud83d\ude3a",smiling_imp:"\ud83d\ude08",smirk:"\ud83d\ude0f",smirk_cat:"\ud83d\ude3c",smoking:"\ud83d\udeac",snail:"\ud83d\udc0c",snake:"\ud83d\udc0d",sneezing_face:"\ud83e\udd27",snowboarder:"\ud83c\udfc2",snowflake:"\u2744\ufe0f",snowman:"\u26c4\ufe0f",snowman_with_snow:"\u2603\ufe0f",sob:"\ud83d\ude2d",soccer:"\u26bd\ufe0f",soon:"\ud83d\udd1c",sos:"\ud83c\udd98",sound:"\ud83d\udd09",space_invader:"\ud83d\udc7e",spades:"\u2660\ufe0f",spaghetti:"\ud83c\udf5d",sparkle:"\u2747\ufe0f",sparkler:"\ud83c\udf87",sparkles:"\u2728",sparkling_heart:"\ud83d\udc96",speak_no_evil:"\ud83d\ude4a",speaker:"\ud83d\udd08",speaking_head:"\ud83d\udde3",speech_balloon:"\ud83d\udcac",speedboat:"\ud83d\udea4",spider:"\ud83d\udd77",spider_web:"\ud83d\udd78",spiral_calendar:"\ud83d\uddd3",spiral_notepad:"\ud83d\uddd2",spoon:"\ud83e\udd44",squid:"\ud83e\udd91",stadium:"\ud83c\udfdf",star:"\u2b50\ufe0f",star2:"\ud83c\udf1f",star_and_crescent:"\u262a\ufe0f",star_of_david:"\u2721\ufe0f",stars:"\ud83c\udf20",station:"\ud83d\ude89",statue_of_liberty:"\ud83d\uddfd",steam_locomotive:"\ud83d\ude82",stew:"\ud83c\udf72",stop_button:"\u23f9",stop_sign:"\ud83d\uded1",stopwatch:"\u23f1",straight_ruler:"\ud83d\udccf",strawberry:"\ud83c\udf53",stuck_out_tongue:"\ud83d\ude1b",stuck_out_tongue_closed_eyes:"\ud83d\ude1d",stuck_out_tongue_winking_eye:"\ud83d\ude1c",studio_microphone:"\ud83c\udf99",stuffed_flatbread:"\ud83e\udd59",sun_behind_large_cloud:"\ud83c\udf25",sun_behind_rain_cloud:"\ud83c\udf26",sun_behind_small_cloud:"\ud83c\udf24",sun_with_face:"\ud83c\udf1e",sunflower:"\ud83c\udf3b",sunglasses:"\ud83d\ude0e",sunny:"\u2600\ufe0f",sunrise:"\ud83c\udf05",sunrise_over_mountains:"\ud83c\udf04",surfing_man:"\ud83c\udfc4",surfing_woman:"\ud83c\udfc4&zwj;\u2640\ufe0f",sushi:"\ud83c\udf63",suspension_railway:"\ud83d\ude9f",sweat:"\ud83d\ude13",sweat_drops:"\ud83d\udca6",sweat_smile:"\ud83d\ude05",sweet_potato:"\ud83c\udf60",swimming_man:"\ud83c\udfca",swimming_woman:"\ud83c\udfca&zwj;\u2640\ufe0f",symbols:"\ud83d\udd23",synagogue:"\ud83d\udd4d",syringe:"\ud83d\udc89",taco:"\ud83c\udf2e",tada:"\ud83c\udf89",tanabata_tree:"\ud83c\udf8b",taurus:"\u2649\ufe0f",taxi:"\ud83d\ude95",tea:"\ud83c\udf75",telephone_receiver:"\ud83d\udcde",telescope:"\ud83d\udd2d",tennis:"\ud83c\udfbe",tent:"\u26fa\ufe0f",thermometer:"\ud83c\udf21",thinking:"\ud83e\udd14",thought_balloon:"\ud83d\udcad",ticket:"\ud83c\udfab",tickets:"\ud83c\udf9f",tiger:"\ud83d\udc2f",tiger2:"\ud83d\udc05",timer_clock:"\u23f2",tipping_hand_man:"\ud83d\udc81&zwj;\u2642\ufe0f",tired_face:"\ud83d\ude2b",tm:"\u2122\ufe0f",toilet:"\ud83d\udebd",tokyo_tower:"\ud83d\uddfc",tomato:"\ud83c\udf45",tongue:"\ud83d\udc45",top:"\ud83d\udd1d",tophat:"\ud83c\udfa9",tornado:"\ud83c\udf2a",trackball:"\ud83d\uddb2",tractor:"\ud83d\ude9c",traffic_light:"\ud83d\udea5",train:"\ud83d\ude8b",train2:"\ud83d\ude86",tram:"\ud83d\ude8a",triangular_flag_on_post:"\ud83d\udea9",triangular_ruler:"\ud83d\udcd0",trident:"\ud83d\udd31",triumph:"\ud83d\ude24",trolleybus:"\ud83d\ude8e",trophy:"\ud83c\udfc6",tropical_drink:"\ud83c\udf79",tropical_fish:"\ud83d\udc20",truck:"\ud83d\ude9a",trumpet:"\ud83c\udfba",tulip:"\ud83c\udf37",tumbler_glass:"\ud83e\udd43",turkey:"\ud83e\udd83",turtle:"\ud83d\udc22",tv:"\ud83d\udcfa",twisted_rightwards_arrows:"\ud83d\udd00",two_hearts:"\ud83d\udc95",two_men_holding_hands:"\ud83d\udc6c",two_women_holding_hands:"\ud83d\udc6d",u5272:"\ud83c\ude39",u5408:"\ud83c\ude34",u55b6:"\ud83c\ude3a",u6307:"\ud83c\ude2f\ufe0f",u6708:"\ud83c\ude37\ufe0f",u6709:"\ud83c\ude36",u6e80:"\ud83c\ude35",u7121:"\ud83c\ude1a\ufe0f",u7533:"\ud83c\ude38",u7981:"\ud83c\ude32",u7a7a:"\ud83c\ude33",umbrella:"\u2614\ufe0f",unamused:"\ud83d\ude12",underage:"\ud83d\udd1e",unicorn:"\ud83e\udd84",unlock:"\ud83d\udd13",up:"\ud83c\udd99",upside_down_face:"\ud83d\ude43",v:"\u270c\ufe0f",vertical_traffic_light:"\ud83d\udea6",vhs:"\ud83d\udcfc",vibration_mode:"\ud83d\udcf3",video_camera:"\ud83d\udcf9",video_game:"\ud83c\udfae",violin:"\ud83c\udfbb",virgo:"\u264d\ufe0f",volcano:"\ud83c\udf0b",volleyball:"\ud83c\udfd0",vs:"\ud83c\udd9a",vulcan_salute:"\ud83d\udd96",walking_man:"\ud83d\udeb6",walking_woman:"\ud83d\udeb6&zwj;\u2640\ufe0f",waning_crescent_moon:"\ud83c\udf18",waning_gibbous_moon:"\ud83c\udf16",warning:"\u26a0\ufe0f",wastebasket:"\ud83d\uddd1",watch:"\u231a\ufe0f",water_buffalo:"\ud83d\udc03",watermelon:"\ud83c\udf49",wave:"\ud83d\udc4b",wavy_dash:"\u3030\ufe0f",waxing_crescent_moon:"\ud83c\udf12",wc:"\ud83d\udebe",weary:"\ud83d\ude29",wedding:"\ud83d\udc92",weight_lifting_man:"\ud83c\udfcb\ufe0f",weight_lifting_woman:"\ud83c\udfcb\ufe0f&zwj;\u2640\ufe0f",whale:"\ud83d\udc33",whale2:"\ud83d\udc0b",wheel_of_dharma:"\u2638\ufe0f",wheelchair:"\u267f\ufe0f",white_check_mark:"\u2705",white_circle:"\u26aa\ufe0f",white_flag:"\ud83c\udff3\ufe0f",white_flower:"\ud83d\udcae",white_large_square:"\u2b1c\ufe0f",white_medium_small_square:"\u25fd\ufe0f",white_medium_square:"\u25fb\ufe0f",white_small_square:"\u25ab\ufe0f",white_square_button:"\ud83d\udd33",wilted_flower:"\ud83e\udd40",wind_chime:"\ud83c\udf90",wind_face:"\ud83c\udf2c",wine_glass:"\ud83c\udf77",wink:"\ud83d\ude09",wolf:"\ud83d\udc3a",woman:"\ud83d\udc69",woman_artist:"\ud83d\udc69&zwj;\ud83c\udfa8",woman_astronaut:"\ud83d\udc69&zwj;\ud83d\ude80",woman_cartwheeling:"\ud83e\udd38&zwj;\u2640\ufe0f",woman_cook:"\ud83d\udc69&zwj;\ud83c\udf73",woman_facepalming:"\ud83e\udd26&zwj;\u2640\ufe0f",woman_factory_worker:"\ud83d\udc69&zwj;\ud83c\udfed",woman_farmer:"\ud83d\udc69&zwj;\ud83c\udf3e",woman_firefighter:"\ud83d\udc69&zwj;\ud83d\ude92",woman_health_worker:"\ud83d\udc69&zwj;\u2695\ufe0f",woman_judge:"\ud83d\udc69&zwj;\u2696\ufe0f",woman_juggling:"\ud83e\udd39&zwj;\u2640\ufe0f",woman_mechanic:"\ud83d\udc69&zwj;\ud83d\udd27",woman_office_worker:"\ud83d\udc69&zwj;\ud83d\udcbc",woman_pilot:"\ud83d\udc69&zwj;\u2708\ufe0f",woman_playing_handball:"\ud83e\udd3e&zwj;\u2640\ufe0f",woman_playing_water_polo:"\ud83e\udd3d&zwj;\u2640\ufe0f",woman_scientist:"\ud83d\udc69&zwj;\ud83d\udd2c",woman_shrugging:"\ud83e\udd37&zwj;\u2640\ufe0f",woman_singer:"\ud83d\udc69&zwj;\ud83c\udfa4",woman_student:"\ud83d\udc69&zwj;\ud83c\udf93",woman_teacher:"\ud83d\udc69&zwj;\ud83c\udfeb",woman_technologist:"\ud83d\udc69&zwj;\ud83d\udcbb",woman_with_turban:"\ud83d\udc73&zwj;\u2640\ufe0f",womans_clothes:"\ud83d\udc5a",womans_hat:"\ud83d\udc52",women_wrestling:"\ud83e\udd3c&zwj;\u2640\ufe0f",womens:"\ud83d\udeba",world_map:"\ud83d\uddfa",worried:"\ud83d\ude1f",wrench:"\ud83d\udd27",writing_hand:"\u270d\ufe0f",x:"\u274c",yellow_heart:"\ud83d\udc9b",yen:"\ud83d\udcb4",yin_yang:"\u262f\ufe0f",yum:"\ud83d\ude0b",zap:"\u26a1\ufe0f",zipper_mouth_face:"\ud83e\udd10",zzz:"\ud83d\udca4",octocat:'<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',showdown:"<span style=\"font-family: 'Anonymous Pro', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;\">S</span>"},t.Converter=function(e){"use strict";var r={},c=[],u=[],l={},p=i,d={parsed:{},raw:"",format:""};function f(e,r){if(r=r||null,t.helper.isString(e)){if(r=e=t.helper.stdExtName(e),t.extensions[e])return console.warn("DEPRECATION WARNING: "+e+" is an old extension that uses a deprecated loading method.Please inform the developer that the extension should be updated!"),void function(e,r){"function"==typeof e&&(e=e(new t.Converter)),t.helper.isArray(e)||(e=[e]);var n=a(e,r);if(!n.valid)throw Error(n.error);for(var o=0;o<e.length;++o)switch(e[o].type){case"lang":c.push(e[o]);break;case"output":u.push(e[o]);break;default:throw Error("Extension loader error: Type unrecognized!!!")}}(t.extensions[e],e);if(t.helper.isUndefined(n[e]))throw Error('Extension "'+e+'" could not be loaded. It was either not found or is not a valid extension.');e=n[e]}"function"==typeof e&&(e=e()),t.helper.isArray(e)||(e=[e]);var o=a(e,r);if(!o.valid)throw Error(o.error);for(var i=0;i<e.length;++i){switch(e[i].type){case"lang":c.push(e[i]);break;case"output":u.push(e[i])}if(e[i].hasOwnProperty("listeners"))for(var s in e[i].listeners)e[i].listeners.hasOwnProperty(s)&&h(s,e[i].listeners[s])}}function h(e,r){if(!t.helper.isString(e))throw Error("Invalid argument in converter.listen() method: name must be a string, but "+typeof e+" given");if("function"!=typeof r)throw Error("Invalid argument in converter.listen() method: callback must be a function, but "+typeof r+" given");l.hasOwnProperty(e)||(l[e]=[]),l[e].push(r)}!function(){for(var n in e=e||{},o)o.hasOwnProperty(n)&&(r[n]=o[n]);if("object"!=typeof e)throw Error("Converter expects the passed parameter to be an object, but "+typeof e+" was passed instead.");for(var i in e)e.hasOwnProperty(i)&&(r[i]=e[i]);r.extensions&&t.helper.forEach(r.extensions,f)}(),this._dispatch=function(e,t,r,n){if(l.hasOwnProperty(e))for(var o=0;o<l[e].length;++o){var i=l[e][o](e,t,this,r,n);i&&void 0!==i&&(t=i)}return t},this.listen=function(e,t){return h(e,t),this},this.makeHtml=function(e){if(!e)return e;var n={gHtmlBlocks:[],gHtmlMdBlocks:[],gHtmlSpans:[],gUrls:{},gTitles:{},gDimensions:{},gListLevel:0,hashLinkCounts:{},langExtensions:c,outputModifiers:u,converter:this,ghCodeBlocks:[],metadata:{parsed:{},raw:"",format:""}};return e=(e=(e=(e=(e=e.replace(/\xa8/g,"\xa8T")).replace(/\$/g,"\xa8D")).replace(/\r\n/g,"\n")).replace(/\r/g,"\n")).replace(/\u00A0/g,"&nbsp;"),r.smartIndentationFix&&(e=function(e){var t=e.match(/^\s*/)[0].length,r=new RegExp("^\\s{0,"+t+"}","gm");return e.replace(r,"")}(e)),e="\n\n"+e+"\n\n",e=(e=t.subParser("detab")(e,r,n)).replace(/^[ \t]+$/gm,""),t.helper.forEach(c,function(o){e=t.subParser("runExtension")(o,e,r,n)}),e=t.subParser("metadata")(e,r,n),e=t.subParser("hashPreCodeTags")(e,r,n),e=t.subParser("githubCodeBlocks")(e,r,n),e=t.subParser("hashHTMLBlocks")(e,r,n),e=t.subParser("hashCodeTags")(e,r,n),e=t.subParser("stripLinkDefinitions")(e,r,n),e=t.subParser("blockGamut")(e,r,n),e=t.subParser("unhashHTMLSpans")(e,r,n),e=(e=(e=t.subParser("unescapeSpecialChars")(e,r,n)).replace(/\xa8D/g,"$$")).replace(/\xa8T/g,"\xa8"),e=t.subParser("completeHTMLDocument")(e,r,n),t.helper.forEach(u,function(o){e=t.subParser("runExtension")(o,e,r,n)}),d=n.metadata,e},this.makeMarkdown=this.makeMd=function(e,r){if(e=(e=(e=e.replace(/\r\n/g,"\n")).replace(/\r/g,"\n")).replace(/>[ \t]+</,">\xa8NBSP;<"),!r){if(!window||!window.document)throw new Error("HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM");r=window.document}var n=r.createElement("div");n.innerHTML=e;var o={preList:function(e){for(var r=e.querySelectorAll("pre"),n=[],o=0;o<r.length;++o)if(1===r[o].childElementCount&&"code"===r[o].firstChild.tagName.toLowerCase()){var i=r[o].firstChild.innerHTML.trim(),s=r[o].firstChild.getAttribute("data-language")||"";if(""===s)for(var a=r[o].firstChild.className.split(" "),c=0;c<a.length;++c){var u=a[c].match(/^language-(.+)$/);if(null!==u){s=u[1];break}}i=t.helper.unescapeHTMLEntities(i),n.push(i),r[o].outerHTML='<precode language="'+s+'" precodenum="'+o.toString()+'"></precode>'}else n.push(r[o].innerHTML),r[o].innerHTML="",r[o].setAttribute("prenum",o.toString());return n}(n)};!function e(t){for(var r=0;r<t.childNodes.length;++r){var n=t.childNodes[r];3===n.nodeType?/\S/.test(n.nodeValue)?(n.nodeValue=n.nodeValue.split("\n").join(" "),n.nodeValue=n.nodeValue.replace(/(\s)+/g,"$1")):(t.removeChild(n),--r):1===n.nodeType&&e(n)}}(n);for(var i=n.childNodes,s="",a=0;a<i.length;a++)s+=t.subParser("makeMarkdown.node")(i[a],o);return s},this.setOption=function(e,t){r[e]=t},this.getOption=function(e){return r[e]},this.getOptions=function(){return r},this.addExtension=function(e,t){f(e,t=t||null)},this.useExtension=function(e){f(e)},this.setFlavor=function(e){if(!s.hasOwnProperty(e))throw Error(e+" flavor was not found");var t=s[e];for(var n in p=e,t)t.hasOwnProperty(n)&&(r[n]=t[n])},this.getFlavor=function(){return p},this.removeExtension=function(e){t.helper.isArray(e)||(e=[e]);for(var r=0;r<e.length;++r){for(var n=e[r],o=0;o<c.length;++o)c[o]===n&&c[o].splice(o,1);for(;0<u.length;++o)u[0]===n&&u[0].splice(o,1)}},this.getAllExtensions=function(){return{language:c,output:u}},this.getMetadata=function(e){return e?d.raw:d.parsed},this.getMetadataFormat=function(){return d.format},this._setMetadataPair=function(e,t){d.parsed[e]=t},this._setMetadataFormat=function(e){d.format=e},this._setMetadataRaw=function(e){d.raw=e}},t.subParser("anchors",function(e,r,n){"use strict";var o=function(e,o,i,s,a,c,u){if(t.helper.isUndefined(u)&&(u=""),i=i.toLowerCase(),e.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)s="";else if(!s){if(i||(i=o.toLowerCase().replace(/ ?\n/g," ")),s="#"+i,t.helper.isUndefined(n.gUrls[i]))return e;s=n.gUrls[i],t.helper.isUndefined(n.gTitles[i])||(u=n.gTitles[i])}var l='<a href="'+(s=s.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback))+'"';return""!==u&&null!==u&&(l+=' title="'+(u=(u=u.replace(/"/g,"&quot;")).replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback))+'"'),r.openLinksInNewWindow&&!/^#/.test(s)&&(l+=' rel="noopener noreferrer" target="\xa8E95Eblank"'),l+">"+o+"</a>"};return e=(e=(e=(e=(e=n.converter._dispatch("anchors.before",e,r,n)).replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g,o)).replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,o)).replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,o)).replace(/\[([^\[\]]+)]()()()()()/g,o),r.ghMentions&&(e=e.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gim,function(e,n,o,i,s){if("\\"===o)return n+i;if(!t.helper.isString(r.ghMentionsLink))throw new Error("ghMentionsLink option must be a string");var a=r.ghMentionsLink.replace(/\{u}/g,s),c="";return r.openLinksInNewWindow&&(c=' rel="noopener noreferrer" target="\xa8E95Eblank"'),n+'<a href="'+a+'"'+c+">"+i+"</a>"})),n.converter._dispatch("anchors.after",e,r,n)});var l=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi,p=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi,d=/()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi,f=/(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gim,h=/<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi,m=function(e){"use strict";return function(r,n,o,i,s,a,c){var u=o=o.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback),l="",p="",d=n||"",f=c||"";return/^www\./i.test(o)&&(o=o.replace(/^www\./i,"http://www.")),e.excludeTrailingPunctuationFromURLs&&a&&(l=a),e.openLinksInNewWindow&&(p=' rel="noopener noreferrer" target="\xa8E95Eblank"'),d+'<a href="'+o+'"'+p+">"+u+"</a>"+l+f}},g=function(e,r){"use strict";return function(n,o,i){var s="mailto:";return o=o||"",i=t.subParser("unescapeSpecialChars")(i,e,r),e.encodeEmails?(s=t.helper.encodeEmailAddress(s+i),i=t.helper.encodeEmailAddress(i)):s+=i,o+'<a href="'+s+'">'+i+"</a>"}};t.subParser("autoLinks",function(e,t,r){"use strict";return e=(e=(e=r.converter._dispatch("autoLinks.before",e,t,r)).replace(d,m(t))).replace(h,g(t,r)),r.converter._dispatch("autoLinks.after",e,t,r)}),t.subParser("simplifiedAutoLinks",function(e,t,r){"use strict";return t.simplifiedAutoLink?(e=r.converter._dispatch("simplifiedAutoLinks.before",e,t,r),e=(e=t.excludeTrailingPunctuationFromURLs?e.replace(p,m(t)):e.replace(l,m(t))).replace(f,g(t,r)),e=r.converter._dispatch("simplifiedAutoLinks.after",e,t,r)):e}),t.subParser("blockGamut",function(e,r,n){"use strict";return e=n.converter._dispatch("blockGamut.before",e,r,n),e=t.subParser("blockQuotes")(e,r,n),e=t.subParser("headers")(e,r,n),e=t.subParser("horizontalRule")(e,r,n),e=t.subParser("lists")(e,r,n),e=t.subParser("codeBlocks")(e,r,n),e=t.subParser("tables")(e,r,n),e=t.subParser("hashHTMLBlocks")(e,r,n),e=t.subParser("paragraphs")(e,r,n),n.converter._dispatch("blockGamut.after",e,r,n)}),t.subParser("blockQuotes",function(e,r,n){"use strict";e=n.converter._dispatch("blockQuotes.before",e,r,n),e+="\n\n";var o=/(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;return r.splitAdjacentBlockquotes&&(o=/^ {0,3}>[\s\S]*?(?:\n\n)/gm),e=e.replace(o,function(e){return e=(e=(e=e.replace(/^[ \t]*>[ \t]?/gm,"")).replace(/\xa80/g,"")).replace(/^[ \t]+$/gm,""),e=t.subParser("githubCodeBlocks")(e,r,n),e=(e=(e=t.subParser("blockGamut")(e,r,n)).replace(/(^|\n)/g,"$1  ")).replace(/(\s*<pre>[^\r]+?<\/pre>)/gm,function(e,t){var r=t;return(r=r.replace(/^  /gm,"\xa80")).replace(/\xa80/g,"")}),t.subParser("hashBlock")("<blockquote>\n"+e+"\n</blockquote>",r,n)}),n.converter._dispatch("blockQuotes.after",e,r,n)}),t.subParser("codeBlocks",function(e,r,n){"use strict";return e=n.converter._dispatch("codeBlocks.before",e,r,n),e=(e=(e+="\xa80").replace(/(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=\xa80))/g,function(e,o,i){var s=o,a=i,c="\n";return s=t.subParser("outdent")(s,r,n),s=t.subParser("encodeCode")(s,r,n),s=(s=(s=t.subParser("detab")(s,r,n)).replace(/^\n+/g,"")).replace(/\n+$/g,""),r.omitExtraWLInCodeBlocks&&(c=""),s="<pre><code>"+s+c+"</code></pre>",t.subParser("hashBlock")(s,r,n)+a})).replace(/\xa80/,""),n.converter._dispatch("codeBlocks.after",e,r,n)}),t.subParser("codeSpans",function(e,r,n){"use strict";return void 0===(e=n.converter._dispatch("codeSpans.before",e,r,n))&&(e=""),e=e.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,function(e,o,i,s){var a=s;return a=(a=a.replace(/^([ \t]*)/g,"")).replace(/[ \t]*$/g,""),a=o+"<code>"+(a=t.subParser("encodeCode")(a,r,n))+"</code>",t.subParser("hashHTMLSpans")(a,r,n)}),n.converter._dispatch("codeSpans.after",e,r,n)}),t.subParser("completeHTMLDocument",function(e,t,r){"use strict";if(!t.completeHTMLDocument)return e;e=r.converter._dispatch("completeHTMLDocument.before",e,t,r);var n="html",o="<!DOCTYPE HTML>\n",i="",s='<meta charset="utf-8">\n',a="",c="";for(var u in void 0!==r.metadata.parsed.doctype&&(o="<!DOCTYPE "+r.metadata.parsed.doctype+">\n","html"!==(n=r.metadata.parsed.doctype.toString().toLowerCase())&&"html5"!==n||(s='<meta charset="utf-8">')),r.metadata.parsed)if(r.metadata.parsed.hasOwnProperty(u))switch(u.toLowerCase()){case"doctype":break;case"title":i="<title>"+r.metadata.parsed.title+"</title>\n";break;case"charset":s="html"===n||"html5"===n?'<meta charset="'+r.metadata.parsed.charset+'">\n':'<meta name="charset" content="'+r.metadata.parsed.charset+'">\n';break;case"language":case"lang":a=' lang="'+r.metadata.parsed[u]+'"',c+='<meta name="'+u+'" content="'+r.metadata.parsed[u]+'">\n';break;default:c+='<meta name="'+u+'" content="'+r.metadata.parsed[u]+'">\n'}return e=o+"<html"+a+">\n<head>\n"+i+s+c+"</head>\n<body>\n"+e.trim()+"\n</body>\n</html>",r.converter._dispatch("completeHTMLDocument.after",e,t,r)}),t.subParser("detab",function(e,t,r){"use strict";return e=(e=(e=(e=(e=(e=r.converter._dispatch("detab.before",e,t,r)).replace(/\t(?=\t)/g,"    ")).replace(/\t/g,"\xa8A\xa8B")).replace(/\xa8B(.+?)\xa8A/g,function(e,t){for(var r=t,n=4-r.length%4,o=0;o<n;o++)r+=" ";return r})).replace(/\xa8A/g,"    ")).replace(/\xa8B/g,""),r.converter._dispatch("detab.after",e,t,r)}),t.subParser("ellipsis",function(e,t,r){"use strict";return e=(e=r.converter._dispatch("ellipsis.before",e,t,r)).replace(/\.\.\./g,"\u2026"),r.converter._dispatch("ellipsis.after",e,t,r)}),t.subParser("emoji",function(e,r,n){"use strict";return r.emoji?(e=(e=n.converter._dispatch("emoji.before",e,r,n)).replace(/:([\S]+?):/g,function(e,r){return t.helper.emojis.hasOwnProperty(r)?t.helper.emojis[r]:e}),n.converter._dispatch("emoji.after",e,r,n)):e}),t.subParser("encodeAmpsAndAngles",function(e,t,r){"use strict";return e=(e=(e=(e=(e=r.converter._dispatch("encodeAmpsAndAngles.before",e,t,r)).replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g,"&amp;")).replace(/<(?![a-z\/?$!])/gi,"&lt;")).replace(/</g,"&lt;")).replace(/>/g,"&gt;"),r.converter._dispatch("encodeAmpsAndAngles.after",e,t,r)}),t.subParser("encodeBackslashEscapes",function(e,r,n){"use strict";return e=(e=(e=n.converter._dispatch("encodeBackslashEscapes.before",e,r,n)).replace(/\\(\\)/g,t.helper.escapeCharactersCallback)).replace(/\\([`*_{}\[\]()>#+.!~=|-])/g,t.helper.escapeCharactersCallback),n.converter._dispatch("encodeBackslashEscapes.after",e,r,n)}),t.subParser("encodeCode",function(e,r,n){"use strict";return e=(e=n.converter._dispatch("encodeCode.before",e,r,n)).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/([*_{}\[\]\\=~-])/g,t.helper.escapeCharactersCallback),n.converter._dispatch("encodeCode.after",e,r,n)}),t.subParser("escapeSpecialCharsWithinTagAttributes",function(e,r,n){"use strict";return e=(e=(e=n.converter._dispatch("escapeSpecialCharsWithinTagAttributes.before",e,r,n)).replace(/<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi,function(e){return e.replace(/(.)<\/?code>(?=.)/g,"$1`").replace(/([\\`*_~=|])/g,t.helper.escapeCharactersCallback)})).replace(/<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi,function(e){return e.replace(/([\\`*_~=|])/g,t.helper.escapeCharactersCallback)}),n.converter._dispatch("escapeSpecialCharsWithinTagAttributes.after",e,r,n)}),t.subParser("githubCodeBlocks",function(e,r,n){"use strict";return r.ghCodeBlocks?(e=n.converter._dispatch("githubCodeBlocks.before",e,r,n),e=(e=(e+="\xa80").replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g,function(e,o,i,s){var a=r.omitExtraWLInCodeBlocks?"":"\n";return s=t.subParser("encodeCode")(s,r,n),s="<pre><code"+(i?' class="'+i+" language-"+i+'"':"")+">"+(s=(s=(s=t.subParser("detab")(s,r,n)).replace(/^\n+/g,"")).replace(/\n+$/g,""))+a+"</code></pre>",s=t.subParser("hashBlock")(s,r,n),"\n\n\xa8G"+(n.ghCodeBlocks.push({text:e,codeblock:s})-1)+"G\n\n"})).replace(/\xa80/,""),n.converter._dispatch("githubCodeBlocks.after",e,r,n)):e}),t.subParser("hashBlock",function(e,t,r){"use strict";return e=(e=r.converter._dispatch("hashBlock.before",e,t,r)).replace(/(^\n+|\n+$)/g,""),e="\n\n\xa8K"+(r.gHtmlBlocks.push(e)-1)+"K\n\n",r.converter._dispatch("hashBlock.after",e,t,r)}),t.subParser("hashCodeTags",function(e,r,n){"use strict";return e=n.converter._dispatch("hashCodeTags.before",e,r,n),e=t.helper.replaceRecursiveRegExp(e,function(e,o,i,s){var a=i+t.subParser("encodeCode")(o,r,n)+s;return"\xa8C"+(n.gHtmlSpans.push(a)-1)+"C"},"<code\\b[^>]*>","</code>","gim"),n.converter._dispatch("hashCodeTags.after",e,r,n)}),t.subParser("hashElement",function(e,t,r){"use strict";return function(e,t){var n=t;return n=(n=(n=n.replace(/\n\n/g,"\n")).replace(/^\n/,"")).replace(/\n+$/g,""),"\n\n\xa8K"+(r.gHtmlBlocks.push(n)-1)+"K\n\n"}}),t.subParser("hashHTMLBlocks",function(e,r,n){"use strict";e=n.converter._dispatch("hashHTMLBlocks.before",e,r,n);var o=["pre","div","h1","h2","h3","h4","h5","h6","blockquote","table","dl","ol","ul","script","noscript","form","fieldset","iframe","math","style","section","header","footer","nav","article","aside","address","audio","canvas","figure","hgroup","output","video","p"],i=function(e,t,r,o){var i=e;return-1!==r.search(/\bmarkdown\b/)&&(i=r+n.converter.makeHtml(t)+o),"\n\n\xa8K"+(n.gHtmlBlocks.push(i)-1)+"K\n\n"};r.backslashEscapesHTMLTags&&(e=e.replace(/\\<(\/?[^>]+?)>/g,function(e,t){return"&lt;"+t+"&gt;"}));for(var s=0;s<o.length;++s)for(var a,c=new RegExp("^ {0,3}(<"+o[s]+"\\b[^>]*>)","im"),u="<"+o[s]+"\\b[^>]*>",l="</"+o[s]+">";-1!==(a=t.helper.regexIndexOf(e,c));){var p=t.helper.splitAtIndex(e,a),d=t.helper.replaceRecursiveRegExp(p[1],i,u,l,"im");if(d===p[1])break;e=p[0].concat(d)}return e=e.replace(/(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,t.subParser("hashElement")(e,r,n)),e=(e=t.helper.replaceRecursiveRegExp(e,function(e){return"\n\n\xa8K"+(n.gHtmlBlocks.push(e)-1)+"K\n\n"},"^ {0,3}\x3c!--","--\x3e","gm")).replace(/(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,t.subParser("hashElement")(e,r,n)),n.converter._dispatch("hashHTMLBlocks.after",e,r,n)}),t.subParser("hashHTMLSpans",function(e,t,r){"use strict";function n(e){return"\xa8C"+(r.gHtmlSpans.push(e)-1)+"C"}return e=(e=(e=(e=(e=r.converter._dispatch("hashHTMLSpans.before",e,t,r)).replace(/<[^>]+?\/>/gi,function(e){return n(e)})).replace(/<([^>]+?)>[\s\S]*?<\/\1>/g,function(e){return n(e)})).replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g,function(e){return n(e)})).replace(/<[^>]+?>/gi,function(e){return n(e)}),r.converter._dispatch("hashHTMLSpans.after",e,t,r)}),t.subParser("unhashHTMLSpans",function(e,t,r){"use strict";e=r.converter._dispatch("unhashHTMLSpans.before",e,t,r);for(var n=0;n<r.gHtmlSpans.length;++n){for(var o=r.gHtmlSpans[n],i=0;/\xa8C(\d+)C/.test(o);){var s=RegExp.$1;if(o=o.replace("\xa8C"+s+"C",r.gHtmlSpans[s]),10===i){console.error("maximum nesting of 10 spans reached!!!");break}++i}e=e.replace("\xa8C"+n+"C",o)}return r.converter._dispatch("unhashHTMLSpans.after",e,t,r)}),t.subParser("hashPreCodeTags",function(e,r,n){"use strict";return e=n.converter._dispatch("hashPreCodeTags.before",e,r,n),e=t.helper.replaceRecursiveRegExp(e,function(e,o,i,s){var a=i+t.subParser("encodeCode")(o,r,n)+s;return"\n\n\xa8G"+(n.ghCodeBlocks.push({text:e,codeblock:a})-1)+"G\n\n"},"^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>","^ {0,3}</code>\\s*</pre>","gim"),n.converter._dispatch("hashPreCodeTags.after",e,r,n)}),t.subParser("headers",function(e,r,n){"use strict";e=n.converter._dispatch("headers.before",e,r,n);var o=isNaN(parseInt(r.headerLevelStart))?1:parseInt(r.headerLevelStart),i=r.smoothLivePreview?/^(.+)[ \t]*\n={2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n=+[ \t]*\n+/gm,s=r.smoothLivePreview?/^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n-+[ \t]*\n+/gm;e=(e=e.replace(i,function(e,i){var s=t.subParser("spanGamut")(i,r,n),a=r.noHeaderId?"":' id="'+c(i)+'"',u="<h"+o+a+">"+s+"</h"+o+">";return t.subParser("hashBlock")(u,r,n)})).replace(s,function(e,i){var s=t.subParser("spanGamut")(i,r,n),a=r.noHeaderId?"":' id="'+c(i)+'"',u=o+1,l="<h"+u+a+">"+s+"</h"+u+">";return t.subParser("hashBlock")(l,r,n)});var a=r.requireSpaceBeforeHeadingText?/^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm:/^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm;function c(e){var o,i;if(r.customizedHeaderId){var s=e.match(/\{([^{]+?)}\s*$/);s&&s[1]&&(e=s[1])}return o=e,i=t.helper.isString(r.prefixHeaderId)?r.prefixHeaderId:!0===r.prefixHeaderId?"section-":"",r.rawPrefixHeaderId||(o=i+o),o=r.ghCompatibleHeaderId?o.replace(/ /g,"-").replace(/&amp;/g,"").replace(/\xa8T/g,"").replace(/\xa8D/g,"").replace(/[&+$,\/:;=?@"#{}|^\xa8~\[\]`\\*)(%.!'<>]/g,"").toLowerCase():r.rawHeaderId?o.replace(/ /g,"-").replace(/&amp;/g,"&").replace(/\xa8T/g,"\xa8").replace(/\xa8D/g,"$").replace(/["']/g,"-").toLowerCase():o.replace(/[^\w]/g,"").toLowerCase(),r.rawPrefixHeaderId&&(o=i+o),n.hashLinkCounts[o]?o=o+"-"+n.hashLinkCounts[o]++:n.hashLinkCounts[o]=1,o}return e=e.replace(a,function(e,i,s){var a=s;r.customizedHeaderId&&(a=s.replace(/\s?\{([^{]+?)}\s*$/,""));var u=t.subParser("spanGamut")(a,r,n),l=r.noHeaderId?"":' id="'+c(s)+'"',p=o-1+i.length,d="<h"+p+l+">"+u+"</h"+p+">";return t.subParser("hashBlock")(d,r,n)}),n.converter._dispatch("headers.after",e,r,n)}),t.subParser("horizontalRule",function(e,r,n){"use strict";e=n.converter._dispatch("horizontalRule.before",e,r,n);var o=t.subParser("hashBlock")("<hr />",r,n);return e=(e=(e=e.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm,o)).replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm,o)).replace(/^ {0,2}( ?_){3,}[ \t]*$/gm,o),n.converter._dispatch("horizontalRule.after",e,r,n)}),t.subParser("images",function(e,r,n){"use strict";function o(e,r,o,i,s,a,c,u){var l=n.gUrls,p=n.gTitles,d=n.gDimensions;if(o=o.toLowerCase(),u||(u=""),e.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)i="";else if(""===i||null===i){if(""!==o&&null!==o||(o=r.toLowerCase().replace(/ ?\n/g," ")),i="#"+o,t.helper.isUndefined(l[o]))return e;i=l[o],t.helper.isUndefined(p[o])||(u=p[o]),t.helper.isUndefined(d[o])||(s=d[o].width,a=d[o].height)}r=r.replace(/"/g,"&quot;").replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback);var f='<img src="'+(i=i.replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback))+'" alt="'+r+'"';return u&&t.helper.isString(u)&&(f+=' title="'+(u=u.replace(/"/g,"&quot;").replace(t.helper.regexes.asteriskDashAndColon,t.helper.escapeCharactersCallback))+'"'),s&&a&&(f+=' width="'+(s="*"===s?"auto":s)+'"',f+=' height="'+(a="*"===a?"auto":a)+'"'),f+" />"}return e=(e=(e=(e=(e=(e=n.converter._dispatch("images.before",e,r,n)).replace(/!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g,o)).replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,function(e,t,r,n,i,s,a,c){return o(e,t,r,n=n.replace(/\s/g,""),i,s,0,c)})).replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g,o)).replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,o)).replace(/!\[([^\[\]]+)]()()()()()/g,o),n.converter._dispatch("images.after",e,r,n)}),t.subParser("italicsAndBold",function(e,t,r){"use strict";function n(e,t,r){return t+e+r}return e=r.converter._dispatch("italicsAndBold.before",e,t,r),e=t.literalMidWordUnderscores?(e=(e=e.replace(/\b___(\S[\s\S]*?)___\b/g,function(e,t){return n(t,"<strong><em>","</em></strong>")})).replace(/\b__(\S[\s\S]*?)__\b/g,function(e,t){return n(t,"<strong>","</strong>")})).replace(/\b_(\S[\s\S]*?)_\b/g,function(e,t){return n(t,"<em>","</em>")}):(e=(e=e.replace(/___(\S[\s\S]*?)___/g,function(e,t){return/\S$/.test(t)?n(t,"<strong><em>","</em></strong>"):e})).replace(/__(\S[\s\S]*?)__/g,function(e,t){return/\S$/.test(t)?n(t,"<strong>","</strong>"):e})).replace(/_([^\s_][\s\S]*?)_/g,function(e,t){return/\S$/.test(t)?n(t,"<em>","</em>"):e}),e=t.literalMidWordAsterisks?(e=(e=e.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g,function(e,t,r){return n(r,t+"<strong><em>","</em></strong>")})).replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g,function(e,t,r){return n(r,t+"<strong>","</strong>")})).replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g,function(e,t,r){return n(r,t+"<em>","</em>")}):(e=(e=e.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g,function(e,t){return/\S$/.test(t)?n(t,"<strong><em>","</em></strong>"):e})).replace(/\*\*(\S[\s\S]*?)\*\*/g,function(e,t){return/\S$/.test(t)?n(t,"<strong>","</strong>"):e})).replace(/\*([^\s*][\s\S]*?)\*/g,function(e,t){return/\S$/.test(t)?n(t,"<em>","</em>"):e}),r.converter._dispatch("italicsAndBold.after",e,t,r)}),t.subParser("lists",function(e,r,n){"use strict";function o(e,o){n.gListLevel++,e=e.replace(/\n{2,}$/,"\n");var i=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(\xa80| {0,3}([*+-]|\d+[.])[ \t]+))/gm,s=/\n[ \t]*\n(?!\xa80)/.test(e+="\xa80");return r.disableForced4SpacesIndentedSublists&&(i=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(\xa80|\2([*+-]|\d+[.])[ \t]+))/gm),e=(e=e.replace(i,function(e,o,i,a,c,u,l){l=l&&""!==l.trim();var p=t.subParser("outdent")(c,r,n),d="";return u&&r.tasklists&&(d=' class="task-list-item" style="list-style-type: none;"',p=p.replace(/^[ \t]*\[(x|X| )?]/m,function(){var e='<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';return l&&(e+=" checked"),e+">"})),p=p.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g,function(e){return"\xa8A"+e}),o||p.search(/\n{2,}/)>-1?(p=t.subParser("githubCodeBlocks")(p,r,n),p=t.subParser("blockGamut")(p,r,n)):(p=(p=t.subParser("lists")(p,r,n)).replace(/\n$/,""),p=(p=t.subParser("hashHTMLBlocks")(p,r,n)).replace(/\n\n+/g,"\n\n"),p=s?t.subParser("paragraphs")(p,r,n):t.subParser("spanGamut")(p,r,n)),"<li"+d+">"+(p=p.replace("\xa8A",""))+"</li>\n"})).replace(/\xa80/g,""),n.gListLevel--,o&&(e=e.replace(/\s+$/,"")),e}function i(e,t){if("ol"===t){var r=e.match(/^ *(\d+)\./);if(r&&"1"!==r[1])return' start="'+r[1]+'"'}return""}function s(e,t,n){var s=r.disableForced4SpacesIndentedSublists?/^ ?\d+\.[ \t]/gm:/^ {0,3}\d+\.[ \t]/gm,a=r.disableForced4SpacesIndentedSublists?/^ ?[*+-][ \t]/gm:/^ {0,3}[*+-][ \t]/gm,c="ul"===t?s:a,u="";if(-1!==e.search(c))!function r(l){var p=l.search(c),d=i(e,t);-1!==p?(u+="\n\n<"+t+d+">\n"+o(l.slice(0,p),!!n)+"</"+t+">\n",c="ul"==(t="ul"===t?"ol":"ul")?s:a,r(l.slice(p))):u+="\n\n<"+t+d+">\n"+o(l,!!n)+"</"+t+">\n"}(e);else{var l=i(e,t);u="\n\n<"+t+l+">\n"+o(e,!!n)+"</"+t+">\n"}return u}return e=n.converter._dispatch("lists.before",e,r,n),e+="\xa80",e=(e=n.gListLevel?e.replace(/^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(\xa80|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,function(e,t,r){return s(t,r.search(/[*+-]/g)>-1?"ul":"ol",!0)}):e.replace(/(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(\xa80|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,function(e,t,r,n){return s(r,n.search(/[*+-]/g)>-1?"ul":"ol",!1)})).replace(/\xa80/,""),n.converter._dispatch("lists.after",e,r,n)}),t.subParser("metadata",function(e,t,r){"use strict";if(!t.metadata)return e;function n(e){r.metadata.raw=e,(e=(e=e.replace(/&/g,"&amp;").replace(/"/g,"&quot;")).replace(/\n {4}/g," ")).replace(/^([\S ]+): +([\s\S]+?)$/gm,function(e,t,n){return r.metadata.parsed[t]=n,""})}return e=(e=(e=(e=r.converter._dispatch("metadata.before",e,t,r)).replace(/^\s*\xab\xab\xab+(\S*?)\n([\s\S]+?)\n\xbb\xbb\xbb+\n/,function(e,t,r){return n(r),"\xa8M"})).replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/,function(e,t,o){return t&&(r.metadata.format=t),n(o),"\xa8M"})).replace(/\xa8M/g,""),r.converter._dispatch("metadata.after",e,t,r)}),t.subParser("outdent",function(e,t,r){"use strict";return e=(e=(e=r.converter._dispatch("outdent.before",e,t,r)).replace(/^(\t|[ ]{1,4})/gm,"\xa80")).replace(/\xa80/g,""),r.converter._dispatch("outdent.after",e,t,r)}),t.subParser("paragraphs",function(e,r,n){"use strict";for(var o=(e=(e=(e=n.converter._dispatch("paragraphs.before",e,r,n)).replace(/^\n+/g,"")).replace(/\n+$/g,"")).split(/\n{2,}/g),i=[],s=o.length,a=0;a<s;a++){var c=o[a];c.search(/\xa8(K|G)(\d+)\1/g)>=0?i.push(c):c.search(/\S/)>=0&&(c=(c=t.subParser("spanGamut")(c,r,n)).replace(/^([ \t]*)/g,"<p>"),c+="</p>",i.push(c))}for(s=i.length,a=0;a<s;a++){for(var u="",l=i[a],p=!1;/\xa8(K|G)(\d+)\1/.test(l);){var d=RegExp.$1,f=RegExp.$2;u=(u="K"===d?n.gHtmlBlocks[f]:p?t.subParser("encodeCode")(n.ghCodeBlocks[f].text,r,n):n.ghCodeBlocks[f].codeblock).replace(/\$/g,"$$$$"),l=l.replace(/(\n\n)?\xa8(K|G)\d+\2(\n\n)?/,u),/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(l)&&(p=!0)}i[a]=l}return e=(e=(e=i.join("\n")).replace(/^\n+/g,"")).replace(/\n+$/g,""),n.converter._dispatch("paragraphs.after",e,r,n)}),t.subParser("runExtension",function(e,t,r,n){"use strict";if(e.filter)t=e.filter(t,n.converter,r);else if(e.regex){var o=e.regex;o instanceof RegExp||(o=new RegExp(o,"g")),t=t.replace(o,e.replace)}return t}),t.subParser("spanGamut",function(e,r,n){"use strict";return e=n.converter._dispatch("spanGamut.before",e,r,n),e=t.subParser("codeSpans")(e,r,n),e=t.subParser("escapeSpecialCharsWithinTagAttributes")(e,r,n),e=t.subParser("encodeBackslashEscapes")(e,r,n),e=t.subParser("images")(e,r,n),e=t.subParser("anchors")(e,r,n),e=t.subParser("autoLinks")(e,r,n),e=t.subParser("simplifiedAutoLinks")(e,r,n),e=t.subParser("emoji")(e,r,n),e=t.subParser("underline")(e,r,n),e=t.subParser("italicsAndBold")(e,r,n),e=t.subParser("strikethrough")(e,r,n),e=t.subParser("ellipsis")(e,r,n),e=t.subParser("hashHTMLSpans")(e,r,n),e=t.subParser("encodeAmpsAndAngles")(e,r,n),r.simpleLineBreaks?/\n\n\xa8K/.test(e)||(e=e.replace(/\n+/g,"<br />\n")):e=e.replace(/  +\n/g,"<br />\n"),n.converter._dispatch("spanGamut.after",e,r,n)}),t.subParser("strikethrough",function(e,r,n){"use strict";return r.strikethrough&&(e=(e=n.converter._dispatch("strikethrough.before",e,r,n)).replace(/(?:~){2}([\s\S]+?)(?:~){2}/g,function(e,o){return function(e){return r.simplifiedAutoLink&&(e=t.subParser("simplifiedAutoLinks")(e,r,n)),"<del>"+e+"</del>"}(o)}),e=n.converter._dispatch("strikethrough.after",e,r,n)),e}),t.subParser("stripLinkDefinitions",function(e,r,n){"use strict";var o=function(e,o,i,s,a,c,u){return o=o.toLowerCase(),i.match(/^data:.+?\/.+?;base64,/)?n.gUrls[o]=i.replace(/\s/g,""):n.gUrls[o]=t.subParser("encodeAmpsAndAngles")(i,r,n),c?c+u:(u&&(n.gTitles[o]=u.replace(/"|'/g,"&quot;")),r.parseImgDimensions&&s&&a&&(n.gDimensions[o]={width:s,height:a}),"")};return(e=(e=(e+="\xa80").replace(/^ {0,3}\[(.+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=\xa80)|(?=\n\[))/gm,o)).replace(/^ {0,3}\[(.+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=\xa80))/gm,o)).replace(/\xa80/,"")}),t.subParser("tables",function(e,r,n){"use strict";if(!r.tables)return e;function o(e,o){return"<td"+o+">"+t.subParser("spanGamut")(e,r,n)+"</td>\n"}function i(e){var i,s=e.split("\n");for(i=0;i<s.length;++i)/^ {0,3}\|/.test(s[i])&&(s[i]=s[i].replace(/^ {0,3}\|/,"")),/\|[ \t]*$/.test(s[i])&&(s[i]=s[i].replace(/\|[ \t]*$/,"")),s[i]=t.subParser("codeSpans")(s[i],r,n);var a,c,u,l,p=s[0].split("|").map(function(e){return e.trim()}),d=s[1].split("|").map(function(e){return e.trim()}),f=[],h=[],m=[],g=[];for(s.shift(),s.shift(),i=0;i<s.length;++i)""!==s[i].trim()&&f.push(s[i].split("|").map(function(e){return e.trim()}));if(p.length<d.length)return e;for(i=0;i<d.length;++i)m.push((a=d[i],/^:[ \t]*--*$/.test(a)?' style="text-align:left;"':/^--*[ \t]*:[ \t]*$/.test(a)?' style="text-align:right;"':/^:[ \t]*--*[ \t]*:$/.test(a)?' style="text-align:center;"':""));for(i=0;i<p.length;++i)t.helper.isUndefined(m[i])&&(m[i]=""),h.push((c=p[i],u=m[i],l=void 0,l="",c=c.trim(),(r.tablesHeaderId||r.tableHeaderId)&&(l=' id="'+c.replace(/ /g,"_").toLowerCase()+'"'),"<th"+l+u+">"+(c=t.subParser("spanGamut")(c,r,n))+"</th>\n"));for(i=0;i<f.length;++i){for(var b=[],w=0;w<h.length;++w)t.helper.isUndefined(f[i][w]),b.push(o(f[i][w],m[w]));g.push(b)}return function(e,t){for(var r="<table>\n<thead>\n<tr>\n",n=e.length,o=0;o<n;++o)r+=e[o];for(r+="</tr>\n</thead>\n<tbody>\n",o=0;o<t.length;++o){r+="<tr>\n";for(var i=0;i<n;++i)r+=t[o][i];r+="</tr>\n"}return r+"</tbody>\n</table>\n"}(h,g)}return e=(e=(e=(e=n.converter._dispatch("tables.before",e,r,n)).replace(/\\(\|)/g,t.helper.escapeCharactersCallback)).replace(/^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|\xa80)/gm,i)).replace(/^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|\xa80)/gm,i),n.converter._dispatch("tables.after",e,r,n)}),t.subParser("underline",function(e,r,n){"use strict";return r.underline?(e=n.converter._dispatch("underline.before",e,r,n),e=(e=r.literalMidWordUnderscores?(e=e.replace(/\b___(\S[\s\S]*?)___\b/g,function(e,t){return"<u>"+t+"</u>"})).replace(/\b__(\S[\s\S]*?)__\b/g,function(e,t){return"<u>"+t+"</u>"}):(e=e.replace(/___(\S[\s\S]*?)___/g,function(e,t){return/\S$/.test(t)?"<u>"+t+"</u>":e})).replace(/__(\S[\s\S]*?)__/g,function(e,t){return/\S$/.test(t)?"<u>"+t+"</u>":e})).replace(/(_)/g,t.helper.escapeCharactersCallback),e=n.converter._dispatch("underline.after",e,r,n)):e}),t.subParser("unescapeSpecialChars",function(e,t,r){"use strict";return e=(e=r.converter._dispatch("unescapeSpecialChars.before",e,t,r)).replace(/\xa8E(\d+)E/g,function(e,t){var r=parseInt(t);return String.fromCharCode(r)}),r.converter._dispatch("unescapeSpecialChars.after",e,t,r)}),t.subParser("makeMarkdown.blockquote",function(e,r){"use strict";var n="";if(e.hasChildNodes())for(var o=e.childNodes,i=o.length,s=0;s<i;++s){var a=t.subParser("makeMarkdown.node")(o[s],r);""!==a&&(n+=a)}return"> "+(n=n.trim()).split("\n").join("\n> ")}),t.subParser("makeMarkdown.codeBlock",function(e,t){"use strict";var r=e.getAttribute("language"),n=e.getAttribute("precodenum");return"```"+r+"\n"+t.preList[n]+"\n```"}),t.subParser("makeMarkdown.codeSpan",function(e){"use strict";return"`"+e.innerHTML+"`"}),t.subParser("makeMarkdown.emphasis",function(e,r){"use strict";var n="";if(e.hasChildNodes()){n+="*";for(var o=e.childNodes,i=o.length,s=0;s<i;++s)n+=t.subParser("makeMarkdown.node")(o[s],r);n+="*"}return n}),t.subParser("makeMarkdown.header",function(e,r,n){"use strict";var o=new Array(n+1).join("#"),i="";if(e.hasChildNodes()){i=o+" ";for(var s=e.childNodes,a=s.length,c=0;c<a;++c)i+=t.subParser("makeMarkdown.node")(s[c],r)}return i}),t.subParser("makeMarkdown.hr",function(){"use strict";return"---"}),t.subParser("makeMarkdown.image",function(e){"use strict";var t="";return e.hasAttribute("src")&&(t+="!["+e.getAttribute("alt")+"](",t+="<"+e.getAttribute("src")+">",e.hasAttribute("width")&&e.hasAttribute("height")&&(t+=" ="+e.getAttribute("width")+"x"+e.getAttribute("height")),e.hasAttribute("title")&&(t+=' "'+e.getAttribute("title")+'"'),t+=")"),t}),t.subParser("makeMarkdown.links",function(e,r){"use strict";var n="";if(e.hasChildNodes()&&e.hasAttribute("href")){var o=e.childNodes,i=o.length;n="[";for(var s=0;s<i;++s)n+=t.subParser("makeMarkdown.node")(o[s],r);n+="](",n+="<"+e.getAttribute("href")+">",e.hasAttribute("title")&&(n+=' "'+e.getAttribute("title")+'"'),n+=")"}return n}),t.subParser("makeMarkdown.list",function(e,r,n){"use strict";var o="";if(!e.hasChildNodes())return"";for(var i=e.childNodes,s=i.length,a=e.getAttribute("start")||1,c=0;c<s;++c)void 0!==i[c].tagName&&"li"===i[c].tagName.toLowerCase()&&(o+=("ol"===n?a.toString()+". ":"- ")+t.subParser("makeMarkdown.listItem")(i[c],r),++a);return(o+="\n\x3c!-- --\x3e\n").trim()}),t.subParser("makeMarkdown.listItem",function(e,r){"use strict";for(var n="",o=e.childNodes,i=o.length,s=0;s<i;++s)n+=t.subParser("makeMarkdown.node")(o[s],r);return/\n$/.test(n)?n=n.split("\n").join("\n    ").replace(/^ {4}$/gm,"").replace(/\n\n+/g,"\n\n"):n+="\n",n}),t.subParser("makeMarkdown.node",function(e,r,n){"use strict";n=n||!1;var o="";if(3===e.nodeType)return t.subParser("makeMarkdown.txt")(e,r);if(8===e.nodeType)return"\x3c!--"+e.data+"--\x3e\n\n";if(1!==e.nodeType)return"";switch(e.tagName.toLowerCase()){case"h1":n||(o=t.subParser("makeMarkdown.header")(e,r,1)+"\n\n");break;case"h2":n||(o=t.subParser("makeMarkdown.header")(e,r,2)+"\n\n");break;case"h3":n||(o=t.subParser("makeMarkdown.header")(e,r,3)+"\n\n");break;case"h4":n||(o=t.subParser("makeMarkdown.header")(e,r,4)+"\n\n");break;case"h5":n||(o=t.subParser("makeMarkdown.header")(e,r,5)+"\n\n");break;case"h6":n||(o=t.subParser("makeMarkdown.header")(e,r,6)+"\n\n");break;case"p":n||(o=t.subParser("makeMarkdown.paragraph")(e,r)+"\n\n");break;case"blockquote":n||(o=t.subParser("makeMarkdown.blockquote")(e,r)+"\n\n");break;case"hr":n||(o=t.subParser("makeMarkdown.hr")(e,r)+"\n\n");break;case"ol":n||(o=t.subParser("makeMarkdown.list")(e,r,"ol")+"\n\n");break;case"ul":n||(o=t.subParser("makeMarkdown.list")(e,r,"ul")+"\n\n");break;case"precode":n||(o=t.subParser("makeMarkdown.codeBlock")(e,r)+"\n\n");break;case"pre":n||(o=t.subParser("makeMarkdown.pre")(e,r)+"\n\n");break;case"table":n||(o=t.subParser("makeMarkdown.table")(e,r)+"\n\n");break;case"code":o=t.subParser("makeMarkdown.codeSpan")(e,r);break;case"em":case"i":o=t.subParser("makeMarkdown.emphasis")(e,r);break;case"strong":case"b":o=t.subParser("makeMarkdown.strong")(e,r);break;case"del":o=t.subParser("makeMarkdown.strikethrough")(e,r);break;case"a":o=t.subParser("makeMarkdown.links")(e,r);break;case"img":o=t.subParser("makeMarkdown.image")(e,r);break;default:o=e.outerHTML+"\n\n"}return o}),t.subParser("makeMarkdown.paragraph",function(e,r){"use strict";var n="";if(e.hasChildNodes())for(var o=e.childNodes,i=o.length,s=0;s<i;++s)n+=t.subParser("makeMarkdown.node")(o[s],r);return n.trim()}),t.subParser("makeMarkdown.pre",function(e,t){"use strict";var r=e.getAttribute("prenum");return"<pre>"+t.preList[r]+"</pre>"}),t.subParser("makeMarkdown.strikethrough",function(e,r){"use strict";var n="";if(e.hasChildNodes()){n+="~~";for(var o=e.childNodes,i=o.length,s=0;s<i;++s)n+=t.subParser("makeMarkdown.node")(o[s],r);n+="~~"}return n}),t.subParser("makeMarkdown.strong",function(e,r){"use strict";var n="";if(e.hasChildNodes()){n+="**";for(var o=e.childNodes,i=o.length,s=0;s<i;++s)n+=t.subParser("makeMarkdown.node")(o[s],r);n+="**"}return n}),t.subParser("makeMarkdown.table",function(e,r){"use strict";var n,o,i="",s=[[],[]],a=e.querySelectorAll("thead>tr>th"),c=e.querySelectorAll("tbody>tr");for(n=0;n<a.length;++n){var u=t.subParser("makeMarkdown.tableCell")(a[n],r),l="---";if(a[n].hasAttribute("style"))switch(a[n].getAttribute("style").toLowerCase().replace(/\s/g,"")){case"text-align:left;":l=":---";break;case"text-align:right;":l="---:";break;case"text-align:center;":l=":---:"}s[0][n]=u.trim(),s[1][n]=l}for(n=0;n<c.length;++n){var p=s.push([])-1,d=c[n].getElementsByTagName("td");for(o=0;o<a.length;++o){var f=" ";void 0!==d[o]&&(f=t.subParser("makeMarkdown.tableCell")(d[o],r)),s[p].push(f)}}var h=3;for(n=0;n<s.length;++n)for(o=0;o<s[n].length;++o){var m=s[n][o].length;m>h&&(h=m)}for(n=0;n<s.length;++n){for(o=0;o<s[n].length;++o)1===n?":"===s[n][o].slice(-1)?s[n][o]=t.helper.padEnd(s[n][o].slice(-1),h-1,"-")+":":s[n][o]=t.helper.padEnd(s[n][o],h,"-"):s[n][o]=t.helper.padEnd(s[n][o],h);i+="| "+s[n].join(" | ")+" |\n"}return i.trim()}),t.subParser("makeMarkdown.tableCell",function(e,r){"use strict";var n="";if(!e.hasChildNodes())return"";for(var o=e.childNodes,i=o.length,s=0;s<i;++s)n+=t.subParser("makeMarkdown.node")(o[s],r,!0);return n.trim()}),t.subParser("makeMarkdown.txt",function(e){"use strict";var r=e.nodeValue;return r=(r=r.replace(/ +/g," ")).replace(/\xa8NBSP;/g," "),(r=(r=(r=(r=(r=(r=(r=(r=t.helper.unescapeHTMLEntities(r)).replace(/([*_~|`])/g,"\\$1")).replace(/^(\s*)>/g,"\\$1>")).replace(/^#/gm,"\\#")).replace(/^(\s*)([-=]{3,})(\s*)$/,"$1\\$2$3")).replace(/^( {0,3}\d+)\./gm,"$1\\.")).replace(/^( {0,3})([+-])/gm,"$1\\$2")).replace(/]([\s]*)\(/g,"\\]$1\\(")).replace(/^ {0,3}\[([\S \t]*?)]:/gm,"\\[$1]:")}),"function"==typeof define&&define.amd?define(function(){"use strict";return t}):Rr.exports?Rr.exports=t:this.showdown=t}).call(this),Rr=Rr.exports;const{Octokit:Gr}=Ar,Dr=new Rr.Converter,Mr=new Gr;function qr(e){return 1==e.toLocaleString().length?["0"].concat(e.toLocaleString().split("")):e.toLocaleString().split("")}function Br(e){let t=0;for(let r=0;r<e.length;r++)t+=e[r];return t.toString().substr(1,t.toString().length)}owner="GreXLin85",repo="ClearJobList",Mr.issues.listForRepo({owner:"GreXLin85",repo:"ClearJobList"}).then(e=>{if(0!=e.data.length){for(let t=0;t<e.data.length;t++)if("job"==e.data[t].labels[0].name){let r=new Date(e.data[t].created_at);Lr(document).ready(function(){Lr("#jobs").append('<div class="card text-center"><a type="button" onclick="a()" href="#'+e.data[t].number+'" class="btn btn-secondary bg-white text-dark border border-success" data-container="body" data-toggle="popover" data-placement="top" >Click to me for see more detail</a><div class="card-body"><h5 class="card-title">'+e.data[t].title+'</h5></div><div class="card-footer text-muted">'+Br(qr(r.getUTCDay()))+"."+Br(qr(r.getUTCMonth()))+"."+r.getUTCFullYear()+"</div></div><br>")})}}else Lr(document).ready(function(){Lr("#jobs").append('No jobs found <br><a href="https://github.com/GreXLin85/IWantRemoteJob/issues/new"><kbd>Click me</kbd></a> if you want to post a job advertisement')})}),window.a=async function(){Lr("#jobs").html('<div class="d-flex justify-content-center"><div class="spinner-border" role="status"><span class="sr-only">Loading...</span></div></div>'),await(10,new Promise(e=>{setTimeout(e,10)}));let e=await window.location.hash.substr(1,window.location.hash.length);Mr.issues.get({owner:"GreXLin85",repo:"ClearJobList",issue_number:await e}).then(e=>{Lr("#jobs").html('<div class="card"><a type="button"  href="/" class="btn btn-secondary bg-white text-dark border border-success text-center" data-container="body" data-toggle="popover" data-placement="top">Go Back!</a><div class="card-body"><h5 class="card-title text-center">'+e.data.title+'</h5><p class="card-text">'+Dr.makeHtml(e.data.body)+"</p></div></div><br>")})}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,